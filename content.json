{"posts":[{"title":"【Hexo】Hexo搭建","text":"# 【Hexo】Hexo 搭建 # # hexo 框架个人博客搭建 # # 1 环境准备 # # 1.1 Node.js 和 npm 安装 1NoedJS自行百度安装 # # 1.2 (选) npm 淘宝镜像 1npm install -g cnpm --registry.npm.taobao.org # # 1.3 hexo 框架安装 1cnpm install -g hexo-cli # # 1.4git 安装配置 git 官网 下载对应系统安装包 运行安装包 一路下一步 开始菜单运行 Git Bash (运行成功表示 git 安装成功) git 安装好去 GitHub 上注册一个账号 设置 git：在 Git Bush 命令行中输入 1234# 配置用户名git config --global user.name &quot;username&quot; //（ &quot;username&quot;是自己的账户名）# 配置邮箱git config --global user.email &quot;username@email.com&quot; //(&quot;username@email.com&quot;注册账号时用的邮箱) 以上命令执行结束后，可用 git config –global –list 命令查看配置是否 OK 生成 ssh, 在命令框中输入以下命令 1ssh-keygen -t rsa 连续敲三次回车，结束后去系统盘目录下（一般在 C:\\Users\\ 你的用户名.ssh）(mac: /Users/ 用户 /.ssh）查看是否有：ssh 文件夹生成 \\7. 将 ssh 文件夹中的公钥（ id_rsa.pub）添加到 GitHub 管理平台中，在 GitHub 的个人账户的设置中找到如下界面 20181012202024433 title 随便起一个，将公钥（ id_rsa.pub）文件中内容复制粘贴到 key 中，然后点击 Ass SSH key 就好啦 # # 2 建立本地网站 # # 2.1 在本地建立一个文件夹 1去任意盘符下，建立一个文件夹，这个文件夹就是你的博客文件夹 # # 2.2 cmd 命令进入这个文件夹 1进入文件夹后，路径输入cmd进入命令提示符窗口 # # 2.3 hxeo 生成博客 1sudo hexo init # # 2.4 启动博客 1hexo s 进入网站 说明建立成功 # # 3 上传至 github # # 3.1 建立仓库 登录 github 新建一个仓库 仓库名必须是 “&lt;&lt;你的 Github 名字&gt;&gt;.github.io” # # 3.2 在博客目录安装 git 插件 1cnpm install --save hexo-deployer-git # # 3.3 设置文件 “_config.yml”（最底部） 1234deploy: type: git repo: //仓库的ssh地址 branch: master # # 3.4 部署到远端 1hexo d //需要登陆 # # 3.5 访问 ”https://&lt;&lt;你的 username&gt;&gt;.github.io“ 1234567补充命令：hexo clean 清理博客hexo generate 同步博客hexo deploy 提交博客","link":"/2023/07/05/%E3%80%90Hexo%E3%80%91Hexo%E6%90%AD%E5%BB%BA/"},{"title":"【Hexo】使用Hexo搭建属于自己的博客","text":"# 【Hexo】使用 Hexo 搭建属于自己的博客 # # 【Hexo】使用 Hexo 搭建属于自己的博客 目录 一、查询当前博客发布地址 二、域名注册 1、这里博主以阿里云为例，首先进入阿里云官网，登录账号 2、点击搜索按钮，搜索栏输入域名，点击搜索 3、点击域名注册 4、在搜索栏输入想要的域名，这里以 “wanwang” 举例，点击查询域名 5、购买域名 6、购买完成后，返回查询域名页面，点击管理我的域名 7、找到刚刚购买的域名，点击解析 8、点击添加记录 9、添加记录 10、设置成功后，等待状态变为正常即可 11、设置自定义域名 三、完成 1、访问刚才设置好的域名，“http:// 域名”，出现博客页面，表示成功。 # # 一、查询当前博客发布地址 1、登录 GitHub，找到仓库（一般以 “.github.io” 结尾），点击进入 img 2、右上方点击 “Settings”, 左下方找到 “Pages” 点击后，蓝色字体为博客发布的网址，点击查看，网址一般为 “https:// 仓库名 /” img # # 二、域名注册 注：博主这里提供国内域名商的官网，仅供参考！ 阿里云网址 阿里云 - 上云就上阿里云https://www.aliyun.com/ 华为云网址 最新优惠活动_云服务器特惠促销_打折云产品专场_特价低至 1 折 - 华为云https://activity.huaweicloud.com/ 腾讯云网址 腾讯云 - 产业智变 云启未来https://cloud.tencent.com/ # # 1、这里博主以阿里云为例，首先进入阿里云官网，登录账号 img # # 2、点击搜索按钮，搜索栏输入域名，点击搜索 img # # 3、点击域名注册 img # # # # 4、在搜索栏输入想要的域名，这里以 “wanwang” 举例，点击查询域名 img # # 5、购买域名 搜索结果，可能出现已注册情况，建议选择未注册的域名，点击购买，各位朋友请根据自己的需求和自身的经济实力购买，域名没有永久的都是有时效性的，具体可以询问客服 img # # 6、购买完成后，返回查询域名页面，点击管理我的域名 img # # 7、找到刚刚购买的域名，点击解析 img # # 8、点击添加记录 img # # 9、添加记录 img # # 10、设置成功后，等待状态变为正常即可 img # # 11、设置自定义域名 右上方点击 “Settings”，左下方找到 “Pages” 点击后，在 “Custom domain”（自定义域名）下方文本栏中填写域名，勾选 “Enforce HTTPS”（强制使用 https 协议），点击 “Save”（保存），蓝色字体为博客发布的网址，点击查看，网址一般为 “https:// 域名 /” img # # 三、完成 # # 1、访问刚才设置好的域名，“http:// 域名”，出现博客页面，表示成功。 img","link":"/2023/07/05/%E3%80%90Hexo%E3%80%91%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"title":"","text":"# 云尚办公系统：前端基础知识 # 1、前端开发介绍 前端工程师 “Front-End-Developer” 源自于美国。大约从 2005 年开始正式的前端工程师角色被行业所认可，到了 2010 年，互联网开始全面进入移动时代，前端开发的工作越来越重要。 最初所有的开发工作都是由后端工程师完成的，随着业务越来越繁杂，工作量变大，于是我们将项目中的可视化部分和一部分交互功能的开发工作剥离出来，形成了前端开发。 由于互联网行业的急速发展，导致了在不同的国家，有着截然不同的分工体制。 在日本和一些人口比较稀疏的国家，例如加拿大、澳洲等，流行 “Full-Stack Engineer”，也就是我们通常所说的全栈工程师。通俗点说就是一个人除了完成前端开发和后端开发工作以外，有的公司从产品设计到项目开发再到后期运维可能都是同一个人，甚至可能还要负责 UI、配动画，也可以是扫地、擦窗、写文档、维修桌椅等等。 而在美国等互联网环境比较发达的国家项目开发的分工协作更为明确，整个项目开发分为前端、中间层和后端三个开发阶段，这三个阶段分别由三个或者更多的人来协同完成。 国内的大部分互联网公司只有前端工程师和后端工程师，中间层的工作有的由前端来完成，有的由后端来完成。 PRD（产品原型 - 产品经理） - PSD（视觉设计 - UI 工程师） - HTML/CSS/JavaScript（PC / 移动端网页，实现网页端的视觉展示和交互 - 前端工程师） # 2、下载和安装 VS Code # 2.1、下载地址 https://code.visualstudio.com/ # 2.2、插件安装 为方便后续开发，建议安装如下插件 # 2.3、创建项目 vscode 本身没有新建项目的选项，所以要先创建一个空的文件夹，如 project_xxxx。 然后打开 vscode，再在 vscode 里面选择 File -&gt; Open Folder 打开文件夹，这样才可以创建项目。 # 2.4、保存工作区 打开文件夹后，选择 “文件 -&gt; 将工作区另存为…”，为工作区文件起一个名字，存储在刚才的文件夹下即可 # 2.5、新建文件夹和网页 # 2.6、预览网页 以文件路径方式打开网页预览 需要安装 “open in browser” 插件： 文件右键 -&gt; Open In Default Browser 以服务器方式打开网页预览 需要安装 “Live Server” 插件： 文件右键 -&gt; Open with Live Server # 2.7、设置字体大小 左边栏 Manage -&gt; settings -&gt; 搜索 “font” -&gt; Font size # 二、ES6 入门 # 1、ECMAScript 6 简介 ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。 # 2、基本语法 本部分只学习前端开发中 ES6 的最少必要知识，方便后面项目开发中对代码的理解。 # 2.1、模板字符串 创建 模板字符串.html 123456// 2、字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。let name = &quot;Mike&quot;let age = 27let info = `My Name is ${name},I am ${age+1} years old next year.`console.log(info)// My Name is Mike,I am 28 years old next year. # 2.2、对象拓展运算符 创建 对象拓展运算符.html 拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。 1234// 1、拷贝对象let person1 = {name: &quot;Amy&quot;, age: 15}let someone = { ...person1 }console.log(someone) //{name: &quot;Amy&quot;, age: 15} # 2.3、箭头函数 创建 箭头函数.html 箭头函数提供了一种更加简洁的函数书写方式。基本语法是： 参数 =&gt; 函数体 12345678// 传统var f1 = function(a){ return a}console.log(f1(1))// ES6var f2 = a =&gt; aconsole.log(f2(1)) 12345678910// 当箭头函数没有参数或者有多个参数，要用 () 括起来。// 当箭头函数函数体有多行语句，用 {} 包裹起来，表示代码块，// 当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。var f3 = (a,b) =&gt; { let result = a+b return result}console.log(f3(6,2)) // 8// 前面代码相当于：var f4 = (a,b) =&gt; a+b 箭头函数多用于匿名函数的定义 # 三、Vue 基础 # 1、入门 # 1.1、Vue.js 是什么 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。 Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 官方网站：https://cn.vuejs.org # 1.2、示例 创建 demo.html 123456789101112131415&lt;!-- id标识vue作用的范围 --&gt;&lt;div id=&quot;app&quot;&gt; &lt;!-- {{}} 插值表达式，绑定vue中的data数据 --&gt; {{ message }}&lt;/div&gt;&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; // 创建一个vue对象 new Vue({ el: '#app',//绑定vue作用的范围 data: {//定义页面中显示的模型数据 message: 'Hello Vue!' } })&lt;/script&gt; 这就是声明式渲染：Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统 这里的核心思想就是没有繁琐的 DOM 操作，例如 jQuery 中，我们需要先找到 div 节点，获取到 DOM 对象，然后进行一系列的节点操作 # 2、实例生命周期 创建 vue 实例的生命周期.html 12345678910111213141516171819202122&lt;body&gt; &lt;div id=&quot;app&quot;&gt; {{info}} &lt;/div&gt; &lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; new Vue({ el: '#app', data: { info:'hello atguigu' }, created() { //渲染前 debugger console.log('created....') }, mounted() { //渲染后 debugger console.log('mounted....') } }) &lt;/script&gt;&lt;/body&gt; # 3、Axios Axios 是独立于 Vue 的一个项目，基于 promise 用于浏览器和 node.js 的 http 客户端 在浏览器中可以帮助我们完成 ajax 请求的发送 在 node.js 中可以向远程接口发送请求 引入 vue 和 axios 的 js 文件 12&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;axios.min.js&quot;&gt;&lt;/script&gt; 进行 axios 调用 123456789101112131415161718192021var app = new Vue({ el: '#app', data: { memberList: []//数组 }, created() { this.getList() }, methods: { getList(id) { axios.get('data.json') .then(response =&gt; { console.log(response) this.memberList = response.data.data.items }) .catch(error =&gt; { console.log(error) }) } }}) 创建 data.json 文件 123456789101112{ &quot;success&quot;:true, &quot;code&quot;:20000, &quot;message&quot;:&quot;成功&quot;, &quot;data&quot;:{ &quot;list&quot;:[ {&quot;name&quot;:&quot;lucy&quot;,&quot;age&quot;:20}, {&quot;name&quot;:&quot;mary&quot;,&quot;age&quot;:30}, {&quot;name&quot;:&quot;jack&quot;,&quot;age&quot;:40} ] }} 控制台查看输出 # 四、Node.js 入门 # 1、Node.js 简介 # 1.1、什么是 Node.js 简单的说 Node.js 就是运行在服务端的 JavaScript。 Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。 # 1.2、Node.js 有什么用 如果你是一个前端程序员，你不懂得像 PHP、Python 或 Ruby 等动态编程语言，然后你想创建自己的服务，那么 Node.js 是一个非常好的选择。 Node.js 是运行在服务端的 JavaScript，如果你熟悉 Javascript，那么你将会很容易的学会 Node.js。 当然，如果你是后端程序员，想部署一些高性能的服务，那么学习 Node.js 也是一个非常好的选择。 # 2、Node.js 安装 # 2.1、下载 官网：https://nodejs.org/en/ 中文网：http://nodejs.cn/ LTS：长期支持版本 Current：最新版 # 2.2、安装和查看版本 1node -v # 3、简单入门 创建 01 - 控制台程序.js 1console.log('Hello Node.js') 进入到程序所在的目录，输入 1node 01-控制台程序.js 浏览器的内核包括两部分核心： DOM 渲染引擎； js 解析器（js 引擎） js 运行在浏览器中的内核中的 js 引擎内部 Node.js 是脱离浏览器环境运行的 JavaScript 程序，基于 V8 引擎（Chrome 的 JavaScript 的引擎） # 三、NPM # 1、NPM 简介 # 1.1、什么是 NPM NPM 全称 Node Package Manager，是 Node.js 包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是 Node.js 的包管理工具，相当于前端的 Maven 。 # 1.2、NPM 工具的安装位置 我们通过 npm 可以很方便地下载 js 库，管理前端工程。 Node.js 默认安装的 npm 包和工具的位置：Node.js 目录 \\node_modules 在这个目录下你可以看见 npm 目录，npm 本身就是被 NPM 包管理器管理的一个工具，说明 Node.js 已经集成了 npm 工具 12#在命令提示符输入 npm -v 可查看当前npm版本npm -v # 2、使用 npm 管理项目 # 2.1、创建文件夹 npm # 2.2、项目初始化 123456789#建立一个空文件夹，在命令提示符进入该文件夹 执行命令初始化npm init#按照提示输入相关信息，如果是用默认值则直接回车即可。#name: 项目名称#version: 项目版本号#description: 项目描述#keywords: {Array}关键词，便于用户搜索到我们的项目#最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml#我们之后也可以根据需要进行修改。 12#如果想直接生成 package.json 文件，那么可以使用命令npm init -y # 2.3、修改 npm 镜像 NPM 官方的管理的包都是从 http://npmjs.com 下载的，但是这个网站在国内速度很慢。 这里推荐使用淘宝 NPM 镜像 http://npm.taobao.org/ ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10 分钟一次，以保证尽量与官方服务同步。 设置镜像地址： 1234#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载npm config set registry https://registry.npm.taobao.org #查看npm配置信息npm config list # 2.4、npm install 命令的使用 123456789#使用 npm install 安装依赖包的最新版，#模块安装的位置：项目目录\\node_modules#安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本#同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt;npm install jquery#npm管理的项目在备份和传输的时候一般不携带node_modules文件夹npm install #根据package.json中的配置下载依赖，初始化项目#如果安装时想指定特定的版本npm install jquery@2.1.x # 四、模块化开发 # 1、模块化简介 # 1.1、模块化产生的背景 随着网站逐渐变成 &quot;互联网应用程序&quot;，嵌入网页的 Javascript 代码越来越庞大，越来越复杂。 Javascript 模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。 但是，Javascript 不是一种模块化编程语言，它不支持 &quot;类&quot;（class），包（package）等概念，更遑论 &quot;模块&quot;（module）了。 # 1.2、什么是模块化开发 传统非模块化开发有如下的缺点： 命名冲突 文件依赖 模块化规范： CommonJS 模块化规范 ES6 模块化规范 # 2、ES6 模块化写法（一） 每个文件就是一个模块，有自己作用域。在一个文件里定义的变量、函数、类，都是私有的，对其他文件不可见。ES6 使用 export 和 import 来导出、导入模块。 # 2.1、导出模块 创建 src/userApi.js 123456export function getList() { console.log('获取数据列表')}export function save() { console.log('保存数据')} # 2.2、导入模块 创建 src/userComponent.js 1234//只取需要的方法即可，多个方法用逗号分隔import { getList, save } from &quot;./userApi.js&quot;getList()save() 注意：这时程序无法运行，因为 ES6 的模块化无法在 Node.js 中执行，需要用 Babel 编辑成 ES5 后再执行。 # 2.3、安装 Babel Babel 是一个广泛使用的转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行执行 安装命令行转码工具 Babel 提供 babel-cli 工具，用于命令行转码。它的安装命令如下： 123npm install --global babel-cli#查看是否安装成功babel --version # 2.4、配置.babelrc Babel 的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，presets 字段设定转码规则，将 es2015 规则加入 .babelrc： 1234{ &quot;presets&quot;: [&quot;es2015&quot;], &quot;plugins&quot;: []} # 2.5、安装转码器 在项目中安装 1npm install --save-dev babel-preset-es2015 # 2.6、转码 1234# 整个目录转码mkdir dist1# --out-dir 或 -d 参数指定输出目录babel src -d dist1 # 2.7、运行程序 1node dist1/userComponent.js # 3、ES6 模块化写法（二） # 3.1、导出模块 创建 es6/userApi2.js 12345678export default { getList() { console.log('获取数据列表2') }, save() { console.log('保存数据2') }} # 3.2、导入模块 创建 es6/userComponent2.js 123import user from &quot;./userApi2.js&quot;user.getList()user.save() # 3.3、转码 1234# 整个目录转码mkdir dist2# --out-dir 或 -d 参数指定输出目录babel es6 -d dist2 # 3.4、运行程序 1node dist2/userComponent2.js","link":"/2023/07/06/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"title":"【chatGPT】基于Docker如何快速部署自己的ChatGPT","text":"# 基于 Docker 如何快速部署自己的 ChatGPT # 背景 随着 OpenAI 在 2022 年底发布的 LLM 模型 - ChatGPT 展现出的强大效果，ChatGPT 无疑成为了当下炙手可热的明星模型。 现有的基于 GPT 的开源项目已经非常多，本文以现有的高热度 github 开源项目 chatgpt-web 为例，教大家简单快速地搭建属于自己的 ChatGPT。 # ChatGPT-Web chatgpt-web 项目中的部署教程已经非常完整，本文不再过多解释。 仅以 Docker 部署为例 前置条件 本地或者服务器应该具有 Docker 环境 具有 ChatGPT 帐号 以 token 模式为例，请求 chatgpt web 版本，免费但稍微具有延迟 Step1. 找到你帐号的 token 点击 https://chat.openai.com/api/auth/session，获取你帐号的 token，并记录他 Step2. 运行 docker 按需配置访问 Web 页面的密码，Token、超时等信息 12docker run --name chatgpt-web -d -p 127.0.0.1:3888:3002 --env OPENAI_ACCESS_TOKEN=your_access_token --env AUTH_SECRET_KEY=you_secret_key chenzhaoyu94/chatgpt-web1 Step3. 访问 localhost:3002 查看效果 在上述步骤中我们无需进行任何代理，就可以直接与 GPT 交流，使用 API 方式同理。当然了，根据项目作者的介绍，使用 API 时需要进行代理自建。 如果你只是在本地部署给自己使用，那么以上 3 步就满足了需求，如果想要在公网访问，或者像 App 一样访问你的 ChatGPT，那么请接着往下看。 # Nginx 反向代理 以宝塔面板为例，我们在服务器上拉起 docker 镜像后，可以通过 ip:port 进行访问 但通常来说我们的网站带有域名，以笔者所使用的腾讯云服务器为例 前置条件 拥有一个域名 拥有一台云服务器 Step1. SSL 证书 首先在云产品中找到 SSL 证书，点击我的证书 - 免费证书 - 申请免费证书 填写申请的域名，申请成功之后，点击下载，下载 nginx 格式的即可 Step2. 配置域名 SSL 在宝塔面板中选择 - 网站 - 添加站点 填写刚刚申请 SSL 证书的域名，选择纯静态，其余默认，点击确定即可 Step3. 配置证书 点击添加好的网站，然后点击 SSL，填入刚刚下载的文件中的 key 和 pem 配置完成后点击保存 Step4. 配置 DNS 解析 在云产品中搜索 - 云解析 - 选择 DNS 解析 DNSPod 点击我的域名 - 添加记录 填入刚刚申请的域名，如果带有前缀，则第一个红框填入你的域名前缀，比如 www.baidu.com，则这里填 www 第二个红框填写你的服务器 ip，或者你的 CDN 域名 Step5. 配置反向代理 在宝塔面板中，点击刚刚添加的网站，点击反向代理，填入刚刚 docker 启动时的宿主机端口 如上文中的 3888 以上配置完成之后，访问 https:// 你的域名就可以了～ # PWA 支持 PWA 技术可以让我们访问网站能够拥有访问 App 一般的体验，在 chatgpt-web 中已经内嵌，但默认是关闭的 我们可以通过设置启动时的参数 -env VITE_GLOB_APP_PWA=true 将他打开 12docker run --name chatgpt-web -d -p 127.0.0.1:3888:3002 --env OPENAI_ACCESS_TOKEN=your_access_token --env AUTH_SECRET_KEY=you_secret_key --env VITE_GLOB_APP_PWA=true chenzhaoyu94/chatgpt-web1 部署成功之后，我们再到手机上访问该网站时便可以保存他在桌面了。 默认的 PWA 图标和全局用户信息配置在项目中，即使在网页可以修改当前登陆者的用户信息，在清除 Cookie 之后便会还原，如果你想定制这两种信息，请拉下 chatgpt-web 项目进行镜像自定义","link":"/2023/07/03/%E3%80%90ChatGPT%E3%80%91%E5%9F%BA%E4%BA%8EDocker%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84ChatGPT/"},{"title":"","text":"# 云尚办公系统：管理端 - 审批管理 # 一、审批管理需求 # 1、需求描述 前面我们已经准备好了审批需要的数据：审批类型、审批模板（基本信息、动态表单、流程定义模型），接下来我们要部署审批定义模型，启动审批流，管理审批流 # 2、页面效果 # 3、数据库表设计 # 二、审批管理 # 1、审批管理 CRUD # 1.1、mapper 12345678910111213141516package com.atguigu.process.mapper;import com.atguigu.model.process.Process;import com.atguigu.vo.process.ProcessQueryVo;import com.atguigu.vo.process.ProcessVo;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;@Mapperpublic interface ProcessMapper extends BaseMapper&lt;Process&gt; { IPage&lt;ProcessVo&gt; selectPage(Page&lt;ProcessVo&gt; page, @Param(&quot;vo&quot;) ProcessQueryVo processQueryVo);} # 1.2、xml 123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.atguigu.process.mapper.ProcessMapper&quot;&gt; &lt;select id=&quot;selectPage&quot; resultType=&quot;com.atguigu.vo.process.ProcessVo&quot;&gt; select a.id,a.process_code,a.user_id,a.process_template_id,a.process_type_id,a.title,a.description,a.form_values,a.process_instance_id,a.current_auditor,a.status,a.create_time,a.update_time, b.name as processTemplateName, c.name as processTypeName, d.name from oa_process a left join oa_process_template b on b.id = a.process_template_id left join oa_process_type c on c.id = a.process_type_id left join sys_user d on d.id = a.user_id &lt;where&gt; &lt;if test=&quot;vo.keyword != null and vo.keyword != ''&quot;&gt; and (a.process_code like CONCAT('%',#{vo.keyword},'%') or a.title like CONCAT('%',#{vo.keyword},'%') or d.phone like CONCAT('%',#{vo.keyword},'%') or d.name like CONCAT('%',#{vo.keyword},'%')) &lt;/if&gt; &lt;if test=&quot;vo.userId != null and vo.userId != ''&quot;&gt; and a.user_id = #{vo.userId} &lt;/if&gt; &lt;if test=&quot;vo.status != null and vo.status != ''&quot;&gt; and a.status = #{vo.status} &lt;/if&gt; &lt;if test=&quot;vo.createTimeBegin != null and vo.createTimeBegin != ''&quot;&gt; and a.create_time &gt;= #{vo.createTimeBegin} &lt;/if&gt; &lt;if test=&quot;vo.createTimeEnd != null and vo.createTimeEnd != ''&quot;&gt; and a.create_time &amp;lt;= #{vo.createTimeEnd} &lt;/if&gt; &lt;/where&gt; order by id desc &lt;/select&gt;&lt;/mapper&gt; # 1.3、service 接口 1234567891011121314package com.atguigu.process.service;import com.atguigu.model.process.Process;import com.atguigu.vo.process.ProcessQueryVo;import com.atguigu.vo.process.ProcessVo;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.IService;public interface ProcessService extends IService&lt;Process&gt; { IPage&lt;ProcessVo&gt; selectPage(Page&lt;ProcessVo&gt; pageParam, ProcessQueryVo processQueryVo);} # 1.4、service 接口实现 12345678910111213141516171819202122232425262728293031package com.atguigu.process.service.impl;import com.atguigu.model.process.Process;import com.atguigu.process.mapper.ProcessMapper;import com.atguigu.process.service.ProcessService;import com.atguigu.vo.process.ProcessQueryVo;import com.atguigu.vo.process.ProcessVo;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.annotation.Resource;@Slf4j@Service@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessServiceImpl extends ServiceImpl&lt;ProcessMapper, Process&gt; implements ProcessService { @Autowired private ProcessMapper processMapper; @Override public IPage&lt;ProcessVo&gt; selectPage(Page&lt;ProcessVo&gt; pageParam, ProcessQueryVo processQueryVo) { IPage&lt;ProcessVo&gt; page = processMapper.selectPage(pageParam, processQueryVo); return page; }} # 1.5、controller 接口 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.atguigu.process.controller;import com.atguigu.common.result.Result;import com.atguigu.process.service.ProcessService;import com.atguigu.vo.process.ProcessQueryVo;import com.atguigu.vo.process.ProcessVo;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@Api(tags = &quot;审批流管理&quot;)@RestController@RequestMapping(value = &quot;/admin/process&quot;)@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessController { @Autowired private ProcessService processService; @PreAuthorize(&quot;hasAuthority('bnt.process.list')&quot;) @ApiOperation(value = &quot;获取分页列表&quot;) @GetMapping(&quot;{page}/{limit}&quot;) public Result index( @ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true) @PathVariable Long page, @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true) @PathVariable Long limit, @ApiParam(name = &quot;processQueryVo&quot;, value = &quot;查询对象&quot;, required = false) ProcessQueryVo processQueryVo) { Page&lt;ProcessVo&gt; pageParam = new Page&lt;&gt;(page, limit); IPage&lt;ProcessVo&gt; pageModel = processService.selectPage(pageParam, processQueryVo); return Result.ok(pageModel); }} # 2、前端审批列表 # 2.1、定义 api 创建 src/api/process/process.js 1234567891011121314import request from '@/utils/request'const api_name = '/admin/process'export default { getPageList(page, limit, searchObj) { return request({ url: `${api_name}/${page}/${limit}`, method: 'get', params: searchObj // url查询字符串或表单键值对 }) }} # 2.2、创建 vue 页面 创建 views/processMgr/process/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;div class=&quot;search-div&quot;&gt; &lt;el-form label-width=&quot;70px&quot; size=&quot;small&quot;&gt; &lt;el-row&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;关 键 字&quot;&gt; &lt;el-input style=&quot;width: 95%&quot; v-model=&quot;searchObj.keyword&quot; placeholder=&quot;审批编号/标题/手机号码/姓名&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;状态&quot;&gt; &lt;el-select v-model=&quot;searchObj.status&quot; placeholder=&quot;请选状态&quot; style=&quot;width: 100%;&quot; &gt; &lt;el-option v-for=&quot;item in statusList&quot; :key=&quot;item.status&quot; :label=&quot;item.name&quot; :value=&quot;item.status&quot; /&gt; &lt;/el-select&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;操作时间&quot;&gt; &lt;el-date-picker v-model=&quot;createTimes&quot; type=&quot;datetimerange&quot; range-separator=&quot;至&quot; start-placeholder=&quot;开始时间&quot; end-placeholder=&quot;结束时间&quot; value-format=&quot;yyyy-MM-dd HH:mm:ss&quot; style=&quot;margin-right: 10px;width: 100%;&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row style=&quot;display:flex&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;mini&quot; :loading=&quot;loading&quot; @click=&quot;fetchData()&quot;&gt;搜索 &lt;/el-button&gt; &lt;el-button icon=&quot;el-icon-refresh&quot; size=&quot;mini&quot; @click=&quot;resetData&quot;&gt;重置&lt;/el-button&gt; &lt;/el-row&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;!-- 列表 --&gt; &lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot; &gt; &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot; &gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ (page - 1) * limit + scope.$index + 1 }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;processCode&quot; label=&quot;审批编号&quot; width=&quot;130&quot;/&gt; &lt;el-table-column prop=&quot;title&quot; label=&quot;标题&quot; width=&quot;180&quot;/&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;用户&quot;/&gt; &lt;el-table-column prop=&quot;processTypeName&quot; label=&quot;审批类型&quot;/&gt; &lt;el-table-column prop=&quot;processTemplateName&quot; label=&quot;审批模板&quot;/&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot; width=&quot;180&quot;/&gt; &lt;el-table-column label=&quot;状态&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ scope.row.status === 1 ? '审批中' : scope.row.status === 2 ? '完成' : '驳回' }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot; width=&quot;160&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;120&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;show(scope.row.id)&quot;&gt;查看&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;!-- 分页组件 --&gt; &lt;el-pagination :current-page=&quot;page&quot; :total=&quot;total&quot; :page-size=&quot;limit&quot; :page-sizes=&quot;[5, 10, 20, 30, 40, 50, 100]&quot; style=&quot;padding: 30px 0; text-align: center;&quot; layout=&quot;sizes, prev, pager, next, jumper, -&gt;, total, slot&quot; @current-change=&quot;fetchData&quot; @size-change=&quot;changeSize&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/process/process'export default { data() { return { listLoading: true, // 数据是否正在加载 list: null, // banner列表 total: 0, // 数据库中的总记录数 page: 1, // 默认页码 limit: 10, // 每页记录数 searchObj: {}, // 查询表单对象 statusList: [ { 'status': '1', 'name': '进行中' }, { 'status': '2', 'name': '已完成' }, { 'status': '-1', 'name': '驳回' } ], createTimes: [] } }, // 生命周期函数：内存准备完毕，页面尚未渲染 created() { console.log('list created......') this.fetchData() }, // 生命周期函数：内存准备完毕，页面渲染成功 mounted() { console.log('list mounted......') }, methods: { // 当页码发生改变的时候 changeSize(size) { console.log(size) this.limit = size this.fetchData(1) }, // 加载banner列表数据 fetchData(page = 1) { console.log('翻页。。。' + page) // 异步获取远程数据（ajax） this.page = page if (this.createTimes &amp;&amp; this.createTimes.length === 2) { this.searchObj.createTimeBegin = this.createTimes[0] this.searchObj.createTimeEnd = this.createTimes[1] } api.getPageList(this.page, this.limit, this.searchObj).then( response =&gt; { this.list = response.data.records this.total = response.data.total // 数据加载并绑定成功 this.listLoading = false } ) }, // 重置查询表单 resetData() { console.log('重置查询表单') this.searchObj = {} this.fetchData() }, show(id) { console.log(id) } }}&lt;/script&gt; # 3、部署流程定义 # 3.1、根据上传部署 # 3.1.1、定义 service 接口 操作类：ProcessService 1void deployByZip(String deployPath); # 3.1.2、service 接口实现 操作类：ProcessServiceImpl 12345678910111213@Overridepublic void deployByZip(String deployPath) { // 定义zip输入流 InputStream inputStream = this .getClass() .getClassLoader() .getResourceAsStream(deployPath); ZipInputStream zipInputStream = new ZipInputStream(inputStream); // 流程部署 Deployment deployment = repositoryService.createDeployment() .addZipInputStream(zipInputStream) .deploy();} # 3.2、完善审批模板发布 操作类：ProcessTemplateServiceImpl 123456789101112131415@Autowiredprivate ProcessService processService;@Transactional@Overridepublic void publish(Long id) { ProcessTemplate processTemplate = this.getById(id); processTemplate.setStatus(1); processTemplateMapper.updateById(processTemplate); //优先发布在线流程设计 if(!StringUtils.isEmpty(processTemplate.getProcessDefinitionPath())) { processService.deployByZip(processTemplate.getProcessDefinitionPath()); }} 说明：审批模板发布后不可以再编辑 # 3.4、页面按钮控制 按钮添加判断，发布后不可以编辑：v-if=“scope.row.status == 0” 12&lt;el-button type=&quot;text&quot; v-if=&quot;scope.row.status == 0&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processTemplate.templateSet') === false&quot;&gt;修改审批设置&lt;/el-button&gt;&lt;el-button type=&quot;text&quot; v-if=&quot;scope.row.status == 0&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processTemplate.remove') === false&quot;&gt;删除&lt;/el-button&gt;","link":"/2023/07/06/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/"},{"title":"","text":"# 云尚办公系统：前端权限对接（了解） # 硅谷通用权限系统：前端权限对接 # 一、菜单权限及按钮权限 按照下面步骤即可完成前端框架权限对接 # 1、修改 request.js 文件 # 2、store/modules/user.js 新增菜单及按钮处理 12345678910const getDefaultState = () =&gt; { return { token: getToken(), name: '', avatar: '', buttons: [], // 新增 menus: '' //新增 }} 1234567891011121314151617181920212223const mutations = { RESET_STATE: (state) =&gt; { Object.assign(state, getDefaultState()) }, SET_TOKEN: (state, token) =&gt; { state.token = token }, SET_NAME: (state, name) =&gt; { state.name = name }, SET_AVATAR: (state, avatar) =&gt; { state.avatar = avatar }, // 新增 SET_BUTTONS: (state, buttons) =&gt; { state.buttons = buttons }, // 新增 SET_MENUS: (state, menus) =&gt; { state.menus = menus }} 1234567891011121314151617181920212223// get user infogetInfo({ commit, state }) { return new Promise((resolve, reject) =&gt; { getInfo().then(response =&gt; { const { data } = response if (!data) { return reject('Verification failed, please Login again.') } const { name, avatar } = data commit('SET_NAME', name) commit('SET_AVATAR', avatar) commit(&quot;SET_BUTTONS&quot;, data.buttons) commit(&quot;SET_MENUS&quot;, data.routers) resolve(data) }).catch(error =&gt; { reject(error) }) })} # 3、store/getters.js 新增菜单及按钮处理 123456789101112const getters = { sidebar: state =&gt; state.app.sidebar, device: state =&gt; state.app.device, token: state =&gt; state.user.token, avatar: state =&gt; state.user.avatar, name: state =&gt; state.user.name, //新增 buttons: state =&gt; state.user.buttons, menus: state =&gt; state.user.menus}export default getters # 4、src/router 先在 router 这个目录下新建两个 js 文件，开发环境和生产环境导入组件的方式略有不同 _import_production.js 12// 生产环境导入组件module.exports = file =&gt; () =&gt; import('@/views/' + file + '.vue') _import_development.js 12// 开发环境导入组件module.exports = file =&gt; require('@/views/' + file + '.vue').default // vue-loader at least v13.0.0+ # 5、src/permission.js 整体替换该文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import router from './router'import store from './store'import { getToken } from '@/utils/auth'import { Message } from 'element-ui'import NProgress from 'nprogress' // 水平进度条提示: 在跳转路由时使用import 'nprogress/nprogress.css' // 水平进度条样式import getPageTitle from '@/utils/get-page-title' // 获取应用头部标题的函数import Layout from '@/layout'import ParentView from '@/components/ParentView'const _import = require('./router/_import_'+process.env.NODE_ENV) // 获取组件的方法NProgress.configure({ showSpinner: false }) // NProgress Configurationconst whiteList = ['/login'] // no redirect whitelistrouter.beforeEach(async(to, from, next) =&gt; { NProgress.start()// set page title document.title = getPageTitle(to.meta.title)// determine whether the user has logged in const hasToken = getToken() if (hasToken) { if (to.path === '/login') { // if is logged in, redirect to the home page next({ path: '/' }) NProgress.done() } else { const hasGetUserInfo = store.getters.name if (hasGetUserInfo) { next() } else { try { // get user info await store.dispatch('user/getInfo')// 请求获取用户信息 if (store.getters.menus.length &lt; 1) { global.antRouter = [] next() } const menus = filterAsyncRouter(store.getters.menus)// 1.过滤路由 console.log(menus) router.addRoutes(menus) // 2.动态添加路由 let lastRou = [{ path: '*', redirect: '/404', hidden: true }] router.addRoutes(lastRou) global.antRouter = menus // 3.将路由数据传递给全局变量，做侧边栏菜单渲染工作 next({ ...to, replace: true }) //next() } catch (error) { // remove token and go to login page to re-login console.log(error) await store.dispatch('user/resetToken') Message.error(error || 'Has Error') next(`/login?redirect=${to.path}`) NProgress.done() } } } } else { /* has no token*/ if (whiteList.indexOf(to.path) !== -1) { // in the free login whitelist, go directly next() } else { // other pages that do not have permission to access are redirected to the login page. next(`/login?redirect=${to.path}`) NProgress.done() } }})router.afterEach(() =&gt; { // finish progress bar NProgress.done()}) // // 遍历后台传来的路由字符串，转换为组件对象function filterAsyncRouter(asyncRouterMap) { const accessedRouters = asyncRouterMap.filter(route =&gt; { if (route.component) { if (route.component === 'Layout') { route.component = Layout } else if (route.component === 'ParentView') { route.component = ParentView } else { try { route.component = _import(route.component)// 导入组件 } catch (error) { debugger console.log(error) route.component = _import('dashboard/index')// 导入组件 } } } if (route.children &amp;&amp; route.children.length &gt; 0) { route.children = filterAsyncRouter(route.children) } else { delete route.children } return true }) return accessedRouters} # 6、src/router 删除 index.js 中自定义的路由，以下注释内容即为要删除的内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879export const constantRoutes = [ { path: '/login', component: () =&gt; import('@/views/login/index'), hidden: true }, // { // path: '/404', // component: () =&gt; import('@/views/404'), // hidden: true // }, { path: '/', component: Layout, redirect: '/dashboard', children: [{ path: 'dashboard', name: 'Dashboard', component: () =&gt; import('@/views/dashboard/index'), meta: { title: 'Dashboard', icon: 'dashboard' } }] } //添加我们的路由 // { // path: '/system', // component: Layout, // meta: { // title: '系统管理', // icon: 'el-icon-s-tools' // }, // alwaysShow: true, // children: [ // { // path: 'sysRole', // component: () =&gt; import('@/views/system/sysRole/list'), // meta: { // title: '角色管理', // icon: 'el-icon-s-help' // }, // }, // { // path: 'sysUser', // component: () =&gt; import('@/views/system/sysUser/list'), // meta: { // title: '用户管理', // icon: 'el-icon-s-help' // }, // }, // { // name: 'sysMenu', // path: 'sysMenu', // component: () =&gt; import('@/views/system/sysMenu/list'), // meta: { // title: '菜单管理', // icon: 'el-icon-s-unfold' // }, // }, // { // path: 'assignAuth', // component: () =&gt; import('@/views/system/sysRole/assignAuth'), // meta: { // activeMenu: '/system/sysRole', // title: '角色授权' // }, // hidden: true, // } // ] // }, // 404 page must be placed at the end !!! // { path: '*', redirect: '/404', hidden: true }] # 7、src/components 在 scr/components 目录下新建 ParentView 文件夹，添加 index.vue 123&lt;template &gt; &lt;router-view /&gt;&lt;/template&gt; # 8、layout/components/SideBar/index.vue 12345678computed: { ...mapGetters([ 'sidebar' ]), routes() { //return this.$router.options.routes return this.$router.options.routes.concat(global.antRouter) }, # 9、utils/btn-permission.js 在 uitls 目录添加 btn-permission.js 文件 123456789101112import store from '@/store'/** * 判断当前用户是否有此按钮权限 * 按钮权限字符串 permission */export default function hasBtnPermission(permission) { // 得到当前用户的所有按钮权限 const myBtns = store.getters.buttons // 如果指定的功能权限在myBtns中, 返回true ==&gt; 这个按钮就会显示, 否则隐藏 return myBtns.indexOf(permission) !== -1} # 10、main.js 123//新增import hasBtnPermission from '@/utils/btn-permission'Vue.prototype.$hasBP = hasBtnPermission # 11、views/login/index.vue 用户名检查只检查长度 1234567891011121314const validateUsername = (rule, value, callback) =&gt; { if (value.length&lt;4) { callback(new Error('Please enter the correct user name')) } else { callback() }}const validatePassword = (rule, value, callback) =&gt; { if (value.length &lt; 6) { callback(new Error('The password can not be less than 6 digits')) } else { callback() }} # 12、按钮权限控制 $hasBP (‘bnt.sysRole.add’) 控制按钮是否显示 如：角色管理添加按钮，我们没让按钮隐藏，而是让按钮不可操作 1&lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add&quot; :disabled=&quot;$hasBP('bnt.sysRole.add') === false&quot;&gt;添 加&lt;/el-button&gt;","link":"/2023/07/06/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E5%89%8D%E7%AB%AF%E6%9D%83%E9%99%90%E5%AF%B9%E6%8E%A5/"},{"title":"","text":"# 项目总结 # 1、项目功能模块和核心业务流程 # 1.1、管理端 # 1.1.1、系统管理： # （1）用户管理、角色管理、菜单管理 # （2）表之间关系 角色表、用户表、菜单表 用户和角色是多对多关系 角色和菜单是多对多关系 # 1.1.2、审批模块 # （1）审批类型管理 # （2）审批模板管理 # （3）审批列表 # 1.1.3、公众号菜单管理 # 1.2、员工端 # 1.2.1、微信授权登录 # （1）通过手机号和微信 openid 进行用户关联 # 1.2.2、显示所有审批类型和模板 # 1.2.3、发起申请 # 1.2.4、消息推送 # 1.2.5、待处理和已处理 # 1.2.6、查询审批详情和审批操作 # 2、项目技术 基础框架：SpringBoot 数据缓存：Redis 数据库：MyBatisPlus + MySQL 权限控制：SpringSecurity 工作流引擎：Activiti7 前端技术：vue-admin-template + Node.js + Npm + Vue + ElementUI + Axios 微信公众号：公众号菜单 + 微信授权登录 + 消息推送 # 3、项目问题和解决方式 # 3.1、跨域问题 访问协议： http https ip 地址（域名）： oa.atguigu.com oa.baidu.com 端口号：8800 9528 多种解决方式： （1）在 controller 类上面添加注解 （2）在前端进行配置 # 3.2、mapper 扫描问题 123456789101112//第一种方式 ：创建配置类，使用@MapperScan注解@Configuration@MapperScan(basePackages = {&quot;com.atguigu.auth.mapper&quot;,&quot;com.atguigu.process.mapper&quot;,&quot;com.atguigu.wechat.mapper&quot;})public class MybatisPlusConfig {}//第二种方式：在mapper的接口上面添加注解 @Mapper@Mapperpublic interface SysMenuMapper extends BaseMapper&lt;SysMenu&gt; { } # 3.3、xml 文件加载问题 Maven 默认情况下，在 src - main -java 目录下面，只会加载 java 类型文件，其他类型文件不会加载的 第一种解决方式：把 xml 文件放到 resources 目录下 第二种解决方式：在 pom.xml 和项目配置文件进行配置 # 3.4、流程定义部署 zip 文件 zip 文件规范（要求） （1）zip 文件名称和流程 key 保持一致 例如： 文件名称 qingjia.zip （2）在 zip 文件打包 xml 文件，xml 文件命名 .bpmn20.xml 例如：jiaban.bpmn20.xml # 3.5、内网穿透问题 接口和页面在本地 localhost，公众号不能直接访问本地路径的，需要使用内网穿透 有两个用途： 第一个：公众号页面通过内网穿透到本地页面 9090 第二个：公众号里面接口通过内网穿透到本地接口 8800 # 3.6、其他问题","link":"/2023/07/06/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"},{"title":"","text":"# 云尚办公系统：用户管理 # 一、用户管理 # 1、用户管理 CRUD # 1.1、Mapper 12345678package com.atguigu.auth.mapper;import com.atguigu.model.system.SysUser;import com.baomidou.mybatisplus.core.mapper.BaseMapper;public interface SysUserMapper extends BaseMapper&lt;SysUser&gt; {} # 1.2、service 接口 SysUserService 接口 123456789101112package com.atguigu.system.service;import com.atguigu.model.system.SysUser;import com.atguigu.vo.system.SysUserQueryVo;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.IService;public interface SysUserService extends IService&lt;SysUser&gt; {} # 1.3、service 接口实现 SysUserServiceImpl 实现 12345678910111213141516package com.atguigu.system.service.impl;import com.atguigu.model.system.SysUser;import com.atguigu.system.mapper.SysUserMapper;import com.atguigu.system.service.SysUserService;import com.atguigu.vo.system.SysUserQueryVo;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class SysUserServiceImpl extends ServiceImpl&lt;SysUserMapper, SysUser&gt; implements SysUserService {} # 1.4、controller 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package com.atguigu.auth.controller;import com.atguigu.auth.service.SysUserService;import com.atguigu.common.result.Result;import com.atguigu.model.system.SysUser;import com.atguigu.vo.system.SysUserQueryVo;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping(&quot;/admin/system/sysUser&quot;)public class SysUserController { @Autowired private SysUserService service; //用户条件分页查询 @ApiOperation(&quot;用户条件分页查询&quot;) @GetMapping(&quot;{page}/{limit}&quot;) public Result index(@PathVariable Long page, @PathVariable Long limit, SysUserQueryVo sysUserQueryVo) { //创建page对象 Page&lt;SysUser&gt; pageParam = new Page&lt;&gt;(page,limit); //封装条件，判断条件值不为空 LambdaQueryWrapper&lt;SysUser&gt; wrapper = new LambdaQueryWrapper&lt;&gt;(); //获取条件值 String username = sysUserQueryVo.getKeyword(); String createTimeBegin = sysUserQueryVo.getCreateTimeBegin(); String createTimeEnd = sysUserQueryVo.getCreateTimeEnd(); //判断条件值不为空 //like 模糊查询 if(!StringUtils.isEmpty(username)) { wrapper.like(SysUser::getUsername,username); } //ge 大于等于 if(!StringUtils.isEmpty(createTimeBegin)) { wrapper.ge(SysUser::getCreateTime,createTimeBegin); } //le 小于等于 if(!StringUtils.isEmpty(createTimeEnd)) { wrapper.le(SysUser::getCreateTime,createTimeEnd); } //调用mp的方法实现条件分页查询 IPage&lt;SysUser&gt; pageModel = service.page(pageParam, wrapper); return Result.ok(pageModel); } @ApiOperation(value = &quot;获取用户&quot;) @GetMapping(&quot;get/{id}&quot;) public Result get(@PathVariable Long id) { SysUser user = service.getById(id); return Result.ok(user); } @ApiOperation(value = &quot;保存用户&quot;) @PostMapping(&quot;save&quot;) public Result save(@RequestBody SysUser user) { service.save(user); return Result.ok(); } @ApiOperation(value = &quot;更新用户&quot;) @PutMapping(&quot;update&quot;) public Result updateById(@RequestBody SysUser user) { service.updateById(user); return Result.ok(); } @ApiOperation(value = &quot;删除用户&quot;) @DeleteMapping(&quot;remove/{id}&quot;) public Result remove(@PathVariable Long id) { service.removeById(id); return Result.ok(); }} # 15、knife4j 测试 http://localhost:8800/doc.html # 2、用户管理前端实现 # 2.1、添加路由 修改 src/router/index.js 文件 12345678910111213141516171819202122232425262728{ path: '/system', component: Layout, meta: { title: '系统管理', icon: 'el-icon-s-tools' }, alwaysShow: true, children: [ { name: 'sysUser', path: 'sysUser', component: () =&gt; import('@/views/system/sysUser/list'), meta: { title: '用户管理', icon: 'el-icon-s-custom' }, }, { path: 'sysRole', component: () =&gt; import('@/views/system/sysRole/list'), meta: { title: '角色管理', icon: 'el-icon-s-help' }, } ]}, # 2.2、定义基础 api 创建文件 src/api/system/sysUser.js 123456789101112131415161718192021222324252627282930313233343536373839404142import request from '@/utils/request'const api_name = '/admin/system/sysUser'export default { getPageList(page, limit, searchObj) { return request({ url: `${api_name}/${page}/${limit}`, method: 'get', params: searchObj // url查询字符串或表单键值对 }) }, getById(id) { return request({ url: `${api_name}/get/${id}`, method: 'get' }) }, save(role) { return request({ url: `${api_name}/save`, method: 'post', data: role }) }, updateById(role) { return request({ url: `${api_name}/update`, method: 'put', data: role }) }, removeById(id) { return request({ url: `${api_name}/remove/${id}`, method: 'delete' }) }} # 2.3、实现页面功能 创建 src/views/system/sysUser/list.vuelt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;div class=&quot;search-div&quot;&gt; &lt;el-form label-width=&quot;70px&quot; size=&quot;small&quot;&gt; &lt;el-row&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;关 键 字&quot;&gt; &lt;el-input style=&quot;width: 95%&quot; v-model=&quot;searchObj.keyword&quot; placeholder=&quot;用户名/姓名/手机号码&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;操作时间&quot;&gt; &lt;el-date-picker v-model=&quot;createTimes&quot; type=&quot;datetimerange&quot; range-separator=&quot;至&quot; start-placeholder=&quot;开始时间&quot; end-placeholder=&quot;结束时间&quot; value-format=&quot;yyyy-MM-dd HH:mm:ss&quot; style=&quot;margin-right: 10px;width: 100%;&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row style=&quot;display:flex&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;mini&quot; :loading=&quot;loading&quot; @click=&quot;fetchData()&quot;&gt;搜索&lt;/el-button&gt; &lt;el-button icon=&quot;el-icon-refresh&quot; size=&quot;mini&quot; @click=&quot;resetData&quot;&gt;重置&lt;/el-button&gt; &lt;/el-row&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;!-- 工具条 --&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add&quot;&gt;添 加&lt;/el-button&gt; &lt;/div&gt; &lt;!-- 列表 --&gt; &lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot;&gt; &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ (page - 1) * limit + scope.$index + 1 }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;用户名&quot; width=&quot;100&quot;/&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;70&quot;/&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机&quot; width=&quot;120&quot;/&gt; &lt;el-table-column prop=&quot;postName&quot; label=&quot;岗位&quot; width=&quot;100&quot;/&gt; &lt;el-table-column prop=&quot;deptName&quot; label=&quot;部门&quot; width=&quot;100&quot;/&gt; &lt;el-table-column label=&quot;所属角色&quot; width=&quot;130&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;span v-for=&quot;item in scope.row.roleList&quot; :key=&quot;item.id&quot; style=&quot;margin-right: 10px;&quot;&gt;{{ item.roleName }}&lt;/span&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;状态&quot; width=&quot;80&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-switch v-model=&quot;scope.row.status === 1&quot; @change=&quot;switchStatus(scope.row)&quot;&gt; &lt;/el-switch&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot; width=&quot;160&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;180&quot; align=&quot;center&quot; fixed=&quot;right&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot; title=&quot;修改&quot;/&gt; &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; title=&quot;删除&quot; /&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;!-- 分页组件 --&gt; &lt;el-pagination :current-page=&quot;page&quot; :total=&quot;total&quot; :page-size=&quot;limit&quot; :page-sizes=&quot;[5, 10, 20, 30, 40, 50, 100]&quot; style=&quot;padding: 30px 0; text-align: center;&quot; layout=&quot;sizes, prev, pager, next, jumper, -&gt;, total, slot&quot; @current-change=&quot;fetchData&quot; @size-change=&quot;changeSize&quot; /&gt; &lt;el-dialog title=&quot;添加/修改&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;40%&quot; &gt; &lt;el-form ref=&quot;dataForm&quot; :model=&quot;sysUser&quot; label-width=&quot;100px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;sysUser.username&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=&quot;!sysUser.id&quot; label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;sysUser.password&quot; type=&quot;password&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;姓名&quot; prop=&quot;name&quot;&gt; &lt;el-input v-model=&quot;sysUser.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机&quot; prop=&quot;phone&quot;&gt; &lt;el-input v-model=&quot;sysUser.phone&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;dialogVisible = false&quot; size=&quot;small&quot; icon=&quot;el-icon-refresh-right&quot;&gt;取 消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-check&quot; @click=&quot;saveOrUpdate()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/system/sysUser'const defaultForm = { id: '', username: '', password: '', name: '', phone: '', status: 1}export default { data() { return { listLoading: true, // 数据是否正在加载 list: null, // banner列表 total: 0, // 数据库中的总记录数 page: 1, // 默认页码 limit: 10, // 每页记录数 searchObj: {}, // 查询表单对象 createTimes: [], dialogVisible: false, sysUser: defaultForm, saveBtnDisabled: false, } }, // 生命周期函数：内存准备完毕，页面尚未渲染 created() { console.log('list created......') this.fetchData() }, // 生命周期函数：内存准备完毕，页面渲染成功 mounted() { console.log('list mounted......') }, methods: { // 当页码发生改变的时候 changeSize(size) { console.log(size) this.limit = size this.fetchData(1) }, // 加载banner列表数据 fetchData(page = 1) { debugger this.page = page console.log('翻页。。。' + this.page) if(this.createTimes &amp;&amp; this.createTimes.length ==2) { this.searchObj.createTimeBegin = this.createTimes[0] this.searchObj.createTimeEnd = this.createTimes[1] } api.getPageList(this.page, this.limit, this.searchObj).then( response =&gt; { //this.list = response.data.list this.list = response.data.records this.total = response.data.total // 数据加载并绑定成功 this.listLoading = false } ) }, // 重置查询表单 resetData() { console.log('重置查询表单') this.searchObj = {} this.createTimes = [] this.fetchData() }, // 根据id删除数据 removeDataById(id) { // debugger this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return api.removeById(id) }).then((response) =&gt; { this.fetchData(this.page) this.$message.success(response.message || '删除成功') }).catch(() =&gt; { this.$message.info('取消删除') }) }, // ------------- add(){ this.dialogVisible = true this.sysUser = Object.assign({}, defaultForm) }, edit(id) { this.dialogVisible = true this.fetchDataById(id) }, fetchDataById(id) { api.getById(id).then(response =&gt; { this.sysUser = response.data }) }, saveOrUpdate() { this.$refs.dataForm.validate(valid =&gt; { if (valid) { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.sysUser.id) { this.saveData() } else { this.updateData() } } }) }, // 新增 saveData() { api.save(this.sysUser).then(response =&gt; { this.$message.success('操作成功') this.dialogVisible = false this.fetchData(this.page) }) }, // 根据id更新记录 updateData() { api.updateById(this.sysUser).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) } }}&lt;/script&gt; # 二、给用户分配角色及更改用户状态 # 1、给用户分配角色 # 1.1、接口分析 1、进入分配页面：获取已分配角色与全部角色，进行页面展示 2、保存分配角色：删除之前分配的角色和保存现在分配的角色 # 1.2、controller 方法 操作类：SysRoleController 12345678910111213@ApiOperation(value = &quot;根据用户获取角色数据&quot;)@GetMapping(&quot;/toAssign/{userId}&quot;)public Result toAssign(@PathVariable Long userId) { Map&lt;String, Object&gt; roleMap = sysRoleService.findRoleByAdminId(userId); return Result.ok(roleMap);}@ApiOperation(value = &quot;根据用户分配角色&quot;)@PostMapping(&quot;/doAssign&quot;)public Result doAssign(@RequestBody AssginRoleVo assginRoleVo) { sysRoleService.doAssign(assginRoleVo); return Result.ok();} # 1.3、service 接口 操作类：SysRoleService 123456789101112/** * 根据用户获取角色数据 * @param userId * @return */Map&lt;String, Object&gt; findRoleByAdminId(Long userId);/** * 分配角色 * @param assginRoleVo */void doAssign(AssginRoleVo assginRoleVo); # 1.4、service 接口实现 操作类：SysRoleServiceImpl 12345678910111213141516171819202122232425262728293031323334353637383940@Autowiredprivate SysUserRoleMapper sysUserRoleMapper;@Overridepublic Map&lt;String, Object&gt; findRoleByUserId(Long userId) { //查询所有的角色 List&lt;SysRole&gt; allRolesList = this.list(); //拥有的角色id List&lt;SysUserRole&gt; existUserRoleList = sysUserRoleMapper.selectList(new LambdaQueryWrapper&lt;SysUserRole&gt;().eq(SysUserRole::getUserId, userId).select(SysUserRole::getRoleId)); List&lt;Long&gt; existRoleIdList = existUserRoleList.stream().map(c-&gt;c.getRoleId()).collect(Collectors.toList()); //对角色进行分类 List&lt;SysRole&gt; assginRoleList = new ArrayList&lt;&gt;(); for (SysRole role : allRolesList) { //已分配 if(existRoleIdList.contains(role.getId())) { assginRoleList.add(role); } } Map&lt;String, Object&gt; roleMap = new HashMap&lt;&gt;(); roleMap.put(&quot;assginRoleList&quot;, assginRoleList); roleMap.put(&quot;allRolesList&quot;, allRolesList); return roleMap;}@Transactional@Overridepublic void doAssign(AssginRoleVo assginRoleVo) { sysUserRoleMapper.delete(new LambdaQueryWrapper&lt;SysUserRole&gt;().eq(SysUserRole::getUserId, assginRoleVo.getUserId())); for(Long roleId : assginRoleVo.getRoleIdList()) { if(StringUtils.isEmpty(roleId)) continue; SysUserRole userRole = new SysUserRole(); userRole.setUserId(assginRoleVo.getUserId()); userRole.setRoleId(roleId); sysUserRoleMapper.insert(userRole); }} # 1.5、添加 SysUserRoleMapper 类 123456789101112package com.atguigu.system.mapper;import com.atguigu.model.system.SysUserRole;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;import org.springframework.stereotype.Repository;@Repository@Mapperpublic interface SysUserRoleMapper extends BaseMapper&lt;SysUserRole&gt; {} # 2、更改用户状态 # 2.1、需求分析 用户状态：状态（1：正常 0：停用），当用户状态为正常时，可以访问后台系统，当用户状态停用后，不可以登录后台系统 # 2.2、controller 方法 操作类：SysUserController 123456@ApiOperation(value = &quot;更新状态&quot;)@GetMapping(&quot;updateStatus/{id}/{status}&quot;)public Result updateStatus(@PathVariable Long id, @PathVariable Integer status) { sysUserService.updateStatus(id, status); return Result.ok();} # 2.3、service 接口 操作类：SysUserService 1void updateStatus(Long id, Integer status); # 2.4、service 接口实现 操作类：SysUserServiceImpl 1234567891011@Transactional@Overridepublic void updateStatus(Long id, Integer status) { SysUser sysUser = this.getById(id); if(status.intValue() == 1) { sysUser.setStatus(status); } else { sysUser.setStatus(0); } this.updateById(sysUser);} # 3、前端实现 # 3.1、添加 api src/api/system/sysUser.js 123456updateStatus(id, status) { return request({ url: `${api_name}/updateStatus/${id}/${status}`, method: 'get' })} src/api/system/sysRole.js 1234567891011121314getRoles(adminId) { return request({ url: `${api_name}/toAssign/${adminId}`, method: 'get' })},assignRoles(assginRoleVo) { return request({ url: `${api_name}/doAssign`, method: 'post', data: assginRoleVo })} # 3.2、修改页面 更改 src/views/system/sysUser/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;div class=&quot;search-div&quot;&gt; &lt;el-form label-width=&quot;70px&quot; size=&quot;small&quot;&gt; &lt;el-row&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;关 键 字&quot;&gt; &lt;el-input style=&quot;width: 95%&quot; v-model=&quot;searchObj.keyword&quot; placeholder=&quot;用户名/姓名/手机号码&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;8&quot;&gt; &lt;el-form-item label=&quot;操作时间&quot;&gt; &lt;el-date-picker v-model=&quot;createTimes&quot; type=&quot;datetimerange&quot; range-separator=&quot;至&quot; start-placeholder=&quot;开始时间&quot; end-placeholder=&quot;结束时间&quot; value-format=&quot;yyyy-MM-dd HH:mm:ss&quot; style=&quot;margin-right: 10px;width: 100%;&quot; /&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row style=&quot;display:flex&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;mini&quot; :loading=&quot;loading&quot; @click=&quot;fetchData()&quot;&gt;搜索&lt;/el-button&gt; &lt;el-button icon=&quot;el-icon-refresh&quot; size=&quot;mini&quot; @click=&quot;resetData&quot;&gt;重置&lt;/el-button&gt; &lt;/el-row&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;!-- 工具条 --&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add&quot;&gt;添 加&lt;/el-button&gt; &lt;/div&gt; &lt;!-- 列表 --&gt; &lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot;&gt; &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ (page - 1) * limit + scope.$index + 1 }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;username&quot; label=&quot;用户名&quot; width=&quot;100&quot;/&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;70&quot;/&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机&quot; width=&quot;120&quot;/&gt; &lt;el-table-column prop=&quot;postName&quot; label=&quot;岗位&quot; width=&quot;100&quot;/&gt; &lt;el-table-column prop=&quot;deptName&quot; label=&quot;部门&quot; width=&quot;100&quot;/&gt; &lt;el-table-column label=&quot;所属角色&quot; width=&quot;130&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;span v-for=&quot;item in scope.row.roleList&quot; :key=&quot;item.id&quot; style=&quot;margin-right: 10px;&quot;&gt;{{ item.roleName }}&lt;/span&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;状态&quot; width=&quot;80&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-switch v-model=&quot;scope.row.status === 1&quot; @change=&quot;switchStatus(scope.row)&quot;&gt; &lt;/el-switch&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot; width=&quot;160&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;180&quot; align=&quot;center&quot; fixed=&quot;right&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot; title=&quot;修改&quot;/&gt; &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; title=&quot;删除&quot; /&gt; &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-baseball&quot; size=&quot;mini&quot; @click=&quot;showAssignRole(scope.row)&quot; title=&quot;分配角色&quot;/&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;!-- 分页组件 --&gt; &lt;el-pagination :current-page=&quot;page&quot; :total=&quot;total&quot; :page-size=&quot;limit&quot; :page-sizes=&quot;[5, 10, 20, 30, 40, 50, 100]&quot; style=&quot;padding: 30px 0; text-align: center;&quot; layout=&quot;sizes, prev, pager, next, jumper, -&gt;, total, slot&quot; @current-change=&quot;fetchData&quot; @size-change=&quot;changeSize&quot; /&gt; &lt;el-dialog title=&quot;添加/修改&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;40%&quot; &gt; &lt;el-form ref=&quot;dataForm&quot; :model=&quot;sysUser&quot; label-width=&quot;100px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt; &lt;el-input v-model=&quot;sysUser.username&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=&quot;!sysUser.id&quot; label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input v-model=&quot;sysUser.password&quot; type=&quot;password&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;姓名&quot; prop=&quot;name&quot;&gt; &lt;el-input v-model=&quot;sysUser.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机&quot; prop=&quot;phone&quot;&gt; &lt;el-input v-model=&quot;sysUser.phone&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;dialogVisible = false&quot; size=&quot;small&quot; icon=&quot;el-icon-refresh-right&quot;&gt;取 消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-check&quot; @click=&quot;saveOrUpdate()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;el-dialog title=&quot;分配角色&quot; :visible.sync=&quot;dialogRoleVisible&quot;&gt; &lt;el-form label-width=&quot;80px&quot;&gt; &lt;el-form-item label=&quot;用户名&quot;&gt; &lt;el-input disabled :value=&quot;sysUser.username&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;角色列表&quot;&gt; &lt;el-checkbox :indeterminate=&quot;isIndeterminate&quot; v-model=&quot;checkAll&quot; @change=&quot;handleCheckAllChange&quot;&gt;全选&lt;/el-checkbox&gt; &lt;div style=&quot;margin: 15px 0;&quot;&gt;&lt;/div&gt; &lt;el-checkbox-group v-model=&quot;userRoleIds&quot; @change=&quot;handleCheckedChange&quot;&gt; &lt;el-checkbox v-for=&quot;role in allRoles&quot; :key=&quot;role.id&quot; :label=&quot;role.id&quot;&gt;{{role.roleName}}&lt;/el-checkbox&gt; &lt;/el-checkbox-group&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div slot=&quot;footer&quot;&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;assignRole&quot; size=&quot;small&quot;&gt;保存&lt;/el-button&gt; &lt;el-button @click=&quot;dialogRoleVisible = false&quot; size=&quot;small&quot;&gt;取消&lt;/el-button&gt; &lt;/div&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/system/sysUser'import roleApi from '@/api/system/sysRole'const defaultForm = { id: '', username: '', password: '', name: '', phone: '', status: 1}export default { data() { return { listLoading: true, // 数据是否正在加载 list: null, // banner列表 total: 0, // 数据库中的总记录数 page: 1, // 默认页码 limit: 10, // 每页记录数 searchObj: {}, // 查询表单对象 createTimes: [], dialogVisible: false, sysUser: defaultForm, saveBtnDisabled: false, dialogRoleVisible: false, allRoles: [], // 所有角色列表 userRoleIds: [], // 用户的角色ID的列表 isIndeterminate: false, // 是否是不确定的 checkAll: false // 是否全选 } }, // 生命周期函数：内存准备完毕，页面尚未渲染 created() { console.log('list created......') this.fetchData() roleApi.findAll().then(response =&gt; { this.roleList = response.data; }) }, // 生命周期函数：内存准备完毕，页面渲染成功 mounted() { console.log('list mounted......') }, methods: { // 当页码发生改变的时候 changeSize(size) { console.log(size) this.limit = size this.fetchData(1) }, // 加载banner列表数据 fetchData(page = 1) { debugger this.page = page console.log('翻页。。。' + this.page) if(this.createTimes &amp;&amp; this.createTimes.length ==2) { this.searchObj.createTimeBegin = this.createTimes[0] this.searchObj.createTimeEnd = this.createTimes[1] } api.getPageList(this.page, this.limit, this.searchObj).then( response =&gt; { //this.list = response.data.list this.list = response.data.records this.total = response.data.total // 数据加载并绑定成功 this.listLoading = false } ) }, // 重置查询表单 resetData() { console.log('重置查询表单') this.searchObj = {} this.createTimes = [] this.fetchData() }, // 根据id删除数据 removeDataById(id) { // debugger this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return api.removeById(id) }).then((response) =&gt; { this.fetchData(this.page) this.$message.success(response.message || '删除成功') }).catch(() =&gt; { this.$message.info('取消删除') }) }, // ------------- add(){ this.dialogVisible = true this.sysUser = Object.assign({}, defaultForm) }, edit(id) { this.dialogVisible = true this.fetchDataById(id) }, fetchDataById(id) { api.getById(id).then(response =&gt; { this.sysUser = response.data }) }, saveOrUpdate() { this.$refs.dataForm.validate(valid =&gt; { if (valid) { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.sysUser.id) { this.saveData() } else { this.updateData() } } }) }, // 新增 saveData() { api.save(this.sysUser).then(response =&gt; { this.$message.success('操作成功') this.dialogVisible = false this.fetchData(this.page) }) }, // 根据id更新记录 updateData() { api.updateById(this.sysUser).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) }, showAssignRole (row) { this.sysUser = row this.dialogRoleVisible = true this.getRoles() }, getRoles () { roleApi.getRoles(this.sysUser.id).then(response =&gt; { const {allRolesList, assginRoleList} = response.data this.allRoles = allRolesList this.userRoleIds = assginRoleList.map(item =&gt; item.id) this.checkAll = allRolesList.length===assginRoleList.length this.isIndeterminate = assginRoleList.length&gt;0 &amp;&amp; assginRoleList.length&lt;allRolesList.length }) }, /* 全选勾选状态发生改变的监听 */ handleCheckAllChange (value) {// value 当前勾选状态true/false // 如果当前全选, userRoleIds就是所有角色id的数组, 否则是空数组 this.userRoleIds = value ? this.allRoles.map(item =&gt; item.id) : [] // 如果当前不是全选也不全不选时, 指定为false this.isIndeterminate = false }, /* 角色列表选中项发生改变的监听 */ handleCheckedChange (value) { const {userRoleIds, allRoles} = this this.checkAll = userRoleIds.length === allRoles.length &amp;&amp; allRoles.length&gt;0 this.isIndeterminate = userRoleIds.length&gt;0 &amp;&amp; userRoleIds.length&lt;allRoles.length }, assignRole () { let assginRoleVo = { userId: this.sysUser.id, roleIdList: this.userRoleIds } roleApi.assignRoles(assginRoleVo).then(response =&gt; { this.$message.success(response.message || '分配角色成功') this.dialogRoleVisible = false this.fetchData(this.page) }) }, switchStatus(row) { row.status = row.status === 1 ? 0 : 1 api.updateStatus(row.id, row.status).then(response =&gt; { if (response.code) { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData() } }) } }}&lt;/script&gt;","link":"/2023/07/06/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"},{"title":"","text":"# 云尚办公系统：角色管理前端 # 一、前端框架 # 1、vue-element-admin vue-element-admin 是基于 element-ui 的一套后台管理系统集成方案。 ** 功能：**https://panjiachen.github.io/vue-element-admin-site/zh/guide/# 功能 **GitHub 地址：**https://github.com/PanJiaChen/vue-element-admin 项目在线预览：https://panjiachen.gitee.io/vue-element-admin # 2、vue-admin-template # 2.1、简介 vue-admin-template 是基于 vue-element-admin 的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。 **GitHub 地址：**https://github.com/PanJiaChen/vue-admin-template ** 建议：** 你可以在 vue-admin-template 的基础上进行二次开发，把 vue-element-admin 当做工具箱，想要什么功能或者组件就去 vue-element-admin 那里复制过来。 # 2.2、安装 12345678#修改项目名称 vue-admin-template 改为 guigu-auth-ui# 解压压缩包# 进入目录cd guigu-auth-ui# 安装依赖npm install# 启动。执行后，浏览器自动弹出并访问http://localhost:9528/npm run dev # 2.3、源码目录结构 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556|-dist 生产环境打包生成的打包项目|-mock 使用mockjs来mock接口|-public 包含会被自动打包到项目根路径的文件夹 |-index.html 唯一的页面|-src |-api 包含接口请求函数模块 |-table.js 表格列表mock数据接口的请求函数 |-user.js 用户登陆相关mock数据接口的请求函数 |-assets 组件中需要使用的公用资源 |-404_images 404页面的图片 |-components 非路由组件 |-SvgIcon svg图标组件 |-Breadcrumb 面包屑组件(头部水平方向的层级组件) |-Hamburger 用来点击切换左侧菜单导航的图标组件 |-icons |-svg 包含一些svg图片文件 |-index.js 全局注册SvgIcon组件,加载所有svg图片并暴露所有svg文件名的数组 |-layout |-components 组成整体布局的一些子组件 |-mixin 组件中可复用的代码 |-index.vue 后台管理的整体界面布局组件 |-router |-index.js 路由器 |-store |-modules |-app.js 管理应用相关数据 |-settings.js 管理设置相关数据 |-user.js 管理后台登陆用户相关数据 |-getters.js 提供子模块相关数据的getters计算属性 |-index.js vuex的store |-styles |-xxx.scss 项目组件需要使用的一些样式(使用scss) |-utils 一些工具函数 |-auth.js 操作登陆用户的token cookie |-get-page-title.js 得到要显示的网页title |-request.js axios二次封装的模块 |-validate.js 检验相关工具函数 |-index.js 日期和请求参数处理相关工具函数 |-views 路由组件文件夹 |-dashboard 首页 |-login 登陆 |-App.vue 应用根组件 |-main.js 入口js |-permission.js 使用全局守卫实现路由权限控制的模块 |-settings.js 包含应用设置信息的模块|-.env.development 指定了开发环境的代理服务器前缀路径|-.env.production 指定了生产环境的代理服务器前缀路径|-.eslintignore eslint的忽略配置|-.eslintrc.js eslint的检查配置|-.gitignore git的忽略配置|-.npmrc 指定npm的淘宝镜像和sass的下载地址|-babel.config.js babel的配置|-jsconfig.json 用于vscode引入路径提示的配置|-package.json 当前项目包信息|-package-lock.json 当前项目依赖的第三方包的精确信息|-vue.config.js webpack相关配置(如: 代理服务器) # 2.4、实现登录 &amp; 退出登录 # 2.4.1、vue.config.js 注释掉 mock 接口配置 配置代理转发请求到目标接口 12345678910// before: require('./mock/mock-server.js')proxy: { '/dev-api': { // 匹配所有以 '/dev-api'开头的请求路径 target: 'http://localhost:8800', changeOrigin: true, // 支持跨域 pathRewrite: { // 重写路径: 去掉路径中开头的'/dev-api' '^/dev-api': '' } }} # 2.4.2、utils/request.js 请求自动携带 token, 且请求头名称为 token 12345678const token = store.getters.tokenif (token) { // let each request carry token // ['X-Token'] is a custom headers key // please modify it according to the actual situation // config.headers['X-Token'] = getToken() config.headers['token'] = token} 12345678910if (res.code !== 200) { Message({ message: res.message || 'Error', type: 'error', duration: 5 * 1000 }) return Promise.reject(new Error(res.message || 'Error'))} else { return res} # 2.4.3、api/user.js 123456789101112131415161718192021222324import request from '@/utils/request'export function login(data) { return request({ url: '/admin/system/index/login', method: 'post', data })}export function getInfo(token) { return request({ url: '/admin/system/index/info', method: 'get', params: { token } })}export function logout() { return request({ url: '/admin/system/index/logout', method: 'post' })} # 2.4.5、服务器端增加接口 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.atguigu.system.controller;import com.atguigu.common.result.Result;import io.swagger.annotations.Api;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;import java.util.Map;/** * &lt;p&gt; * 后台登录登出 * &lt;/p&gt; */@Api(tags = &quot;后台登录管理&quot;)@RestController@RequestMapping(&quot;/admin/system/index&quot;)public class IndexController { /** * 登录 * @return */ @PostMapping(&quot;login&quot;) public Result login() { Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;token&quot;,&quot;admin&quot;); return Result.ok(map); } /** * 获取用户信息 * @return */ @GetMapping(&quot;info&quot;) public Result info() { Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;roles&quot;,&quot;[admin]&quot;); map.put(&quot;name&quot;,&quot;admin&quot;); map.put(&quot;avatar&quot;,&quot;https://oss.aliyuncs.com/aliyun_id_photo_bucket/default_handsome.jpg&quot;); return Result.ok(map); } /** * 退出 * @return */ @PostMapping(&quot;logout&quot;) public Result logout(){ return Result.ok(); }} # 2.4.5、store/modules/user.js 不用指定 token 参数 12345678910111213141516171819getInfo({ commit, state }) { return new Promise((resolve, reject) =&gt; { getInfo().then(response =&gt; { const { data } = response if (!data) { return reject('Verification failed, please Login again.') } const { name, avatar } = data commit('SET_NAME', name) commit('SET_AVATAR', avatar) resolve(data) }).catch(error =&gt; { reject(error) }) })}, # 2.4.6、views/login/index.vue 更改页面标题 123&lt;div class=&quot;title-container&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;硅谷通用权限系统&lt;/h3&gt;&lt;/div&gt; 用户名检查只检查长度 1234567891011121314const validateUsername = (rule, value, callback) =&gt; { if (value.length&lt;5) { callback(new Error('Please enter the correct user name')) } else { callback() }}const validatePassword = (rule, value, callback) =&gt; { if (value.length &lt; 6) { callback(new Error('The password can not be less than 6 digits')) } else { callback() }} # 2.4.7、src/router/index.js 删除多余路由 12345678910111213141516171819202122232425262728export const constantRoutes = [ { path: '/login', component: () =&gt; import('@/views/login/index'), hidden: true }, { path: '/404', component: () =&gt; import('@/views/404'), hidden: true }, { path: '/', component: Layout, redirect: '/dashboard', children: [{ path: 'dashboard', name: 'Dashboard', component: () =&gt; import('@/views/dashboard/index'), meta: { title: 'Dashboard', icon: 'dashboard' } }] }, // 404 page must be placed at the end !!! { path: '*', redirect: '/404', hidden: true }] # 2.4.8、测试登录 # 二、角色列表 # 1、修改路由 修改 src/router/index.js 文件，重新定义 constantRoutes 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 export const constantRoutes = [ { path: '/login', component: () =&gt; import('@/views/login/index'), hidden: true }, { path: '/404', component: () =&gt; import('@/views/404'), hidden: true }, { path: '/', component: Layout, redirect: '/dashboard', children: [ { path: 'dashboard', name: 'Dashboard', component: () =&gt; import('@/views/dashboard/index'), meta: { title: 'Dashboard', icon: 'dashboard' } } ] }, { path: '/system', component: Layout, meta: { title: '系统管理', icon: 'el-icon-s-tools' }, alwaysShow: true, children: [ { path: 'sysRole', component: () =&gt; import('@/views/system/sysRole/list'), meta: { title: '角色管理', icon: 'el-icon-s-help' }, } ] }, // 404 page must be placed at the end !!! { path: '*', redirect: '/404', hidden: true }] # 2、创建 vue 组件 在 src/views 文件夹下创建以下文件夹和文件 创建文件夹：system/sysRole 创建文件：list.vue 12345&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; 角色列表 &lt;/div&gt;&lt;/template&gt; # 3、定义 api 创建文件 src/api/system/sysRole.js 1234567891011121314151617181920/*角色管理相关的API请求函数*/import request from '@/utils/request'const api_name = '/admin/system/sysRole'export default { /* 获取角色分页列表(带搜索) */ getPageList(page, limit, searchObj) { return request({ url: `${api_name}/${page}/${limit}`, method: 'get', params: searchObj }) }} # 4、初始化 vue 组件 src/views/system/sysRole/list.vue 123456789101112131415161718192021222324&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; 角色列表 &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/system/sysRole'export default { // 定义数据模型 data() { return { } }, // 页面渲染成功后获取数据 created() { this.fetchData() }, // 定义方法 methods: { fetchData() { } }}&lt;/script&gt; # 5、定义 data 1234567891011// 定义数据模型data() { return { list: [], // 列表 total: 0, // 总记录数 page: 1, // 页码 limit: 10, // 每页记录数 searchObj: {}, // 查询条件 multipleSelection: []// 批量删除选中的记录列表 }}, # 6、定义 methods 12345678910methods: { fetchData(current=1) { this.page = current // 调用api api.getPageList(this.page, this.limit, this.searchObj).then(response =&gt; { this.list = response.data.records this.total = response.data.total }) },} # 7、表格渲染 1234567891011121314151617181920212223242526272829303132&lt;div class=&quot;app-container&quot;&gt; &lt;!-- 表格 --&gt; &lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot; @selection-change=&quot;handleSelectionChange&quot;&gt; &lt;el-table-column type=&quot;selection&quot;/&gt; &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ (page - 1) * limit + scope.$index + 1 }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;roleName&quot; label=&quot;角色名称&quot; /&gt; &lt;el-table-column prop=&quot;roleCode&quot; label=&quot;角色编码&quot; /&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot; width=&quot;160&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot; title=&quot;修改&quot;/&gt; &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; title=&quot;删除&quot;/&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; # 8、分页组件 123456789&lt;!-- 分页组件 --&gt;&lt;el-pagination :current-page=&quot;page&quot; :total=&quot;total&quot; :page-size=&quot;limit&quot; style=&quot;padding: 30px 0; text-align: center;&quot; layout=&quot;total, prev, pager, next, jumper&quot; @current-change=&quot;fetchData&quot;/&gt; # 9、顶部查询表单 12345678910111213141516&lt;!--查询表单--&gt;&lt;div class=&quot;search-div&quot;&gt; &lt;el-form label-width=&quot;70px&quot; size=&quot;small&quot;&gt; &lt;el-row&gt; &lt;el-col :span=&quot;24&quot;&gt; &lt;el-form-item label=&quot;角色名称&quot;&gt; &lt;el-input style=&quot;width: 100%&quot; v-model=&quot;searchObj.roleName&quot; placeholder=&quot;角色名称&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row style=&quot;display:flex&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; size=&quot;mini&quot; :loading=&quot;loading&quot; @click=&quot;fetchData()&quot;&gt;搜索&lt;/el-button&gt; &lt;el-button icon=&quot;el-icon-refresh&quot; size=&quot;mini&quot; @click=&quot;resetData&quot;&gt;重置&lt;/el-button&gt; &lt;/el-row&gt; &lt;/el-form&gt; &lt;/div&gt; 分页和清空方法 123456// 重置表单resetData() { console.log('重置查询表单') this.searchObj = {} this.fetchData()} # 三、角色删除 # 1、定义 api src/api/system/sysRole.js 123456removeById(id) { return request({ url: `${api_name}/remove/${id}`, method: 'delete' })} # 2、定义 methods src/views/system/sysRole/list.vue 使用 MessageBox 弹框组件 123456789101112131415// 根据id删除数据removeDataById(id) { // debugger this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return api.removeById(id) }).then((response) =&gt; { this.fetchData(this.page) this.$message.success(response.message || '删除成功') })} # 四、角色添加 # 1、定义 api src/api/system/sysRole.js 1234567save(role) { return request({ url: `${api_name}/save`, method: 'post', data: role })} # 2、定义 data 123456789101112131415161718export default { // 定义数据模型 data() { return { list: [], // 讲师列表 total: 0, // 总记录数 page: 1, // 页码 limit: 10, // 每页记录数 searchObj: {}, // 查询条件 multipleSelection: [],// 批量删除选中的记录列表 dialogVisible: false, sysRole: {}, saveBtnDisabled: false } }, ...} # 3、定义添加按钮 src/views/system/sysRole/list.vue 表格上面添加按钮 1234&lt;!-- 工具条 --&gt;&lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add&quot;&gt;添 加&lt;/el-button&gt;&lt;/div&gt; # 4、定义弹出层 src/views/system/sysRole/list.vue 表格最下面添加弹出层 1234567891011121314&lt;el-dialog title=&quot;添加/修改&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;40%&quot; &gt; &lt;el-form ref=&quot;dataForm&quot; :model=&quot;sysRole&quot; label-width=&quot;150px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;角色名称&quot;&gt; &lt;el-input v-model=&quot;sysRole.roleName&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;角色编码&quot;&gt; &lt;el-input v-model=&quot;sysRole.roleCode&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;dialogVisible = false&quot; size=&quot;small&quot; icon=&quot;el-icon-refresh-right&quot;&gt;取 消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-check&quot; @click=&quot;saveOrUpdate()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; # 5、实现功能 123456789101112131415161718192021add(){ this.dialogVisible = true},saveOrUpdate() { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.sysRole.id) { this.saveData() } else { this.updateData() }},// 新增saveData() { api.save(this.sysRole).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) })} # 五、角色修改与数据回显 # 1、定义 api src/api/system/sysRole.js 1234567891011121314getById(id) { return request({ url: `${api_name}/get/${id}`, method: 'get' })},updateById(role) { return request({ url: `${api_name}/update`, method: 'put', data: role })} # 2、组件中调用 api methods 中定义 fetchDataById 12345678910edit(id) { this.dialogVisible = true this.fetchDataById(id)},fetchDataById(id) { api.getById(id).then(response =&gt; { this.sysRole = response.data })} # 3、修改提交 1234567updateData() { api.updateById(this.sysRole).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) })} # 六、批量删除 # 1、定义 api src/api/system/sysRole.js 1234567batchRemove(idList) { return request({ url: `${api_name}/batchRemove`, method: `delete`, data: idList })}, # 2、初始化组件 src/views/system/sysRole/list.vue 在 table 组件上添加 批量删除 按钮 12345&lt;!-- 工具条 --&gt;&lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add&quot;&gt;添 加&lt;/el-button&gt; &lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; @click=&quot;batchRemove()&quot; &gt;批量删除&lt;/el-button&gt;&lt;/div&gt; 在 table 组件上添加复选框 12345678&lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot; @selection-change=&quot;handleSelectionChange&quot;&gt; &lt;el-table-column type=&quot;selection&quot;/&gt; # 3、实现功能 data 定义数据 1multipleSelection: []// 批量删除选中的记录列表 完善方法 1234567891011121314151617181920212223242526272829// 当多选选项发生变化的时候调用handleSelectionChange(selection) { console.log(selection) this.multipleSelection = selection},// 批量删除batchRemove() { if (this.multipleSelection.length === 0) { this.$message.warning('请选择要删除的记录！') return } this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // 点击确定，远程调用ajax // 遍历selection，将id取出放入id列表 var idList = [] this.multipleSelection.forEach(item =&gt; { idList.push(item.id) }) // 调用api return api.batchRemove(idList) }).then((response) =&gt; { this.fetchData() this.$message.success(response.message) })}","link":"/2023/07/06/%E8%A7%92%E8%89%B2%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF/"},{"title":"","text":"# 云尚办公系统：菜单管理 # 一、菜单管理需求 # 1、需求描述 不同角色的用户登录后台管理系统拥有不同的菜单权限与功能权限，我们前端是基于：vue-admin-template 这个模块开发的，因此我们菜单表设计也必须基于前端模板进行设计。 前端框架 vue-admin-template 菜单其实就是我们配置的路由： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546{ path: '/system', component: Layout, meta: { title: '系统管理', icon: 'el-icon-s-tools' }, alwaysShow: true, children: [ { name: 'sysUser', path: 'sysUser', component: () =&gt; import('@/views/system/sysUser/list'), meta: { title: '用户管理', icon: 'el-icon-s-custom' }, }, { path: 'sysRole', component: () =&gt; import('@/views/system/sysRole/list'), meta: { title: '角色管理', icon: 'el-icon-s-help' }, }, { name: 'sysMenu', path: 'sysMenu', component: () =&gt; import('@/views/system/sysMenu/list'), meta: { title: '菜单管理', icon: 'el-icon-s-unfold' }, }, { path: 'assignAuth', component: () =&gt; import('@/views/system/sysRole/assignAuth'), meta: { activeMenu: '/system/sysRole', title: '角色授权' }, hidden: true, } ]} 因此，菜单表的设计必须满足路由配置的必要信息 # 2、菜单表设计 # 2.1、表结构 重点字段说明： ​ type：菜单类型，分为：目录、菜单与按钮 ​ 目录：一个分类（可理解为一级菜单）、目录下级节点可以为目录与菜单 ​ 菜单：一个具体页面，菜单的下级节点只能是按钮 ​ 按钮：页面上的功能 ​ path：对应路由里面的路由地址 path ​ component：对应路由里面的组件 component ​ perms：对应菜单的功能权限标识 ​ icom：对应路由的菜单图标 # 2.2、示例数据 # 2.3、页面效果 # 二、菜单管理 # 1、菜单管理 CRUD # 1.1、Mapper 1234567891011121314151617package com.atguigu.system.mapper;import com.atguigu.model.system.SysMenu;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.springframework.stereotype.Repository;import java.util.List;@Repository@Mapperpublic interface SysMenuMapper extends BaseMapper&lt;SysMenu&gt; {} # 1.2、service 接口及实现 SysUserService 接口 1234567891011121314151617package com.atguigu.system.service;import com.atguigu.model.system.SysMenu;import com.baomidou.mybatisplus.extension.service.IService;import java.util.List;public interface SysMenuService extends IService&lt;SysMenu&gt; { /** * 菜单树形数据 * @return */ List&lt;SysMenu&gt; findNodes();} SysUserServiceImpl 实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.atguigu.system.service.impl;import com.atguigu.common.execption.GuiguException;import com.atguigu.common.result.ResultCodeEnum;import com.atguigu.model.system.SysMenu;import com.atguigu.system.helper.MenuHelper;import com.atguigu.system.mapper.SysMenuMapper;import com.atguigu.system.service.SysMenuService;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import java.io.Serializable;import java.util.List;@Servicepublic class SysMenuServiceImpl extends ServiceImpl&lt;SysMenuMapper, SysMenu&gt; implements SysMenuService { @Autowired private SysMenuMapper sysMenuMapper; @Override public List&lt;SysMenu&gt; findNodes() { //全部权限列表 List&lt;SysMenu&gt; sysMenuList = this.list(); if (CollectionUtils.isEmpty(sysMenuList)) return null; //构建树形数据 List&lt;SysMenu&gt; result = MenuHelper.buildTree(sysMenuList); return result; } @Override public boolean removeById(Serializable id) { int count = this.count(new LambdaQueryWrapper&lt;SysMenu&gt;().eq(SysMenu::getParentId, id)); if (count &gt; 0) { throw new GuiguException(201,&quot;菜单不能删除&quot;); } sysMenuMapper.deleteById(id); return false; }} 添加帮助类 新建：com.atguigu.system.helper.MenuHelper 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.atguigu.system.helper;import com.atguigu.model.system.SysMenu;import java.util.ArrayList;import java.util.List;/** * &lt;p&gt; * 根据菜单数据构建菜单数据 * &lt;/p&gt; * */public class MenuHelper { /** * 使用递归方法建菜单 * @param sysMenuList * @return */ public static List&lt;SysMenu&gt; buildTree(List&lt;SysMenu&gt; sysMenuList) { List&lt;SysMenu&gt; trees = new ArrayList&lt;&gt;(); for (SysMenu sysMenu : sysMenuList) { if (sysMenu.getParentId().longValue() == 0) { trees.add(findChildren(sysMenu,sysMenuList)); } } return trees; } /** * 递归查找子节点 * @param treeNodes * @return */ public static SysMenu findChildren(SysMenu sysMenu, List&lt;SysMenu&gt; treeNodes) { sysMenu.setChildren(new ArrayList&lt;SysMenu&gt;()); for (SysMenu it : treeNodes) { if(sysMenu.getId().longValue() == it.getParentId().longValue()) { if (sysMenu.getChildren() == null) { sysMenu.setChildren(new ArrayList&lt;&gt;()); } sysMenu.getChildren().add(findChildren(it,treeNodes)); } } return sysMenu; }} # 1.4、controller 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.atguigu.system.controller;import com.atguigu.common.result.Result;import com.atguigu.model.system.SysMenu;import com.atguigu.system.service.SysMenuService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.List;@Api(tags = &quot;菜单管理&quot;)@RestController@RequestMapping(&quot;/admin/system/sysMenu&quot;)public class SysMenuController { @Autowired private SysMenuService sysMenuService; @ApiOperation(value = &quot;获取菜单&quot;) @GetMapping(&quot;findNodes&quot;) public Result findNodes() { List&lt;SysMenu&gt; list = sysMenuService.findNodes(); return Result.ok(list); } @ApiOperation(value = &quot;新增菜单&quot;) @PostMapping(&quot;save&quot;) public Result save(@RequestBody SysMenu permission) { sysMenuService.save(permission); return Result.ok(); } @ApiOperation(value = &quot;修改菜单&quot;) @PutMapping(&quot;update&quot;) public Result updateById(@RequestBody SysMenu permission) { sysMenuService.updateById(permission); return Result.ok(); } @ApiOperation(value = &quot;删除菜单&quot;) @DeleteMapping(&quot;remove/{id}&quot;) public Result remove(@PathVariable Long id) { sysMenuService.removeById(id); return Result.ok(); }} # 1.5、knife4j 测试 http://localhost:8800/doc.html # 2、用户管理前端实现 # 2.1、添加路由 修改 src/router/index.js 文件 123456789{ name: 'sysMenu', path: 'sysMenu', component: () =&gt; import('@/views/system/sysMenu/list'), meta: { title: '菜单管理', icon: 'el-icon-s-unfold' },} # 2.2、定义基础 api 创建文件 src/api/system/sysMenu.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import request from '@/utils/request'/*菜单管理相关的API请求函数*/const api_name = '/admin/system/sysMenu'export default { /* 获取权限(菜单/功能)列表 */ findNodes() { return request({ url: `${api_name}/findNodes`, method: 'get' }) }, /* 删除一个权限项 */ removeById(id) { return request({ url: `${api_name}/remove/${id}`, method: &quot;delete&quot; }) }, /* 保存一个权限项 */ save(sysMenu) { return request({ url: `${api_name}/save`, method: &quot;post&quot;, data: sysMenu }) }, /* 更新一个权限项 */ updateById(sysMenu) { return request({ url: `${api_name}/update`, method: &quot;put&quot;, data: sysMenu }) }} # 2.3、实现页面功能 创建 src/views/system/sysMenu/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;!-- 工具条 --&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add()&quot;&gt;添 加&lt;/el-button&gt; &lt;/div&gt; &lt;el-table :data=&quot;sysMenuList&quot; style=&quot;width: 100%;margin-bottom: 20px;margin-top: 10px;&quot; row-key=&quot;id&quot; border :default-expand-all=&quot;false&quot; :tree-props=&quot;{children: 'children'}&quot;&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;菜单名称&quot; width=&quot;160&quot;/&gt; &lt;el-table-column label=&quot;图标&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;i :class=&quot;scope.row.icon&quot;&gt;&lt;/i&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;perms&quot; label=&quot;权限标识&quot; width=&quot;160&quot;/&gt; &lt;el-table-column prop=&quot;path&quot; label=&quot;路由地址&quot; width=&quot;120&quot;/&gt; &lt;el-table-column prop=&quot;component&quot; label=&quot;组件路径&quot; width=&quot;160&quot;/&gt; &lt;el-table-column prop=&quot;sortValue&quot; label=&quot;排序&quot; width=&quot;60&quot;/&gt; &lt;el-table-column label=&quot;状态&quot; width=&quot;80&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-switch v-model=&quot;scope.row.status === 1&quot; disabled=&quot;true&quot;&gt; &lt;/el-switch&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot; width=&quot;160&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;180&quot; align=&quot;center&quot; fixed=&quot;right&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;success&quot; v-if=&quot;scope.row.type !== 2&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add(scope.row)&quot; title=&quot;添加下级节点&quot;/&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row)&quot; title=&quot;修改&quot;/&gt; &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; title=&quot;删除&quot; :disabled=&quot;scope.row.children.length &gt; 0&quot;/&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;el-dialog :title=&quot;dialogTitle&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;40%&quot; &gt; &lt;el-form ref=&quot;dataForm&quot; :model=&quot;sysMenu&quot; label-width=&quot;150px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;上级部门&quot; v-if=&quot;sysMenu.id === ''&quot;&gt; &lt;el-input v-model=&quot;sysMenu.parentName&quot; disabled=&quot;true&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;菜单类型&quot; prop=&quot;type&quot;&gt; &lt;el-radio-group v-model=&quot;sysMenu.type&quot; :disabled=&quot;typeDisabled&quot;&gt; &lt;el-radio :label=&quot;0&quot; :disabled=&quot;type0Disabled&quot;&gt;目录&lt;/el-radio&gt; &lt;el-radio :label=&quot;1&quot; :disabled=&quot;type1Disabled&quot;&gt;菜单&lt;/el-radio&gt; &lt;el-radio :label=&quot;2&quot; :disabled=&quot;type2Disabled&quot;&gt;按钮&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;菜单名称&quot; prop=&quot;name&quot;&gt; &lt;el-input v-model=&quot;sysMenu.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;图标&quot; prop=&quot;icon&quot; v-if=&quot;sysMenu.type !== 2&quot;&gt; &lt;el-select v-model=&quot;sysMenu.icon&quot; clearable&gt; &lt;el-option v-for=&quot;item in iconList&quot; :key=&quot;item.class&quot; :label=&quot;item.class&quot; :value=&quot;item.class&quot;&gt; &lt;span style=&quot;float: left;&quot;&gt; &lt;i :class=&quot;item.class&quot;&gt;&lt;/i&gt; &lt;!-- 如果动态显示图标，这里添加判断 --&gt; &lt;/span&gt; &lt;span style=&quot;padding-left: 6px;&quot;&gt;{{ item.class }}&lt;/span&gt; &lt;/el-option&gt; &lt;/el-select&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;排序&quot;&gt; &lt;el-input-number v-model=&quot;sysMenu.sortValue&quot; controls-position=&quot;right&quot; :min=&quot;0&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;path&quot;&gt; &lt;span slot=&quot;label&quot;&gt; &lt;el-tooltip content=&quot;访问的路由地址，如：`sysUser`&quot; placement=&quot;top&quot;&gt; &lt;i class=&quot;el-icon-question&quot;&gt;&lt;/i&gt; &lt;/el-tooltip&gt; 路由地址 &lt;/span&gt; &lt;el-input v-model=&quot;sysMenu.path&quot; placeholder=&quot;请输入路由地址&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;component&quot; v-if=&quot;sysMenu.type !== 0&quot;&gt; &lt;span slot=&quot;label&quot;&gt; &lt;el-tooltip content=&quot;访问的组件路径，如：`system/user/index`，默认在`views`目录下&quot; placement=&quot;top&quot;&gt; &lt;i class=&quot;el-icon-question&quot;&gt;&lt;/i&gt; &lt;/el-tooltip&gt; 组件路径 &lt;/span&gt; &lt;el-input v-model=&quot;sysMenu.component&quot; placeholder=&quot;请输入组件路径&quot; /&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=&quot;sysMenu.type === 2&quot;&gt; &lt;el-input v-model=&quot;sysMenu.perms&quot; placeholder=&quot;请输入权限标识&quot; maxlength=&quot;100&quot; /&gt; &lt;span slot=&quot;label&quot;&gt; &lt;el-tooltip content=&quot;控制器中定义的权限字符，如：@PreAuthorize(hasAuthority('bnt.sysRole.list'))&quot; placement=&quot;top&quot;&gt; &lt;i class=&quot;el-icon-question&quot;&gt;&lt;/i&gt; &lt;/el-tooltip&gt; 权限字符 &lt;/span&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;状态&quot; prop=&quot;type&quot;&gt; &lt;el-radio-group v-model=&quot;sysMenu.status&quot;&gt; &lt;el-radio :label=&quot;1&quot;&gt;正常&lt;/el-radio&gt; &lt;el-radio :label=&quot;0&quot;&gt;停用&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;dialogVisible = false&quot; size=&quot;small&quot; icon=&quot;el-icon-refresh-right&quot;&gt;取 消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-check&quot; @click=&quot;saveOrUpdate()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/system/sysMenu'const defaultForm = { id: '', parentId: '', name: '', type: 0, path: '', component: '', perms: '', icon: '', sortValue: 1, status: 1}export default { // 定义数据 data() { return { sysMenuList: [], expandKeys: [], // 需要自动展开的项 typeDisabled: false, type0Disabled: false, type1Disabled: false, type2Disabled: false, dialogTitle: '', dialogVisible: false, sysMenu: defaultForm, saveBtnDisabled: false, iconList: [ { class: &quot;el-icon-s-tools&quot;, }, { class: &quot;el-icon-s-custom&quot;, }, { class: &quot;el-icon-setting&quot;, }, { class: &quot;el-icon-user-solid&quot;, }, { class: &quot;el-icon-s-help&quot;, }, { class: &quot;el-icon-phone&quot;, }, { class: &quot;el-icon-s-unfold&quot;, }, { class: &quot;el-icon-s-operation&quot;, }, { class: &quot;el-icon-more-outline&quot;, }, { class: &quot;el-icon-s-check&quot;, }, { class: &quot;el-icon-tickets&quot;, }, { class: &quot;el-icon-s-goods&quot;, }, { class: &quot;el-icon-document-remove&quot;, }, { class: &quot;el-icon-warning&quot;, }, { class: &quot;el-icon-warning-outline&quot;, }, { class: &quot;el-icon-question&quot;, }, { class: &quot;el-icon-info&quot;, } ] } }, // 当页面加载时获取数据 created() { this.fetchData() }, methods: { // 调用api层获取数据库中的数据 fetchData() { console.log('加载列表') api.findNodes().then(response =&gt; { this.sysMenuList = response.data console.log(this.sysMenuList) }) }, // 根据id删除数据 removeDataById(id) { // debugger this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return api.removeById(id) }).then((response) =&gt; { this.fetchData() this.$message({ type: 'success', message: '删除成功!' }) }).catch(() =&gt; { this.$message.info('取消删除') }) }, // ------------- add(row){ debugger this.typeDisabled = false this.dialogTitle = '添加下级节点' this.dialogVisible = true this.sysMenu = Object.assign({}, defaultForm) this.sysMenu.id = '' if(row) { this.sysMenu.parentId = row.id this.sysMenu.parentName = row.name //this.sysMenu.component = 'ParentView' if(row.type === 0) { this.sysMenu.type = 1 this.typeDisabled = false this.type0Disabled = false this.type1Disabled = false this.type2Disabled = true } else if(row.type === 1) { this.sysMenu.type = 2 this.typeDisabled = true } } else { this.dialogTitle = '添加目录节点' this.sysMenu.type = 0 this.sysMenu.component = 'Layout' this.sysMenu.parentId = 0 this.typeDisabled = true } }, edit(row) { debugger this.dialogTitle = '修改节点' this.dialogVisible = true this.sysMenu = Object.assign({}, row) this.typeDisabled = true }, saveOrUpdate() { if(this.sysMenu.type === 0 &amp;&amp; this.sysMenu.parentId !== 0) { this.sysMenu.component = 'ParentView' } this.$refs.dataForm.validate(valid =&gt; { if (valid) { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.sysMenu.id) { this.saveData() } else { this.updateData() } } }) }, // 新增 saveData() { api.save(this.sysMenu).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) }, // 根据id更新记录 updateData() { api.updateById(this.sysMenu).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData() }) } }}&lt;/script&gt; # 三、给角色分配权限 # 1、给角色分配权限 # 1.1、接口分析 1、进入分配页面：获取全部菜单及按钮，选中已选复选框，进行页面展示 2、保存分配权限：删除之前分配的权限和保存现在分配的权限 # 1.2、controller 方法 操作类：SysMenuController 12345678910111213@ApiOperation(value = &quot;根据角色获取菜单&quot;)@GetMapping(&quot;toAssign/{roleId}&quot;)public Result toAssign(@PathVariable Long roleId) { List&lt;SysMenu&gt; list = sysMenuService.findSysMenuByRoleId(roleId); return Result.ok(list);}@ApiOperation(value = &quot;给角色分配权限&quot;)@PostMapping(&quot;/doAssign&quot;)public Result doAssign(@RequestBody AssignMenuVo assignMenuVo) { sysMenuService.doAssign(assignMenuVo); return Result.ok();} # 1.3、service 接口 操作类：SysMenuService 1234567891011/** * 根据角色获取授权权限数据 * @return */List&lt;SysMenu&gt; findSysMenuByRoleId(Long roleId);/** * 保存角色权限 * @param assginMenuVo */void doAssign(AssginMenuVo assginMenuVo); # 1.4、service 接口实现 1、操作类：SysMenuServiceImpl 1234567891011121314151617181920212223242526272829303132333435@Overridepublic List&lt;SysMenu&gt; findSysMenuByRoleId(Long roleId) { //全部权限列表 List&lt;SysMenu&gt; allSysMenuList = this.list(new LambdaQueryWrapper&lt;SysMenu&gt;().eq(SysMenu::getStatus, 1)); //根据角色id获取角色权限 List&lt;SysRoleMenu&gt; sysRoleMenuList = sysRoleMenuMapper.selectList(new LambdaQueryWrapper&lt;SysRoleMenu&gt;().eq(SysRoleMenu::getRoleId, roleId)); //转换给角色id与角色权限对应Map对象 List&lt;Long&gt; menuIdList = sysRoleMenuList.stream().map(e -&gt; e.getMenuId()).collect(Collectors.toList()); allSysMenuList.forEach(permission -&gt; { if (menuIdList.contains(permission.getId())) { permission.setSelect(true); } else { permission.setSelect(false); } }); List&lt;SysMenu&gt; sysMenuList = MenuHelper.buildTree(allSysMenuList); return sysMenuList;}@Transactional@Overridepublic void doAssign(AssginMenuVo assginMenuVo) { sysRoleMenuMapper.delete(new LambdaQueryWrapper&lt;SysRoleMenu&gt;().eq(SysRoleMenu::getRoleId, assginMenuVo.getRoleId())); for (Long menuId : assginMenuVo.getMenuIdList()) { if (StringUtils.isEmpty(menuId)) continue; SysRoleMenu rolePermission = new SysRoleMenu(); rolePermission.setRoleId(assginMenuVo.getRoleId()); rolePermission.setMenuId(menuId); sysRoleMenuMapper.insert(rolePermission); }} 2、添加 SysRoleMenuMapper 123456789101112package com.atguigu.system.mapper;import com.atguigu.model.system.SysRoleMenu;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;import org.springframework.stereotype.Repository;@Repository@Mapperpublic interface SysRoleMenuMapper extends BaseMapper&lt;SysRoleMenu&gt; {} # 2、前端实现 # 2.1、添加路由 修改 src/router/index.js 文件 123456789{ path: 'assignAuth', component: () =&gt; import('@/views/system/sysRole/assignAuth'), meta: { activeMenu: '/system/sysRole', title: '角色授权' }, hidden: true,} # 2.2、角色列表添加按钮及方法 1&lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-baseball&quot; size=&quot;mini&quot; @click=&quot;showAssignAuth(scope.row)&quot; title=&quot;分配权限&quot;/&gt; 123showAssignAuth(row) { this.$router.push('/system/assignAuth?id='+row.id+'&amp;roleName='+row.roleName);} # 2.3、添加 api 创建文件 src/api/system/sysMenu.js 1234567891011121314151617181920/*查看某个角色的权限列表*/toAssign(roleId) { return request({ url: `${api_name}/toAssign/${roleId}`, method: 'get' })},/*给某个角色授权*/doAssign(assginMenuVo) { return request({ url: `${api_name}/doAssign`, method: &quot;post&quot;, data: assginMenuVo })} # 2.4、实现页面功能 创建 src/views/system/sysMenu/assignAuth.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;div style=&quot;padding: 20px 20px 0 20px;&quot;&gt; 授权角色：{{ $route.query.roleName }} &lt;/div&gt; &lt;el-tree style=&quot;margin: 20px 0&quot; ref=&quot;tree&quot; :data=&quot;sysMenuList&quot; node-key=&quot;id&quot; show-checkbox default-expand-all :props=&quot;defaultProps&quot; /&gt; &lt;div style=&quot;padding: 20px 20px;&quot;&gt; &lt;el-button :loading=&quot;loading&quot; type=&quot;primary&quot; icon=&quot;el-icon-check&quot; size=&quot;mini&quot; @click=&quot;save&quot;&gt;保存&lt;/el-button&gt; &lt;el-button @click=&quot;$router.push('/system/sysRole')&quot; size=&quot;mini&quot; icon=&quot;el-icon-refresh-right&quot;&gt;返回&lt;/el-button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import api from '@/api/system/sysMenu' export default { name: 'roleAuth', data() { return { loading: false, // 用来标识是否正在保存请求中的标识, 防止重复提交 sysMenuList: [], // 所有 defaultProps: { children: 'children', label: 'name' }, }; }, created() { this.fetchData() }, methods: { /* 初始化 */ fetchData() { const roleId = this.$route.query.id api.toAssign(roleId).then(result =&gt; { const sysMenuList = result.data this.sysMenuList = sysMenuList const checkedIds = this.getCheckedIds(sysMenuList) console.log('getPermissions() checkedIds', checkedIds) this.$refs.tree.setCheckedKeys(checkedIds) }) }, /* 得到所有选中的id列表 */ getCheckedIds (auths, initArr = []) { return auths.reduce((pre, item) =&gt; { if (item.select &amp;&amp; item.children.length === 0) { pre.push(item.id) } else if (item.children) { this.getCheckedIds(item.children, initArr) } return pre }, initArr) }, /* 保存权限列表 */ save() { debugger //获取到当前子节点 //const checkedNodes = this.$refs.tree.getCheckedNodes() //获取到当前子节点及父节点 const allCheckedNodes = this.$refs.tree.getCheckedNodes(false, true); let idList = allCheckedNodes.map(node =&gt; node.id); console.log(idList) let assginMenuVo = { roleId: this.$route.query.id, menuIdList: idList } this.loading = true api.doAssign(assginMenuVo).then(result =&gt; { this.loading = false this.$message.success(result.$message || '分配权限成功') this.$router.push('/system/sysRole'); }) } } };&lt;/script&gt;","link":"/2023/07/06/%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86/"},{"title":"","text":"# 云尚办公系统：管理端 - 审批设置 # 一、审批设置需求 # 1、需求描述 公司日常办公，审批是必不可少的一个功能，例如常用的钉钉 OA 审批，今天我们就要做类似的审批功能。 审批设置模块包含：审批类型与审批模板 ** 审批类型：** 审批类型即为审批的分类，如：出勤、人事、财务等 ** 审批模板：** 设置具体审批的基本信息、表单信息与审批流程定义，审批流涉及工作流引擎 Activiti，常见的审批模板如：加班、出差、请假、费用报销等，我们可以根据公司具体业务配置具体的审批模板 # 2、页面效果 # 2.1、管理端 1、审批类型 2、审批模板 3、在线流程设计 # 2.2、员工端 1、审批中心 2、发起审批，显示动态表单 # 3、数据库表设计 1、审批类型表：oa_process_type 2、审批模板表：oa_process_template 重要字段说明： ​ form_props：动态表单的表单属性，后续入门 form-create 组件会详细讲解 ​ form_options：动态表单的表单选项，后续入门 form-create 组件会详细讲解，这两项就是配置动态表单的 ​ process_definition_key：流程定义 key，前面 Activiti 入门已讲解，我们启动流程实例会使用它 ​ process_definition_path：保存流程定义文件的路径 ​ process_model_id：流程定义模型 id，流程定义实现两种方式，一种：上传，第二种：在线制作，分别使用这两个字段保存记录 # 二、审批类型 # 1、审批类型 CRUD # 1.1、mapper 12345678910package com.atguigu.process.mapper;import com.atguigu.model.process.ProcessType;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface ProcessTypeMapper extends BaseMapper&lt;ProcessType&gt; {} # 1.2、service 接口 12345678910package com.atguigu.process.service;import com.atguigu.model.process.ProcessType;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.IService;public interface ProcessTypeService extends IService&lt;ProcessType&gt; {} # 1.3、service 接口实现 1234567891011121314151617package com.atguigu.process.service.impl;import com.atguigu.model.process.ProcessType;import com.atguigu.process.mapper.ProcessTypeMapper;import com.atguigu.process.service.ProcessTypeService;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessTypeServiceImpl extends ServiceImpl&lt;ProcessTypeMapper, ProcessType&gt; implements ProcessTypeService {} # 1.4、controller 接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package com.atguigu.process.controller;import com.atguigu.common.result.Result;import com.atguigu.model.process.ProcessType;import com.atguigu.process.service.ProcessTypeService;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;@Api(value = &quot;审批类型&quot;, tags = &quot;审批类型&quot;)@RestController@RequestMapping(value = &quot;/admin/process/processType&quot;)@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessTypeController { @Autowired private ProcessTypeService processTypeService; @PreAuthorize(&quot;hasAuthority('bnt.processType.list')&quot;) @ApiOperation(value = &quot;获取分页列表&quot;) @GetMapping(&quot;{page}/{limit}&quot;) public Result index(@PathVariable Long page, @PathVariable Long limit) { Page&lt;ProcessType&gt; pageParam = new Page&lt;&gt;(page,limit); IPage&lt;ProcessType&gt; pageModel = processTypeService.page(pageParam); return Result.ok(pageModel); } @PreAuthorize(&quot;hasAuthority('bnt.processType.list')&quot;) @ApiOperation(value = &quot;获取&quot;) @GetMapping(&quot;get/{id}&quot;) public Result get(@PathVariable Long id) { ProcessType processType = processTypeService.getById(id); return Result.ok(processType); } @PreAuthorize(&quot;hasAuthority('bnt.processType.add')&quot;) @ApiOperation(value = &quot;新增&quot;) @PostMapping(&quot;save&quot;) public Result save(@RequestBody ProcessType processType) { processTypeService.save(processType); return Result.ok(); } @PreAuthorize(&quot;hasAuthority('bnt.processType.update')&quot;) @ApiOperation(value = &quot;修改&quot;) @PutMapping(&quot;update&quot;) public Result updateById(@RequestBody ProcessType processType) { processTypeService.updateById(processType); return Result.ok(); } @PreAuthorize(&quot;hasAuthority('bnt.processType.remove')&quot;) @ApiOperation(value = &quot;删除&quot;) @DeleteMapping(&quot;remove/{id}&quot;) public Result remove(@PathVariable Long id) { processTypeService.removeById(id); return Result.ok(); }} # 2、前端页面 # 2.1、动态添加路由 在 “系统管理”-&gt;“菜单管理” 添加 “审批设置”-&gt;“审批类型” 对于菜单信息，我们也可以直接导入菜单表初始化数据，后续不用再单独配置 # 2.2、定义 api 创建 src/api/process/processType.js 123456789101112131415161718192021222324252627282930313233343536373839import request from '@/utils/request'const api_name = '/admin/process/processType'export default { getPageList(page, limit) { return request({ url: `${api_name}/${page}/${limit}`, method: 'get' }) }, getById(id) { return request({ url: `${api_name}/get/${id}`, method: 'get' }) }, save(role) { return request({ url: `${api_name}/save`, method: 'post', data: role }) }, updateById(role) { return request({ url: `${api_name}/update`, method: 'put', data: role }) }, removeById(id) { return request({ url: `${api_name}/remove/${id}`, method: 'delete' }) }} # 2.3、创建 vue 页面 创建 views/processSet/processType/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;!-- 工具条 --&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add&quot; :disabled=&quot;$hasBP('bnt.processType.add') === false&quot;&gt;添 加&lt;/el-button&gt; &lt;/div&gt; &lt;!-- banner列表 --&gt; &lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot; &gt; &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; /&gt; &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot; &gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ (page - 1) * limit + scope.$index + 1 }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;类型名称&quot;/&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot;/&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot;/&gt; &lt;el-table-column prop=&quot;updateTime&quot; label=&quot;更新时间&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processType.update') === false&quot;&gt;修改&lt;/el-button&gt; &lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processType.remove') === false&quot;&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;!-- 分页组件 --&gt; &lt;el-pagination :current-page=&quot;page&quot; :total=&quot;total&quot; :page-size=&quot;limit&quot; :page-sizes=&quot;[5, 10, 20, 30, 40, 50, 100]&quot; style=&quot;padding: 30px 0; text-align: center;&quot; layout=&quot;sizes, prev, pager, next, jumper, -&gt;, total, slot&quot; @current-change=&quot;fetchData&quot; @size-change=&quot;changeSize&quot; /&gt; &lt;el-dialog title=&quot;添加/修改&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;40%&quot;&gt; &lt;el-form ref=&quot;flashPromotionForm&quot; label-width=&quot;150px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;类型名称&quot;&gt; &lt;el-input v-model=&quot;processType.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;描述&quot;&gt; &lt;el-input v-model=&quot;processType.description&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;dialogVisible = false&quot; size=&quot;small&quot;&gt;取 消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;saveOrUpdate()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/process/processType'const defaultForm = { id: '', name: '', description: ''}export default { data() { return { listLoading: true, // 数据是否正在加载 list: null, // banner列表 total: 0, // 数据库中的总记录数 page: 1, // 默认页码 limit: 10, // 每页记录数 searchObj: {}, // 查询表单对象 dialogVisible: false, processType: defaultForm, saveBtnDisabled: false } }, // 生命周期函数：内存准备完毕，页面尚未渲染 created() { this.fetchData() }, // 生命周期函数：内存准备完毕，页面渲染成功 mounted() { }, methods: { // 当页码发生改变的时候 changeSize(size) { console.log(size) this.limit = size this.fetchData(1) }, // 加载列表数据 fetchData(page = 1) { this.page = page api.getPageList(this.page, this.limit, this.searchObj).then(response =&gt; { this.list = response.data.records this.total = response.data.total // 数据加载并绑定成功 this.listLoading = false }) }, // 重置查询表单 resetData() { console.log('重置查询表单') this.searchObj = {} this.fetchData() }, // 根据id删除数据 removeDataById(id) { this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return api.removeById(id) }).then((response) =&gt; { this.fetchData(this.page) this.$message.success(response.message) }).catch(() =&gt; { this.$message.info('取消删除') }) }, add() { this.dialogVisible = true this.processType = Object.assign({}, defaultForm) }, edit(id) { this.dialogVisible = true this.fetchDataById(id) }, fetchDataById(id) { api.getById(id).then(response =&gt; { this.processType = response.data }) }, saveOrUpdate() { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.processType.id) { this.saveData() } else { this.updateData() } }, // 新增 saveData() { api.save(this.processType).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) }, // 根据id更新记录 updateData() { api.updateById(this.processType).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) } }}&lt;/script&gt; # 三、审批模板 # 1、审批模板 CRUD # 1.1、mapper 12345678910package com.atguigu.process.mapper;import com.atguigu.model.process.ProcessTemplate;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface ProcessTemplateMapper extends BaseMapper&lt;ProcessTemplate&gt; {} # 1.2、service 接口 123456789101112package com.atguigu.process.service;import com.atguigu.model.process.ProcessTemplate;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.IService;public interface ProcessTemplateService extends IService&lt;ProcessTemplate&gt; { IPage&lt;ProcessTemplate&gt; selectPage(Page&lt;ProcessTemplate&gt; pageParam);} # 1.3、service 接口实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.atguigu.process.service.impl;import com.atguigu.model.process.ProcessTemplate;import com.atguigu.model.process.ProcessType;import com.atguigu.process.mapper.ProcessTemplateMapper;import com.atguigu.process.service.ProcessTemplateService;import com.atguigu.process.service.ProcessTypeService;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import javax.annotation.Resource;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@Service@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessTemplateServiceImpl extends ServiceImpl&lt;ProcessTemplateMapper, ProcessTemplate&gt; implements ProcessTemplateService { @Resource private ProcessTemplateMapper processTemplateMapper; @Resource private ProcessTypeService processTypeService; @Override public IPage&lt;ProcessTemplate&gt; selectPage(Page&lt;ProcessTemplate&gt; pageParam) { LambdaQueryWrapper&lt;ProcessTemplate&gt; queryWrapper = new LambdaQueryWrapper&lt;ProcessTemplate&gt;(); queryWrapper.orderByDesc(ProcessTemplate::getId); IPage&lt;ProcessTemplate&gt; page = processTemplateMapper.selectPage(pageParam, queryWrapper); List&lt;ProcessTemplate&gt; processTemplateList = page.getRecords(); List&lt;Long&gt; processTypeIdList = processTemplateList.stream().map(processTemplate -&gt; processTemplate.getProcessTypeId()).collect(Collectors.toList()); if(!CollectionUtils.isEmpty(processTypeIdList)) { Map&lt;Long, ProcessType&gt; processTypeIdToProcessTypeMap = processTypeService.list(new LambdaQueryWrapper&lt;ProcessType&gt;().in(ProcessType::getId, processTypeIdList)).stream().collect(Collectors.toMap(ProcessType::getId, ProcessType -&gt; ProcessType)); for(ProcessTemplate processTemplate : processTemplateList) { ProcessType processType = processTypeIdToProcessTypeMap.get(processTemplate.getProcessTypeId()); if(null == processType) continue; processTemplate.setProcessTypeName(processType.getName()); } } return page; }} # 1.4、controller 接口 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package com.atguigu.process.controller;import com.atguigu.common.result.Result;import com.atguigu.model.process.ProcessTemplate;import com.atguigu.process.service.ProcessTemplateService;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;@Api(value = &quot;审批模板管理&quot;, tags = &quot;审批模板管理&quot;)@RestController@RequestMapping(value = &quot;/admin/process/processTemplate&quot;)@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessTemplateController { @Autowired private ProcessTemplateService processTemplateService; //@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.list')&quot;) @ApiOperation(value = &quot;获取分页列表&quot;) @GetMapping(&quot;{page}/{limit}&quot;) public Result index( @ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true) @PathVariable Long page, @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true) @PathVariable Long limit) { Page&lt;ProcessTemplate&gt; pageParam = new Page&lt;&gt;(page, limit); IPage&lt;ProcessTemplate&gt; pageModel = processTemplateService.selectPage(pageParam); return Result.ok(pageModel); } //@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.list')&quot;) @ApiOperation(value = &quot;获取&quot;) @GetMapping(&quot;get/{id}&quot;) public Result get(@PathVariable Long id) { ProcessTemplate processTemplate = processTemplateService.getById(id); return Result.ok(processTemplate); } //@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.templateSet')&quot;) @ApiOperation(value = &quot;新增&quot;) @PostMapping(&quot;save&quot;) public Result save(@RequestBody ProcessTemplate processTemplate) { processTemplateService.save(processTemplate); return Result.ok(); } //@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.templateSet')&quot;) @ApiOperation(value = &quot;修改&quot;) @PutMapping(&quot;update&quot;) public Result updateById(@RequestBody ProcessTemplate processTemplate) { processTemplateService.updateById(processTemplate); return Result.ok(); } //@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.remove')&quot;) @ApiOperation(value = &quot;删除&quot;) @DeleteMapping(&quot;remove/{id}&quot;) public Result remove(@PathVariable Long id) { processTemplateService.removeById(id); return Result.ok(); }} # 2、列表页面 # 2.1、动态添加路由 在 “系统管理”-&gt;“菜单管理” 添加 “审批设置”-&gt;“审批类型” 对于菜单信息，我们也可以直接导入菜单表初始化数据，后续不用再单独配置 说明：“审批模板设置” 页面内容较多，因此单独打开一个独立页面 # 2.2、定义 api 创建 src/api/process/processTemplate.js 基本的增删改查接口 1234567891011121314151617181920212223242526272829303132333435363738394041import request from '@/utils/request'const api_name = '/admin/process/processTemplate'export default { getPageList(page, limit) { return request({ url: `${api_name}/${page}/${limit}`, method: 'get' }) }, getById(id) { return request({ url: `${api_name}/get/${id}`, method: 'get' }) }, save(role) { return request({ url: `${api_name}/save`, method: 'post', data: role }) }, updateById(role) { return request({ url: `${api_name}/update`, method: 'put', data: role }) }, removeById(id) { return request({ url: `${api_name}/remove/${id}`, method: 'delete' }) }} # 2.3、列表页面 创建 views/processSet/processTemplate/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;!-- 工具条 --&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;add()&quot; :disabled=&quot;$hasBP('bnt.processTemplate.templateSet') === false&quot;&gt;添加审批设置&lt;/el-button&gt; &lt;/div&gt; &lt;!-- 列表 --&gt; &lt;el-table v-loading=&quot;listLoading&quot; :data=&quot;list&quot; stripe border style=&quot;width: 100%;margin-top: 10px;&quot; &gt; &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot; &gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ (page - 1) * limit + scope.$index + 1 }} &lt;/template&gt; &lt;/el-table-column&gt;iconPath &lt;el-table-column prop=&quot;name&quot; label=&quot;审批名称&quot;/&gt; &lt;el-table-column label=&quot;图标&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;img :src=&quot;scope.row.iconUrl&quot; style=&quot;width: 30px;height: 30px;vertical-align: text-bottom;&quot;&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;processTypeName&quot; label=&quot;审批类型&quot;/&gt; &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot;/&gt; &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot;/&gt; &lt;el-table-column prop=&quot;updateTime&quot; label=&quot;更新时间&quot;/&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;250&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processTemplate.templateSet') === false&quot;&gt;修改审批设置&lt;/el-button&gt; &lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processTemplate.remove') === false&quot;&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;!-- 分页组件 --&gt; &lt;el-pagination :current-page=&quot;page&quot; :total=&quot;total&quot; :page-size=&quot;limit&quot; :page-sizes=&quot;[5, 10, 20, 30, 40, 50, 100]&quot; style=&quot;padding: 30px 0; text-align: center;&quot; layout=&quot;sizes, prev, pager, next, jumper, -&gt;, total, slot&quot; @current-change=&quot;fetchData&quot; @size-change=&quot;changeSize&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/process/processTemplate'export default { data() { return { listLoading: true, // 数据是否正在加载 list: null, // banner列表 total: 0, // 数据库中的总记录数 page: 1, // 默认页码 limit: 10, // 每页记录数 searchObj: {} // 查询表单对象 } }, // 生命周期函数：内存准备完毕，页面尚未渲染 created() { this.fetchData() }, // 生命周期函数：内存准备完毕，页面渲染成功 mounted() { }, methods: { // 当页码发生改变的时候 changeSize(size) { this.limit = size this.fetchData(1) }, // 加载banner列表数据 fetchData(page = 1) { // 异步获取远程数据（ajax） this.page = page api.getPageList(this.page, this.limit, this.searchObj).then( response =&gt; { this.list = response.data.records this.total = response.data.total // 数据加载并绑定成功 this.listLoading = false } ) }, // 重置查询表单 resetData() { this.searchObj = {} this.fetchData() }, // 根据id删除数据 removeDataById(id) { this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return api.removeById(id) }).then((response) =&gt; { this.fetchData(this.page) this.$message.success(response.message) }).catch(() =&gt; { this.$message.info('取消删除') }) }, add() { this.$router.push('/processSet/templateSet') }, edit(id) { this.$router.push('/processSet/templateSet?id=' + id) } }}&lt;/script&gt; # 3、添加审批模板 1、基本设置：一些基本信息 2、表单设置：动态表单 3、流程设置：本地设计流程定义，上传流程定义文件及流程定义图片（压缩上传） 涉及未实现接口： 1、获取全部审批分类 2、上传流程定义压缩文件 # 3.1、form-create 官网：http://www.form-create.com/v2/guide/ 轻松搞定 form 表单，让你不再为表单而烦恼。 form-create 是一个可以通过 JSON 生成具有动态渲染、数据收集、验证和提交功能的表单生成组件。 form-create-designer 是基于 form-create 实现的表单设计器组件。可以通过拖拽的方式快速创建表单，提高开发者对表单的开发效率，节省开发者的时间 表单设计器： http://www.form-create.com/designer/?fr=home 可以通过拖拽的方式快速配置动态表单，配置好的动态表单可以通过：生成 JSON 与生成 Options 获取数据，这两数据对于表字段：form_props 与 form_options，后续我们通过这两字段渲染动态表单。 大家可以根据表单设计器，查看数据格式 # 3.2、集成 form-create 1、添加依赖 在 package.json 文件添加依赖，注意版本号，更高的版本号可能与本项目不兼容 12&quot;@form-create/element-ui&quot;: &quot;^2.5.17&quot;,&quot;@form-create/designer&quot;: &quot;^1.0.8&quot;, 2、在 main.js 中写入以下内容： 1234import formCreate from '@form-create/element-ui'import FcDesigner from '@form-create/designer'Vue.use(formCreate)Vue.use(FcDesigner) 3、集成表单设计器 创建 views/processSet/processTemplate/templateSet.vue 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;div id=&quot;app1&quot;&gt; &lt;fc-designer class=&quot;form-build&quot; ref=&quot;designer&quot;/&gt; &lt;el-button @click=&quot;save&quot;&gt;获取数据&lt;/el-button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { data() { return { } }, created() { }, methods: { save() { console.log(this.$refs.designer.getRule()) console.log(this.$refs.designer.getOption()) } }}&lt;/script&gt; 显示效果： 随便拉几个表单项，点击 “获取数据”，就是我们需要的动态表单数据格式了。 # 3.3、获取全部审批分类接口 1、在 ProcessTypeController 类添加接口 12345@ApiOperation(value = &quot;获取全部审批分类&quot;)@GetMapping(&quot;findAll&quot;)public Result findAll() { return Result.ok(processTypeService.list());} 2、在 processType.js 添加前端接口 123456findAll() { return request({ url: `${api_name}/findAll`, method: 'get' })} # 3.4、上传流程定义接口 在 ProcessTemplateController 类添加接口 1234567891011121314151617181920212223242526272829@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.templateSet')&quot;)@ApiOperation(value = &quot;上传流程定义&quot;)@PostMapping(&quot;/uploadProcessDefinition&quot;)public Result uploadProcessDefinition(MultipartFile file) throws FileNotFoundException { String path = new File(ResourceUtils.getURL(&quot;classpath:&quot;).getPath()).getAbsolutePath(); String fileName = file.getOriginalFilename(); // 上传目录 File tempFile = new File(path + &quot;/processes/&quot;); // 判断目录是否存着 if (!tempFile.exists()) { tempFile.mkdirs();//创建目录 } // 创建空文件用于写入文件 File imageFile = new File(path + &quot;/processes/&quot; + fileName); // 保存文件流到本地 try { file.transferTo(imageFile); } catch (IOException e) { e.printStackTrace(); return Result.fail(&quot;上传失败&quot;); } Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); //根据上传地址后续部署流程定义，文件名称为流程定义的默认key map.put(&quot;processDefinitionPath&quot;, &quot;processes/&quot; + fileName); map.put(&quot;processDefinitionKey&quot;, fileName.substring(0, fileName.lastIndexOf(&quot;.&quot;))); return Result.ok(map);} # 3.5、模板设置完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;el-steps :active=&quot;stepIndex&quot; finish-status=&quot;success&quot;&gt; &lt;el-step title=&quot;基本设置&quot;&gt;&lt;/el-step&gt; &lt;el-step title=&quot;表单设置&quot;&gt;&lt;/el-step&gt; &lt;el-step title=&quot;流程设置&quot;&gt;&lt;/el-step&gt; &lt;/el-steps&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button v-if=&quot;stepIndex &gt; 1&quot; icon=&quot;el-icon-check&quot; type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;pre()&quot; round&gt;上一步 &lt;/el-button&gt; &lt;el-button icon=&quot;el-icon-check&quot; type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;next()&quot; round&gt;{{ stepIndex == 3 ? '提交保存' : '下一步' }} &lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; @click=&quot;back()&quot;&gt;返回&lt;/el-button&gt; &lt;/div&gt; &lt;!-- 第一步 --&gt; &lt;div v-show=&quot;stepIndex == 1&quot; style=&quot;margin-top: 20px;&quot;&gt; &lt;el-form ref=&quot;flashPromotionForm&quot; label-width=&quot;150px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;审批类型&quot;&gt; &lt;el-select v-model=&quot;processTemplate.processTypeId&quot; placeholder=&quot;请选择审批类型&quot;&gt; &lt;el-option v-for=&quot;item in processTypeList&quot; :label=&quot;item.name&quot; :value=&quot;item.id&quot;&gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;审批名称&quot;&gt; &lt;el-input v-model=&quot;processTemplate.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;审批图标&quot;&gt; &lt;el-select v-model=&quot;processTemplate.iconUrl&quot; placeholder=&quot;请选择审批图标&quot;&gt; &lt;el-option v-for=&quot;item in iconUrlList&quot; :label=&quot;item.iconUrl&quot; :value=&quot;item.iconUrl&quot;&gt; &lt;img :src=&quot;item.iconUrl&quot; style=&quot;width: 30px;height: 30px;vertical-align: text-bottom;&quot;&gt; &lt;/el-option&gt; &lt;/el-select&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;描述&quot;&gt; &lt;el-input v-model=&quot;processTemplate.description&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;!-- 第二步 --&gt; &lt;div v-show=&quot;stepIndex == 2&quot; style=&quot;margin-top: 20px;&quot;&gt; &lt;!--表单构建器--&gt; &lt;fc-designer class=&quot;form-build&quot; ref=&quot;designer&quot;/&gt; &lt;/div&gt; &lt;!-- 第三步 --&gt; &lt;div v-show=&quot;stepIndex == 3&quot; style=&quot;margin-top: 20px;&quot;&gt; &lt;el-upload class=&quot;upload-demo&quot; drag action=&quot;/dev-api/admin/process/processTemplate/uploadProcessDefinition&quot; :headers=&quot;uploadHeaders&quot; multiple=&quot;false&quot; :before-upload=&quot;beforeUpload&quot; :on-success=&quot;onUploadSuccess&quot; :file-list=&quot;fileList&quot; &gt; &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt; &lt;div class=&quot;el-upload__text&quot;&gt;将Activiti流程设计文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt; &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;只能上传zip压缩文件，且不超过2048kb&lt;/div&gt; &lt;/el-upload&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/process/processTemplate'import processTypeApi from '@/api/process/processType'import store from '@/store'const defaultForm = { id: '', name: '', iconUrl: '', formProps: '', formOptions: '', processDefinitionKey: '', processDefinitionPath: '', description: ''}export default { data() { return { stepIndex: 1, processTypeList: [], processTemplate: defaultForm, iconUrlList: [ { iconUrl: 'https://gw.alicdn.com/tfs/TB1t695CFYqK1RjSZLeXXbXppXa-102-102.png', tag: '请假' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1bHOWCSzqK1RjSZFjXXblCFXa-112-112.png', tag: '出差' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1cbCYCPTpK1RjSZKPXXa3UpXa-112-112.png', tag: '机票出差' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1cbCYCPTpK1RjSZKPXXa3UpXa-112-112.png', tag: '机票改签' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1e76lCOLaK1RjSZFxXXamPFXa-112-112.png', tag: '外出' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1Yfa0CG6qK1RjSZFmXXX0PFXa-112-112.png', tag: '补卡申请' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1Y8PlCNjaK1RjSZKzXXXVwXXa-112-112.png', tag: '加班' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB11X99CNTpK1RjSZFKXXa2wXXa-102-102.png', tag: '居家隔离' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1_YG.COrpK1RjSZFhXXXSdXXa-102-102.png', tag: '请假' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB13ca1CMDqK1RjSZSyXXaxEVXa-102-102.png', tag: '调岗' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1U9iBCSzqK1RjSZPcXXbTepXa-102-102.png', tag: '离职' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB11pS_CFzqK1RjSZSgXXcpAVXa-102-102.png', tag: '费用申请' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1t695CFYqK1RjSZLeXXbXppXa-102-102.png', tag: '用章申请' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB13f_aCQzoK1RjSZFlXXai4VXa-102-102.png', tag: '携章外出' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1_YG.COrpK1RjSZFhXXXSdXXa-102-102.png', tag: '学期内分期' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1_YG.COrpK1RjSZFhXXXSdXXa-102-102.png', tag: '特殊学费' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1Yfa0CG6qK1RjSZFmXXX0PFXa-112-112.png', tag: '充值卡申领' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1e76lCOLaK1RjSZFxXXamPFXa-112-112.png', tag: '礼品申领' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1FNG.CMHqK1RjSZFgXXa7JXXa-102-102.png', tag: '邮寄快递申请' }, { iconUrl: 'https://gw.alicdn.com/imgextra/i3/O1CN01LLn0YV1LhBXs7T2iO_!!6000000001330-2-tps-120-120.png', tag: '合同审批' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1e76lCOLaK1RjSZFxXXamPFXa-112-112.png', tag: '合同借阅' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1e76lCOLaK1RjSZFxXXamPFXa-112-112.png', tag: '魔点临时开门权限' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1bHOWCSzqK1RjSZFjXXblCFXa-112-112.png', tag: '北京科技园车证审批' }, { iconUrl: 'https://gw.alicdn.com/tfs/TB1e76lCOLaK1RjSZFxXXamPFXa-112-112.png', tag: '魔点访客提前预约审批' } ], uploadHeaders: { 'token': store.getters.token }, fileList: [] } }, created() { let id = this.$route.query.id console.log(id) if (id &gt; 0) { this.fetchDataById(id) } this.fetchProcessTypeData() }, methods: { pre() { this.stepIndex -= 1 }, next() { if (this.stepIndex === 2) { this.processTemplate.formProps = JSON.stringify(this.$refs.designer.getRule()) this.processTemplate.formOptions = JSON.stringify(this.$refs.designer.getOption()) console.log(JSON.stringify(this.processTemplate)) } if (this.stepIndex === 3) { this.saveOrUpdate() } this.stepIndex += 1 }, fetchProcessTypeData() { processTypeApi.findAll().then(response =&gt; { this.processTypeList = response.data }) }, fetchDataById(id) { api.getById(id).then(response =&gt; { this.processTemplate = response.data // 给表单设计器赋值 this.$refs.designer.setRule(JSON.parse(this.processTemplate.formProps)) this.$refs.designer.setOption(JSON.parse(this.processTemplate.formOptions)) this.fileList = [{ name: this.processTemplate.processDefinitionPath, url: this.processTemplate.processDefinitionPath }] }) }, saveOrUpdate() { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.processTemplate.id) { this.saveData() } else { this.updateData() } }, // 新增 saveData() { api.save(this.processTemplate).then(response =&gt; { this.$router.push('/processSet/processTemplate') }) }, // 根据id更新记录 updateData() { api.updateById(this.processTemplate).then(response =&gt; { this.$router.push('/processSet/processTemplate') }) }, // 文件上传限制条件 beforeUpload(file) { const isZip = file.type === 'application/x-zip-compressed' const isLt2M = file.size / 1024 / 1024 &lt; 2 if (!isZip) { this.$message.error('文件格式不正确!') return false } if (!isLt2M) { this.$message.error('上传大小不能超过 2MB!') return false } return true }, // 上传成功的回调 onUploadSuccess(res, file) { // 填充上传文件列表 this.processTemplate.processDefinitionPath = res.data.processDefinitionPath this.processTemplate.processDefinitionKey = res.data.processDefinitionKey }, back() { this.$router.push('/processSet/processTemplate') } }}&lt;/script&gt; # 4、查看审批模板 查看审批模板基本信息、动态表单信息 # 4.1、添加按钮 1&lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;show(scope.row)&quot;&gt;查看审批设置&lt;/el-button&gt; # 4.2、定义 data 1234rule: [],option: {},processTemplate: {},formDialogVisible: false # 4.3、定义方法 123456show(row) { this.rule = JSON.parse(row.formProps) this.option = JSON.parse(row.formOptions) this.processTemplate = row this.formDialogVisible = true} # 4.4、定义弹出层 1234567891011121314151617181920&lt;el-dialog title=&quot;查看审批设置&quot; :visible.sync=&quot;formDialogVisible&quot; width=&quot;35%&quot;&gt; &lt;h3&gt;基本信息&lt;/h3&gt; &lt;el-divider/&gt; &lt;el-form ref=&quot;flashPromotionForm&quot; label-width=&quot;150px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;审批类型&quot; style=&quot;margin-bottom: 0px;&quot;&gt;{{ processTemplate.processTypeName }}&lt;/el-form-item&gt; &lt;el-form-item label=&quot;名称&quot; style=&quot;margin-bottom: 0px;&quot;&gt;{{ processTemplate.name }}&lt;/el-form-item&gt; &lt;el-form-item label=&quot;创建时间&quot; style=&quot;margin-bottom: 0px;&quot;&gt;{{ processTemplate.createTime }}&lt;/el-form-item&gt; &lt;/el-form&gt; &lt;h3&gt;表单信息&lt;/h3&gt; &lt;el-divider/&gt; &lt;div&gt; &lt;form-create :rule=&quot;rule&quot; :option=&quot;option&quot; &gt;&lt;/form-create&gt; &lt;/div&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;formDialogVisible = false&quot; size=&quot;small&quot;&gt;取 消&lt;/el-button&gt; &lt;/span&gt;&lt;/el-dialog&gt; # 5、发布 发布后审批模板就不可以修改了，然后部署流程定义 # 5.1、添加 controller 接口 1234567@PreAuthorize(&quot;hasAuthority('bnt.processTemplate.publish')&quot;)@ApiOperation(value = &quot;发布&quot;)@GetMapping(&quot;/publish/{id}&quot;)public Result publish(@PathVariable Long id) { processTemplateService.publish(id); return Result.ok();} # 5.2、添加 service 接口及实现 1void publish(Long id); 接口实现： 123456789@Transactional@Overridepublic void publish(Long id) { ProcessTemplate processTemplate = this.getById(id); processTemplate.setStatus(1); processTemplateMapper.updateById(processTemplate); //TODO 部署流程定义，后续完善} # 5.3、前端实现 1、添加 api 接口 123456publish(id) { return request({ url: `${api_name}/publish/${id}`, method: 'get' })} 2、添加按钮 1&lt;el-button v-if=&quot;scope.row.status == 0&quot; type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;publish(scope.row.id)&quot; :disabled=&quot;$hasBP('bnt.processTemplate.publish') === false&quot;&gt;发布&lt;/el-button&gt; 3、添加按钮方法 123456publish(id) { api.publish(id).then(response =&gt; { this.$message.success('发布成功') this.fetchData(this.page) })}","link":"/2023/07/06/%E5%AE%A1%E6%89%B9%E8%AE%BE%E7%BD%AE/"},{"title":"","text":"# 云尚办公系统：微信公众号 # 一、功能说明 员工端使用微信公众号完成审批操作，涉及到的功能包含：自定义菜单、授权登录、消息 1、微信公众号一级菜单为：审批列表、审批中心、我的 2、员工关注公众号，员工第一次登录微信公众号，通过微信授权登录进行员工账号绑定 3、员工通过微信公众号提交审批和审批信息，系统根据微信公众号推送审批信息，及时反馈审批过程 项目截图： # 二、公众号菜单管理 公众号一级菜单，数据库默认初始化（审批列表、审批中心、我的） 页面效果如下： # 1、菜单管理 CRUD # 1.1、mapper 12345678910package com.atguigu.wechat.mapper;import com.atguigu.model.wechat.Menu;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface MenuMapper extends BaseMapper&lt;Menu&gt; {} # 1.2、service 接口 123456789101112package com.atguigu.wechat.service;import com.atguigu.model.wechat.Menu;import com.atguigu.vo.wechat.MenuVo;import com.baomidou.mybatisplus.extension.service.IService;import java.util.List;public interface MenuService extends IService&lt;Menu&gt; { List&lt;MenuVo&gt; findMenuInfo();} # 1.3、service 接口实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.atguigu.wechat.service.impl;import com.atguigu.model.wechat.Menu;import com.atguigu.vo.wechat.MenuVo;import com.atguigu.wechat.mapper.MenuMapper;import com.atguigu.wechat.service.MenuService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.stream.Collectors;@Servicepublic class MenuServiceImpl extends ServiceImpl&lt;MenuMapper, Menu&gt; implements MenuService { @Autowired private MenuMapper menuMapper; @Override public List&lt;MenuVo&gt; findMenuInfo() { List&lt;MenuVo&gt; list = new ArrayList&lt;&gt;(); List&lt;Menu&gt; menuList = menuMapper.selectList(null); List&lt;Menu&gt; oneMenuList = menuList.stream().filter(menu -&gt; menu.getParentId().longValue() == 0).collect(Collectors.toList()); for (Menu oneMenu : oneMenuList) { MenuVo oneMenuVo = new MenuVo(); BeanUtils.copyProperties(oneMenu, oneMenuVo); List&lt;Menu&gt; twoMenuList = menuList.stream() .filter(menu -&gt; menu.getParentId().longValue() == oneMenu.getId()) .sorted(Comparator.comparing(Menu::getSort)) .collect(Collectors.toList()); List&lt;MenuVo&gt; children = new ArrayList&lt;&gt;(); for (Menu twoMenu : twoMenuList) { MenuVo twoMenuVo = new MenuVo(); BeanUtils.copyProperties(twoMenu, twoMenuVo); children.add(twoMenuVo); } oneMenuVo.setChildren(children); list.add(oneMenuVo); } return list; }} # 1.4、controller 接口 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.atguigu.wechat.controller;import com.atguigu.common.result.Result;import com.atguigu.model.wechat.Menu;import com.atguigu.wechat.service.MenuService;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping(&quot;/admin/wechat/menu&quot;)@Slf4jpublic class MenuController { @Autowired private MenuService menuService; //@PreAuthorize(&quot;hasAuthority('bnt.menu.list')&quot;) @ApiOperation(value = &quot;获取&quot;) @GetMapping(&quot;get/{id}&quot;) public Result get(@PathVariable Long id) { Menu menu = menuService.getById(id); return Result.ok(menu); } //@PreAuthorize(&quot;hasAuthority('bnt.menu.add')&quot;) @ApiOperation(value = &quot;新增&quot;) @PostMapping(&quot;save&quot;) public Result save(@RequestBody Menu menu) { menuService.save(menu); return Result.ok(); } //@PreAuthorize(&quot;hasAuthority('bnt.menu.update')&quot;) @ApiOperation(value = &quot;修改&quot;) @PutMapping(&quot;update&quot;) public Result updateById(@RequestBody Menu menu) { menuService.updateById(menu); return Result.ok(); } //@PreAuthorize(&quot;hasAuthority('bnt.menu.remove')&quot;) @ApiOperation(value = &quot;删除&quot;) @DeleteMapping(&quot;remove/{id}&quot;) public Result remove(@PathVariable Long id) { menuService.removeById(id); return Result.ok(); } //@PreAuthorize(&quot;hasAuthority('bnt.menu.list')&quot;) @ApiOperation(value = &quot;获取全部菜单&quot;) @GetMapping(&quot;findMenuInfo&quot;) public Result findMenuInfo() { return Result.ok(menuService.findMenuInfo()); }} # 2、前端实现 # 2.1、定义 api 接口 创建 src/api/wechat/menu.js 12345678910111213141516171819202122232425262728293031323334353637383940414243import request from '@/utils/request'const api_name = '/admin/wechat/menu'export default { findMenuInfo() { return request({ url: `${api_name}/findMenuInfo`, method: `get` }) }, save(menu) { return request({ url: `${api_name}/save`, method: `post`, data: menu }) }, getById(id) { return request({ url: `${api_name}/get/${id}`, method: `get` }) }, updateById(menu) { return request({ url: `${api_name}/update`, method: `put`, data: menu }) }, removeById(id) { return request({ url: `${api_name}/remove/${id}`, method: 'delete' }) }} # 2.2、页面实现 创建 views/wechat/menu/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177&lt;template&gt; &lt;div class=&quot;app-container&quot;&gt; &lt;!-- 工具条 --&gt; &lt;div class=&quot;tools-div&quot;&gt; &lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; @click=&quot;add&quot;&gt;添 加&lt;/el-button&gt; &lt;/div&gt; &lt;el-table :data=&quot;list&quot; style=&quot;width: 100%;margin-bottom: 20px;&quot; row-key=&quot;id&quot; border default-expand-all :tree-props=&quot;{children: 'children'}&quot;&gt; &lt;el-table-column label=&quot;名称&quot; prop=&quot;name&quot; width=&quot;350&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;类型&quot; width=&quot;100&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; {{ scope.row.type == 'view' ? '链接' : scope.row.type == 'click' ? '事件' : '' }} &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;菜单URL&quot; prop=&quot;url&quot; &gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;菜单KEY&quot; prop=&quot;meunKey&quot; width=&quot;130&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;排序号&quot; prop=&quot;sort&quot; width=&quot;70&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;170&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button v-if=&quot;scope.row.parentId &gt; 0&quot; type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;edit(scope.row.id)&quot;&gt;修改&lt;/el-button&gt; &lt;el-button v-if=&quot;scope.row.parentId &gt; 0&quot; type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;removeDataById(scope.row.id)&quot;&gt;删除&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;el-dialog title=&quot;添加/修改&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;40%&quot; &gt; &lt;el-form ref=&quot;flashPromotionForm&quot; label-width=&quot;150px&quot; size=&quot;small&quot; style=&quot;padding-right: 40px;&quot;&gt; &lt;el-form-item label=&quot;选择一级菜单&quot;&gt; &lt;el-select v-model=&quot;menu.parentId&quot; placeholder=&quot;请选择&quot;&gt; &lt;el-option v-for=&quot;item in list&quot; :key=&quot;item.id&quot; :label=&quot;item.name&quot; :value=&quot;item.id&quot;/&gt; &lt;/el-select&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;菜单名称&quot;&gt; &lt;el-input v-model=&quot;menu.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;菜单类型&quot;&gt; &lt;el-radio-group v-model=&quot;menu.type&quot;&gt; &lt;el-radio label=&quot;view&quot;&gt;链接&lt;/el-radio&gt; &lt;el-radio label=&quot;click&quot;&gt;事件&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=&quot;menu.type == 'view'&quot; label=&quot;链接&quot;&gt; &lt;el-input v-model=&quot;menu.url&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=&quot;menu.type == 'click'&quot; label=&quot;菜单KEY&quot;&gt; &lt;el-input v-model=&quot;menu.meunKey&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;排序&quot;&gt; &lt;el-input v-model=&quot;menu.sort&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;dialogVisible = false&quot; size=&quot;small&quot;&gt;取 消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;saveOrUpdate()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import menuApi from '@/api/wechat/menu'const defaultForm = { id: null, parentId: 1, name: '', nameId: null, sort: 1, type: 'view', meunKey: '', url: ''}export default { // 定义数据 data() { return { list: [], dialogVisible: false, menu: defaultForm, saveBtnDisabled: false } }, // 当页面加载时获取数据 created() { this.fetchData() }, methods: { // 调用api层获取数据库中的数据 fetchData() { console.log('加载列表') menuApi.findMenuInfo().then(response =&gt; { this.list = response.data console.log(this.list) }) }, // 根据id删除数据 removeDataById(id) { // debugger this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { // promise // 点击确定，远程调用ajax return menuApi.removeById(id) }).then((response) =&gt; { this.fetchData(this.page) this.$message.success(response.message || '删除成功') }).catch(() =&gt; { this.$message.info('取消删除') }) }, // ------------- add() { this.dialogVisible = true this.menu = Object.assign({}, defaultForm) }, edit(id) { this.dialogVisible = true this.fetchDataById(id) }, fetchDataById(id) { menuApi.getById(id).then(response =&gt; { this.menu = response.data }) }, saveOrUpdate() { this.saveBtnDisabled = true // 防止表单重复提交 if (!this.menu.id) { this.saveData() } else { this.updateData() } }, // 新增 saveData() { menuApi.save(this.menu).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) }, // 根据id更新记录 updateData() { menuApi.updateById(this.menu).then(response =&gt; { this.$message.success(response.message || '操作成功') this.dialogVisible = false this.fetchData(this.page) }) } }}&lt;/script&gt; # 3、推送菜单 后台配置好菜单后，我们要推送到微信公众平台 # 3.1、申请账号 云尚办公系统没有微信支付等高级功能，因此无需使用服务号，使用测试账号即可完成测试。 我们使用 “微信公众平台接口测试帐号”，申请地址：https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login，以后有了正式账号，直接一切换即可 扫描登录进入，获取测试号信息：appID 与 appsecret 查看 “自定义菜单 “api 文档： https://developers.weixin.qq.com/doc/offiaccount/Custom_Menus/Creating_Custom-Defined_Menu.html 推送菜单有两种实现方式： ​ 1、完全按照接口文档 http 方式，但这种方式比较繁琐 ​ 2、使用 weixin-java-mp 工具，这个是封装好的工具，可以直接使用，方便快捷，后续我们使用这种方式开发 # 3.2、添加配置 在 application-dev.yml 添加配置 123wechat: mpAppId: wx13db7dcf69bc1223 mpAppSecret: de3d7888d30febf84b64d0e6571e4027 # 3.3、工具类方式 # 3.3.1、引入依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.github.binarywang&lt;/groupId&gt; &lt;artifactId&gt;weixin-java-mp&lt;/artifactId&gt; &lt;version&gt;4.1.0&lt;/version&gt;&lt;/dependency&gt; # 3.3.2、添加工具类和配置类 工具类 123456789101112131415161718package com.atguigu.wechat.config;import lombok.Data;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Data@Component@ConfigurationProperties(prefix = &quot;wechat&quot;)public class WechatAccountConfig { private String mpAppId; private String mpAppSecret;} 配置类 12345678910111213141516171819202122232425262728293031package com.atguigu.wechat.config;import me.chanjar.weixin.mp.api.WxMpService;import me.chanjar.weixin.mp.api.impl.WxMpServiceImpl;import me.chanjar.weixin.mp.config.WxMpConfigStorage;import me.chanjar.weixin.mp.config.impl.WxMpDefaultConfigImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.stereotype.Component;@Componentpublic class WeChatMpConfig { @Autowired private WechatAccountConfig wechatAccountConfig; @Bean public WxMpService wxMpService(){ WxMpService wxMpService = new WxMpServiceImpl(); wxMpService.setWxMpConfigStorage(wxMpConfigStorage()); return wxMpService; } @Bean public WxMpConfigStorage wxMpConfigStorage(){ WxMpDefaultConfigImpl wxMpConfigStorage = new WxMpDefaultConfigImpl(); wxMpConfigStorage.setAppId(wechatAccountConfig.getMpAppId()); wxMpConfigStorage.setSecret(wechatAccountConfig.getMpAppSecret()); return wxMpConfigStorage; }} # 3.3.3、推送接口实现 操作类：MenuServiceImpl 123456789101112131415161718192021222324252627282930313233343536373839404142@Autowiredprivate WxMpService wxMpService;@Overridepublic void syncMenu() { List&lt;MenuVo&gt; menuVoList = this.findMenuInfo(); //菜单 JSONArray buttonList = new JSONArray(); for(MenuVo oneMenuVo : menuVoList) { JSONObject one = new JSONObject(); one.put(&quot;name&quot;, oneMenuVo.getName()); if(CollectionUtils.isEmpty(oneMenuVo.getChildren())) { one.put(&quot;type&quot;, oneMenuVo.getType()); one.put(&quot;url&quot;, &quot;http://oa.atguigu.cn/#&quot;+oneMenuVo.getUrl()); } else { JSONArray subButton = new JSONArray(); for(MenuVo twoMenuVo : oneMenuVo.getChildren()) { JSONObject view = new JSONObject(); view.put(&quot;type&quot;, twoMenuVo.getType()); if(twoMenuVo.getType().equals(&quot;view&quot;)) { view.put(&quot;name&quot;, twoMenuVo.getName()); //H5页面地址 view.put(&quot;url&quot;, &quot;http://oa.atguigu.cn#&quot;+twoMenuVo.getUrl()); } else { view.put(&quot;name&quot;, twoMenuVo.getName()); view.put(&quot;key&quot;, twoMenuVo.getMeunKey()); } subButton.add(view); } one.put(&quot;sub_button&quot;, subButton); } buttonList.add(one); } //菜单 JSONObject button = new JSONObject(); button.put(&quot;button&quot;, buttonList); try { wxMpService.getMenuService().menuCreate(button.toJSONString()); } catch (WxErrorException e) { throw new RuntimeException(e); }} # 3.3.4、controller 接口 1234567//@PreAuthorize(&quot;hasAuthority('bnt.menu.syncMenu')&quot;)@ApiOperation(value = &quot;同步菜单&quot;)@GetMapping(&quot;syncMenu&quot;)public Result createMenu() { menuService.syncMenu(); return Result.ok();} # 3.4 前端实现 # 3.4.1、api 接口 在 api/wechat/menu.js 添加 123456syncMenu() { return request({ url: `${api_name}/syncMenu`, method: `get` })}, # 3.4.2、菜单列表添加同步功能 1、添加按钮 1&lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; @click=&quot;syncMenu&quot; &gt;同步菜单&lt;/el-button&gt; 2、添加方法 12345678910111213141516syncMenu() { this.$confirm('你确定上传菜单吗, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' }).then(() =&gt; { return menuApi.syncMenu() }).then((response) =&gt; { this.$message.success(response.message) }).catch(error =&gt; { console.log('error', error) if (error === 'cancel') { this.$message.info('取消上传') } })} # 4、删除推送菜单 # 4.1、删除接口 # 4.1.1、service 接口 1void removeMenu(); # 4.1.2、service 接口实现 12345@SneakyThrows@Overridepublic void removeMenu() { wxMpService.getMenuService().menuDelete();} # 4.1.3、controller 接口 1234567@PreAuthorize(&quot;hasAuthority('bnt.menu.removeMenu')&quot;)@ApiOperation(value = &quot;删除菜单&quot;)@DeleteMapping(&quot;removeMenu&quot;)public Result removeMenu() { menuService.removeMenu(); return Result.ok();} # 4.2、前端实现 # 4.2.1、api 接口 在 api/wechat/menu.js 添加 123456removeMenu() { return request({ url: `${api_name}/removeMenu`, method: `delete` }) } # 4.2.2、菜单列表添加同步功能 1、添加按钮 1&lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; @click=&quot;removeMenu&quot;&gt;删除菜单&lt;/el-button&gt; 2、添加方法 12345removeMenu() { menuApi.removeMenu().then(response =&gt; { this.$message.success('菜单已删除') })} # 三、微信授权登录 当前后台员工账号与微信账号是没有关联的，因此在点击微信菜单时，要判断是否登录，如果是第一次访问则弹出关联层，建立微信账号与员工账号的绑定，即：通过员工手机号码与微信 openId 建立绑定，后续进入就知道用户身份了。 # 1、服务器端接口开发 # 1.1、配置内网穿透 (ngrok) # 1.1.1、注册用户 网址：https://ngrok.cc/login/register # 1.1.2、实名认证 （1）注册成功之后，登录系统，进行实名认证，认证费 2 元，认证通过后才能开通隧道 # 1.1.3、开通隧道 （1）选择隧道管理 -&gt; 开通隧道 最后一个是免费服务器，建议选择付费服务器，10 元 / 月，因为免费服务器使用人数很多，经常掉线 （2）点击立即购买 -&gt; 输入相关信息 （3）开通成功后，查看开通的隧道 这里开通了两个隧道，一个用于后端接口调用，一个用于公众号前端调用 # 1.1.4、启动隧道 （1）下载客户端工具 （2）选择 windows 版本 （3）解压，找到 bat 文件，双击启动 （4）输入隧道 id，多个使用逗号隔开，最后回车就可以启动 # 1.2、配置 “授权回调页面域名” 在 “[网页授权获取用户基本信息]” 后面，点击 “修改”，添加 “授权回调页面域名”（本地使用内网穿透地址） # 1.3、配置授权回调获取用户信息接口地址 12345wechat: mpAppId: wx13db7dcf69bq1233 mpAppSecret: de3d7888d30febf84b64d041231e4027 # 授权回调获取用户信息接口地址 userInfoUrl: http://ggkt2.vipgz1.91tunnel.com/admin/wechat/userInfo # 1.4、controller 接口 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package com.atguigu.wechat.controller;import com.alibaba.fastjson.JSON;import com.atguigu.common.jwt.JwtHelper;import com.atguigu.common.result.Result;import com.atguigu.model.system.SysUser;import com.atguigu.system.service.SysUserService;import com.atguigu.vo.wechat.BindPhoneVo;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import me.chanjar.weixin.common.api.WxConsts;import me.chanjar.weixin.common.bean.WxOAuth2UserInfo;import me.chanjar.weixin.common.bean.oauth2.WxOAuth2AccessToken;import me.chanjar.weixin.mp.api.WxMpService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.net.URLEncoder;@Controller@RequestMapping(&quot;/admin/wechat&quot;)@Slf4jpublic class WechatController { @Resource private SysUserService sysUserService; @Autowired private WxMpService wxMpService; @Value(&quot;${wechat.userInfoUrl}&quot;) private String userInfoUrl; @GetMapping(&quot;/authorize&quot;) public String authorize(@RequestParam(&quot;returnUrl&quot;) String returnUrl, HttpServletRequest request) { //由于授权回调成功后，要返回原地址路径，原地址路径带“#”号，当前returnUrl获取带“#”的url获取不全，因此前端把“#”号替换为“guiguoa”了，这里要还原一下 String redirectURL = wxMpService.getOAuth2Service().buildAuthorizationUrl(userInfoUrl, WxConsts.OAuth2Scope.SNSAPI_USERINFO, URLEncoder.encode(returnUrl.replace(&quot;guiguoa&quot;, &quot;#&quot;))); log.info(&quot;【微信网页授权】获取code,redirectURL={}&quot;, redirectURL); return &quot;redirect:&quot; + redirectURL; } @GetMapping(&quot;/userInfo&quot;) public String userInfo(@RequestParam(&quot;code&quot;) String code, @RequestParam(&quot;state&quot;) String returnUrl) throws Exception { log.info(&quot;【微信网页授权】code={}&quot;, code); log.info(&quot;【微信网页授权】state={}&quot;, returnUrl); WxOAuth2AccessToken accessToken = wxMpService.getOAuth2Service().getAccessToken(code); String openId = accessToken.getOpenId(); log.info(&quot;【微信网页授权】openId={}&quot;, openId); WxOAuth2UserInfo wxMpUser = wxMpService.getOAuth2Service().getUserInfo(accessToken, null); log.info(&quot;【微信网页授权】wxMpUser={}&quot;, JSON.toJSONString(wxMpUser)); SysUser sysUser = sysUserService.getOne(new LambdaQueryWrapper&lt;SysUser&gt;().eq(SysUser::getOpenId, openId)); String token = &quot;&quot;; //null != sysUser 说明已经绑定，反之为建立账号绑定，去页面建立账号绑定 if(null != sysUser) { token = JwtHelper.createToken(sysUser.getId(), sysUser.getUsername()); } if(returnUrl.indexOf(&quot;?&quot;) == -1) { return &quot;redirect:&quot; + returnUrl + &quot;?token=&quot; + token + &quot;&amp;openId=&quot; + openId; } else { return &quot;redirect:&quot; + returnUrl + &quot;&amp;token=&quot; + token + &quot;&amp;openId=&quot; + openId; } } @ApiOperation(value = &quot;微信账号绑定手机&quot;) @PostMapping(&quot;bindPhone&quot;) @ResponseBody public Result bindPhone(@RequestBody BindPhoneVo bindPhoneVo) { SysUser sysUser = sysUserService.getOne(new LambdaQueryWrapper&lt;SysUser&gt;().eq(SysUser::getPhone, bindPhoneVo.getPhone())); if(null != sysUser) { sysUser.setOpenId(bindPhoneVo.getOpenId()); sysUserService.updateById(sysUser); String token = JwtHelper.createToken(sysUser.getId(), sysUser.getUsername()); return Result.ok(token); } else { return Result.fail(&quot;手机号码不存在，绑定失败&quot;); } }} # 1.5、排除拦截 在 WebSecurityConfig 类配置排除拦截 12345678910111213/** * 配置哪些请求不拦截 * 排除swagger相关请求 * @param web * @throws Exception */ @Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(&quot;/admin/modeler/**&quot;,&quot;/diagram-viewer/**&quot;,&quot;/editor-app/**&quot;,&quot;/*.html&quot;, &quot;/admin/processImage/**&quot;, &quot;/admin/wechat/authorize&quot;,&quot;/admin/wechat/userInfo&quot;,&quot;/admin/wechat/bindPhone&quot;, &quot;/favicon.ico&quot;,&quot;/swagger-resources/**&quot;, &quot;/webjars/**&quot;, &quot;/v2/**&quot;, &quot;/swagger-ui.html/**&quot;, &quot;/doc.html&quot;); } # 2、移动端前端处理 # 2.1、添加 api 接口 在 src/api/userInfo.js 添加方法 1234567bindPhone(bindPhoneVo) { return request({ url: `/admin/wechat/bindPhone`, method: 'post', data: bindPhoneVo })}, # 2.2、绑定关系 由于移动端所有页面都需要授权登录后在可以访问，因此我们把处理业务放到入口页面处理，scr/App.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-view /&gt; &lt;el-dialog title=&quot;绑定手机&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;80%&quot; &gt; &lt;el-form ref=&quot;dataForm&quot; :model=&quot;bindPhoneVo&quot; size=&quot;small&quot;&gt; &lt;h4&gt;绑定你的手机号，建立云尚办公系统关联关系&lt;/h4&gt; &lt;el-form-item label=&quot;手机号码&quot;&gt; &lt;el-input v-model=&quot;bindPhoneVo.phone&quot;/&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-check&quot; @click=&quot;saveBind()&quot; size=&quot;small&quot;&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import userInfoApi from '@/api/userInfo'export default { data() { return { show: true, dialogVisible: false, bindPhoneVo: { openId: '', phone: '' } }; }, created() { // 处理微信授权登录 this.wechatLogin(); }, methods: { wechatLogin() { // 处理微信授权登录 let token = this.getQueryString('token') || ''; let openId = this.getQueryString('openId') || ''; // token === '' &amp;&amp; openId != '' 只要这种情况，未绑定账号 if(token === '' &amp;&amp; openId != '') { // 绑定账号 this.bindPhoneVo.openId = openId this.dialogVisible = true } else { // 如果绑定了，授权登录直接返回token if(token !== '') { window.localStorage.setItem('token', token); } token = window.localStorage.getItem('token') || ''; if (token == '') { let url = window.location.href.replace('#', 'guiguoa') window.location = 'http://oa.atguigu.cn/admin/wechat/authorize?returnUrl=' + url } } }, saveBind() { if(this.bindPhoneVo.phone.length != 11) { alert('手机号码格式不正确') return } userInfoApi.bindPhone(this.bindPhoneVo).then(response =&gt; { window.localStorage.setItem('token', response.data); this.dialogVisible = false window.location = 'http://oa.atguigu.cn' }) }, getQueryString (paramName) { if(window.location.href.indexOf('?') == -1) return ''; let searchString = window.location.href.split('?')[1]; let i, val, params = searchString.split(&quot;&amp;&quot;); for (i=0;i&lt;params.length;i++) { val = params[i].split(&quot;=&quot;); if (val[0] == paramName) { return val[1]; } } return ''; } }};&lt;/script&gt;&lt;style lang=&quot;scss&quot;&gt;#app { font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #2c3e50;}&lt;/style&gt; # 2.3、添加微信 js 引用 在 public/index.html 添加 js 引用 1&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.4.0.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; # 2.4、调整 request.js 12345678910111213141516171819202122232425262728293031323334353637383940414243import axios from &quot;axios&quot;;// 创建axios实例const service = axios.create({ baseURL: &quot;http://oa.atguigu.cn&quot;, // api 的 base_url timeout: 30000 // 请求超时时间});// http request 拦截器service.interceptors.request.use(config =&gt; { let token = window.localStorage.getItem(&quot;token&quot;) || &quot;&quot;; if (token != &quot;&quot;) { config.headers[&quot;token&quot;] = token; } return config; }, err =&gt; { return Promise.reject(err); });// http response 拦截器service.interceptors.response.use(response =&gt; { if (response.data.code == 208) { // debugger // 替换# 后台获取不到#后面的参数 let url = window.location.href.replace('#', 'guiguoa') window.location = 'http://oa.atguigu.cn/admin/wechat/authorize?returnUrl=' + url } else { if (response.data.code == 200) { return response.data; } else { // 209没有权限 系统会自动跳转授权登录的，已在App.vue处理过，不需要提示 if (response.data.code != 209) { alert(response.data.message || &quot;error&quot;); } return Promise.reject(response); } } }, error =&gt; { return Promise.reject(error.response); // 返回接口返回的错误信息 });export default service; # 2.5、测试 # 四、消息推送 有待审批消息，我们需要通知审批人审批信息，审批人审批过了，我们要通知提交申请人查看信息。 消息推送我们使用 “微信模板消息” 接口 # 1、配置微信模板消息 1、待处理审批： 审批编号： 提交时间： 2、审批已处理： 审批编号： 提交时间： 当前审批人： 审批状态： # 2、定义接口 123456789101112131415161718192021package com.atguigu.wechat.service;public interface MessageService { /** * 推送待审批人员 * @param processId * @param userId * @param taskId */ void pushPendingMessage(Long processId, Long userId, String taskId); /** * 审批后推送提交审批人员 * @param processId * @param userId * @param status */ void pushProcessedMessage(Long processId, Long userId, Integer status);} # 3、service 接口实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.atguigu.wechat.service.impl;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.atguigu.model.process.Process;import com.atguigu.model.process.ProcessTemplate;import com.atguigu.model.system.SysUser;import com.atguigu.process.service.ProcessService;import com.atguigu.process.service.ProcessTemplateService;import com.atguigu.security.custom.LoginUserInfoHelper;import com.atguigu.system.service.SysUserService;import com.atguigu.wechat.service.MessageService;import lombok.SneakyThrows;import lombok.extern.slf4j.Slf4j;import me.chanjar.weixin.mp.api.WxMpService;import me.chanjar.weixin.mp.bean.template.WxMpTemplateData;import me.chanjar.weixin.mp.bean.template.WxMpTemplateMessage;import org.joda.time.DateTime;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import javax.annotation.Resource;import java.util.Map;@Slf4j@Servicepublic class MessageServiceImpl implements MessageService { @Resource private WxMpService wxMpService; @Resource private ProcessService processService; @Resource private ProcessTemplateService processTemplateService; @Resource private SysUserService sysUserService; @SneakyThrows @Override public void pushPendingMessage(Long processId, Long userId, String taskId) { Process process = processService.getById(processId); ProcessTemplate processTemplate = processTemplateService.getById(process.getProcessTemplateId()); SysUser sysUser = sysUserService.getById(userId); SysUser submitSysUser = sysUserService.getById(process.getUserId()); String openid = sysUser.getOpenId(); //方便测试，给默认值（开发者本人的openId） if(StringUtils.isEmpty(openid)) { openid = &quot;omwf25izKON9dktgoy0dogqvnGhk&quot;; } WxMpTemplateMessage templateMessage = WxMpTemplateMessage.builder() .toUser(openid)//要推送的用户openid .templateId(&quot;KvOVeW7jz4-DZgQ_WuXjMZO5I4pPA7L7fflVNwC_ZQg&quot;)//模板id .url(&quot;http://oa.atguigu.cn/#/show/&quot;+processId+&quot;/&quot;+taskId)//点击模板消息要访问的网址 .build(); JSONObject jsonObject = JSON.parseObject(process.getFormValues()); JSONObject formShowData = jsonObject.getJSONObject(&quot;formShowData&quot;); StringBuffer content = new StringBuffer(); for (Map.Entry entry : formShowData.entrySet()) { content.append(entry.getKey()).append(&quot;：&quot;).append(entry.getValue()).append(&quot;\\n &quot;); } templateMessage.addData(new WxMpTemplateData(&quot;first&quot;, submitSysUser.getName()+&quot;提交了&quot;+processTemplate.getName()+&quot;审批申请，请注意查看。&quot;, &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;keyword1&quot;, process.getProcessCode(), &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;keyword2&quot;, new DateTime(process.getCreateTime()).toString(&quot;yyyy-MM-dd HH:mm:ss&quot;), &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;content&quot;, content.toString(), &quot;#272727&quot;)); String msg = wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage); log.info(&quot;推送消息返回：{}&quot;, msg); } @SneakyThrows @Override public void pushProcessedMessage(Long processId, Long userId, Integer status) { Process process = processService.getById(processId); ProcessTemplate processTemplate = processTemplateService.getById(process.getProcessTemplateId()); SysUser sysUser = sysUserService.getById(userId); SysUser currentSysUser = sysUserService.getById(LoginUserInfoHelper.getUserId()); String openid = sysUser.getOpenId(); if(StringUtils.isEmpty(openid)) { openid = &quot;omwf25izKON9dktgoy0dogqvnGhk&quot;; } WxMpTemplateMessage templateMessage = WxMpTemplateMessage.builder() .toUser(openid)//要推送的用户openid .templateId(&quot;I0kVeto7T0WIDP6tyoHh-hx83wa9_pe7Nx9eT93-6sc&quot;)//模板id .url(&quot;http://oa.atguigu.cn/#/show/&quot;+processId+&quot;/0&quot;)//点击模板消息要访问的网址 .build(); JSONObject jsonObject = JSON.parseObject(process.getFormValues()); JSONObject formShowData = jsonObject.getJSONObject(&quot;formShowData&quot;); StringBuffer content = new StringBuffer(); for (Map.Entry entry : formShowData.entrySet()) { content.append(entry.getKey()).append(&quot;：&quot;).append(entry.getValue()).append(&quot;\\n &quot;); } templateMessage.addData(new WxMpTemplateData(&quot;first&quot;, &quot;你发起的&quot;+processTemplate.getName()+&quot;审批申请已经被处理了，请注意查看。&quot;, &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;keyword1&quot;, process.getProcessCode(), &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;keyword2&quot;, new DateTime(process.getCreateTime()).toString(&quot;yyyy-MM-dd HH:mm:ss&quot;), &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;keyword3&quot;, currentSysUser.getName(), &quot;#272727&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;keyword4&quot;, status == 1 ? &quot;审批通过&quot; : &quot;审批拒绝&quot;, status == 1 ? &quot;#009966&quot; : &quot;#FF0033&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;content&quot;, content.toString(), &quot;#272727&quot;)); String msg = wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage); log.info(&quot;推送消息返回：{}&quot;, msg); }} # 4、推送调用 # 4.1、启动流程实例接口 代码片段 12@Autowiredprivate MessageService messageService; 123456789101112131415161718192021@Transactionalpublic Process startUp(ProcessFormVo processFormVo) { ... //计算下一个审批人 List&lt;Task&gt; taskList = this.getCurrentTaskList(processInstanceId); if (!CollectionUtils.isEmpty(taskList)) { List&lt;String&gt; assigneeList = new ArrayList&lt;&gt;(); for(Task task : taskList) { SysUser sysUser = sysUserService.getByUsername(task.getAssignee()); assigneeList.add(sysUser.getName()); //推送消息给下一个审批人 messageService.pushPendingMessage(process.getId(), sysUser.getId(), task.getId()); } process.setDescription(&quot;等待&quot; + StringUtils.join(assigneeList.toArray(), &quot;,&quot;) + &quot;审批&quot;); } processMapper.updateById(process); return process;} # 4.2、审批接口 代码片段 12345678910111213141516171819202122232425public void approve(ApprovalVo approvalVo) { ... //计算下一个审批人 Process process = this.getById(approvalVo.getProcessId()); List&lt;Task&gt; taskList = this.getCurrentTaskList(process.getProcessInstanceId()); if (!CollectionUtils.isEmpty(taskList)) { List&lt;String&gt; assigneeList = new ArrayList&lt;&gt;(); for(Task task : taskList) { SysUser sysUser = sysUserService.getByUsername(task.getAssignee()); assigneeList.add(sysUser.getName()); //推送消息给下一个审批人 messageService.pushPendingMessage(process.getId(), sysUser.getId(), task.getId()); } process.setDescription(&quot;等待&quot; + StringUtils.join(assigneeList.toArray(), &quot;,&quot;) + &quot;审批&quot;); process.setStatus(1); } else { ... } //推送消息给申请人 messageService.pushProcessedMessage(process.getId(), process.getUserId(), approvalVo.getStatus()); this.updateById(process);}","link":"/2023/07/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"title":"","text":"# 云尚办公系统：Activiti 入门 # 一、了解工作流 # 1、什么是工作流 工作流（Workflow），就是通过计算机对业务流程自动化执行管理。它主要解决的是 “使在多个参与者之间按照某种预定义的规则自动进行传递文档、信息或任务的过程，从而实现某个预期的业务目标，或者促使此目标的实现”。** 通俗来讲，就是业务上一个完整的审批流程。** 例如员工的请假，出差，外出采购，合同审核等等，这些过程，都是一个工作流。 # 2、工作流引擎 对于工作流的处理，如果采用原始的方式，我们需要拿着各种文件到各个负责人那里去签字，需要在多个部门之间不断审批，这种方式费时费力。而我们可以借助软件系统来协助我们处理这些审批流程，这样就出现了工作流系统，使用工作流系统后可以极大的提高工作效率。 在学习工作流的过程中，我们肯定看到过这个模型：填写请假单 -&gt; 部门经理审批 -&gt; 总经理审批 -&gt; 人事备案。 （1）要实现上述的流程，我们自己可以通过字段标识来实现这个审批效果，在业务表中加个字段，比如填写请假单用 1 标识，部门经理用 2 标识，总经理用 3 标识，人事备案用 4 标识，好像看起来没啥问题，也实现了审批效果。可是一旦我们的流程出现了变化，这个时候我们就需要改动我们的代码了，这显然是不可取的，那么有没有专业的方式来实现工作流的管理呢？并且可以做到业务流程变化之后，我们的程序可以不用改变，如果可以实现这样的效果，那么我们的业务系统的适应能力就得到了极大提升。在这样的背景下，就出现了工作流引擎。 为什么使用工作流引擎，能实现业务流程改变，不用修改代码，流程还能自动推进？ （1）我们先来说说为什么流程改变，不用修改代码：我们的工作流引擎都实现了一个规范，这个规范要求我们的流程管理与状态字段无关，始终都是读取业务流程图的下一个节点。当业务更新的时候我们只需要更新业务流程图就行了。这就实现了业务流程改变，不用修改代码。 （2）再来说说流程自动推进，这个原理就更简单了，就拿上面的请假模型来说，工作流引擎会用一张表来记录当前处在的节点。当填写完请假单后肯定是要轮到部门经理来审批了，所以我们一旦完成了请假单填写那么这条记录将会被从这张表删除掉，并且会把下一个节点部门经理的信息插入到这张表中，当我们用部门经理的信息去这张表中查询的时候就能查出部门经理相关的审批的信息了，以此类推，这样层层递进，就实现了流程的自动递交了。 # 3、常见工作流引擎 主流的框架有：Activiti、jBPM、Camunda 、Flowable 、还有我们国产的盘古 BPM、云程 # 4、Activiti7 概述 # 4.1、Activiti 介绍 activiti 是一个工作流引擎，可以将业务系统中复杂的业务流程抽取出来，使用专门的建模语言 BPMN 进行定义，业务流程按照预先定义的流程进行执行。实现了系统的流程由 activiti 进行管理，减少业务系统由于流程变更进行系统升级改造的工作流量，从而提高系统的健壮性，同时也减少了系统开发维护成本。 官方网站：https://www.activiti.org # 4.2、建模语言 BPMN BPM（Business Process Management）即业务流程管理，是一种规范化的构造端到端的业务流程，以持续提高组织业务效率 BPM 软件就是根据企业中业务环境的变化，推进人与人之间、人与系统之间以及系统与系统之间的整理及调整的经营方法与解决方案的 IT 工具。使用 BPM 软件对企业内部及外部的业务流程的整个生命周期进行建模、自动化、管理监控和优化，可以降低企业成本，提高利润 BPMN（Business Process Model AndNotation）即业务流程模型和符号，是一套标准的业务流程建模符号，使用 BPMN 提供的符号可以创建业务流程。Activit 就是使用 BPMN 进行流程建模、流程执行管理的 BPMN2.0 是业务流程建模符号 2.0 的缩写，它由 Business Process Management Initiative 这个非营利协会创建并不断发展。BPMN2.0 是使用一些符号来明确业务流程设计流程图的一套符号规范，能增进业务建模时的沟通效率。目前 BPMN2.0 是最新的版本，它用于在 BPM 上下文中进行布局和可视化的沟通 BPMN2.0 的基本符号主要包含： 事件 Event 开始：表示一个流程的开始 中间：发生的开始和结束事件之间，影响处理的流程 结束：表示该过程结束 活动 Activities 活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程；其次，你还可以为活动指定不同的类型。常见活动如下： 网关 GateWay 用于表示流程的分支与合并，有几种常用网关需要了解： 排他网关：只有一条路径会被选择 xxxxxxxxxx &lt;el-button type=“success” icon=“el-icon-plus” size=“mini” @click=“add” :disabled=“$hasBP (‘bnt.sysRole.add’) === false”&gt; 添 加vue 包容网关：可以同时执行多条线路，也可以在网关上设置条件 事件网关：专门为中间捕获事件设置的，允许设置多个输出流指向多个不同的中间捕获事件。当流程执行到事件网关后，流程处于等待状态，需要等待抛出事件才能将等待状态转换为活动状态 流向 Flow 流是连接两个流程节点的连线，常见的流向包含以下几种： 顺序流：用一个带实心箭头的实心线表示，用于指定活动执行的顺序 信息流：用一条带箭头的虚线表示，用于描述两个独立的业务参与者（业务实体 / 业务角色）之间发送和接受的消息流动 关联：用一根带有线箭头的点线表示，用于将相关的数据、文本和其他人工信息与流对象联系起来。用于展示活动的输入和输出 流程示例： # 4.3、Activiti 使用流程 第一步： 引入依赖并初始化数据库 既然 activiti 是一个框架，那么我们肯定是需要引入对应的 jar 包坐标的，具体参考代码中的。 第二步： 通过工具绘画流程图 使用 activiti 流程建模工具 (activity-designer) 定义业务流程 (.bpmn 文件) .bpmn 文件就是业务流程定义文件，通过 xml 定义业务流程。 第三步：流程定义部署； 向 activiti 部署业务流程定义（.bpmn 文件），使用 activiti 提供的 api 向 activiti 中部署.bpmn 文件， 通俗来讲，就是让 activiti 认识要使用的流程 第四步： 启动一个流程实例（ProcessInstance） 启动一个流程实例表示开始一次业务流程的运行，比如员工请假流程部署完成，如果张三要请假就可以启动一个流程实例，如果李四要请假也启动一个流程实例，两个流程的执行互相不影响，就好比定义一个 java 类，实例化两个对象一样，部署的流程就好比 java 类，启动一个流程实例就好比 new 一个 java 对象 第五步： 用户查询待办任务 (Task) 因为现在系统的业务流程已经交给 activiti 管理，通过 activiti 就可以查询当前流程执行到哪了，当前用户需要办理什么任务了，这些 activiti 帮我们管理了。实际上我们学习 activiti 也只是学习它的 API 怎么使用，因为很多功能 activiti 都已经封装好了，我们会调用就行了 第六步： 用户办理任务 用户查询待办任务后，就可以办理某个任务，如果这个任务办理完成还需要其它用户办理，比如请假单创建后由部门经理审核，这个过程也是由 activiti 帮我们完成了，不需要我们在代码中硬编码指定下一个任务办理人了 第七步： 流程结束 当任务办理完成没有下一个任务节点了，这个流程实例就完成了。 # 二、Activiti7 # 1、Activiti 使用 # 1.1、数据库支持 Activiti 运行必须要有数据库的支持，支持的数据库有：mysql、oracle、postgres、mssql、db2、h2 # 1.2、Activiti 环境 我们直接在当前项目：guigu-oa-parent 做 Activiti 入门讲解 # 1.2.1、引入依赖 123456789101112&lt;!--引入activiti的springboot启动器 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.activiti&lt;/groupId&gt; &lt;artifactId&gt;activiti-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;7.1.0.M6&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 说明：Activiti7 与 SpringBoot 整合后，默认集成了 SpringSecurity 安全框架，当前我们项目已经集成过了 SpringSecurity，后续案例设置审批人时都必须是系统用户，Activiti 框架会检查用户是否存在，否则会出现异常，后续大家可以在案例中测试。 # 1.2.2、添加配置 数据源项目已经添加，只需要如下配置即可 12345678910111213141516spring: activiti: # false:默认，数据库表不变，但是如果版本不对或者缺失表会抛出异常（生产使用） # true:表不存在，自动创建（开发使用） # create_drop: 启动时创建，关闭时删除表（测试使用） # drop_create: 启动时删除表,在创建表 （不需要手动关闭引擎） database-schema-update: true #监测历史表是否存在，activities7默认不开启历史表 db-history-used: true #none：不保存任何历史数据，流程中这是最高效的 #activity：只保存流程实例和流程行为 #audit：除了activity，还保存全部的流程任务以及其属性，audit为history默认值 #full：除了audit、还保存其他全部流程相关的细节数据，包括一些流程参数 history-level: full #校验流程文件，默认校验resources下的process 文件夹的流程文件 check-process-definitions: true # 1.2.3、启动项目 启动项目，即可生成项目数据库表 # 1.2.4、数据库表介绍 Activiti 的运行支持必须要有这 25 张表的支持，主要是在业务流程运行过程中，记录参与流程的用户主体，用户组信息，以及流程的定义，流程执行时的信息，和流程的历史信息等等 1、 表的命名规则和作用 观察创建的表，我们发现 Activiti 的表都以 act_ 开头，紧接着是表示表的用途的两个字母标识，也和 Activiti 所提供的服务的 API 对应： ACT_RE：RE 表示 repository，这个前缀的表包含了流程定义和流程静态资源 （图片、规则、等等） ACT_RU：RU 表示 runtime，这些表运行时，会包含流程实例、任务、变量、异步任务等流程业务进行中的数据。Activiti 只在流程实例执行过程中保存这些数据，在流程结束时就会删除这些记录。这样表就可以一直保持很小的体积，并且速度很快 ACT_HI：HI 表示 history，这些表包含一些历史数据，比如历史流程实例、变量、任务等等 ACT_GE：GE 表示 general，通用数据 2、Activiti 数据表介绍 表分类 表名 解释 一般数据 [ACT_GE_BYTEARRAY] 通用的流程定义和流程资源 [ACT_GE_PROPERTY] 系统相关属性 流程历史记录 [ACT_HI_ACTINST] 历史的流程实例 [ACT_HI_ATTACHMENT] 历史的流程附件 [ACT_HI_COMMENT] 历史的说明性信息 [ACT_HI_DETAIL] 历史的流程运行中的细节信息 [ACT_HI_IDENTITYLINK] 历史的流程运行过程中用户关系 [ACT_HI_PROCINST] 历史的流程实例 [ACT_HI_TASKINST] 历史的任务实例 [ACT_HI_VARINST] 历史的流程运行中的变量信息 流程定义表 [ACT_RE_DEPLOYMENT] 部署单元信息 [ACT_RE_MODEL] 模型信息 [ACT_RE_PROCDEF] 已部署的流程定义 运行实例表 [ACT_RU_EVENT_SUBSCR] 运行时事件 [ACT_RU_EXECUTION] 运行时流程执行实例 [ACT_RU_IDENTITYLINK] 运行时用户关系信息，存储任务节点与参与者的相关信息 [ACT_RU_JOB] 运行时作业 [ACT_RU_TASK] 运行时任务 [ACT_RU_VARIABLE] 运行时变量表 # 1.3、Activiti 常用 Service 服务接口 简单介绍一下各个 Service 的实现类： RepositoryService Activiti 的资源管理类，该服务负责部署流程定义，管理流程资源。在使用 Activiti 时，一开始需要先完成流程部署，即将使用建模工具设计的业务流程图通过 RepositoryService 进行部署 RuntimeService Activiti 的流程运行管理类，用于开始一个新的流程实例，获取关于流程执行的相关信息。流程定义用于确定一个流程中的结构和各个节点间行为，而流程实例则是对应的流程定义的一个执行，可以理解为 Java 中类和对象的关系 TaskService Activiti 的任务管理类，用于处理业务运行中的各种任务，例如查询分给用户或组的任务、创建新的任务、分配任务、确定和完成一个任务 HistoryService Activiti 的历史管理类，可以查询历史信息。执行流程时，引擎会保存很多数据，比如流程实例启动时间、任务的参与者、完成任务的时间、每个流程实例的执行路径等等。这个服务主要通过查询功能来获得这些数据 ManagementService Activiti 的引擎管理类，提供了对 Activiti 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Activiti 系统的日常维护 # 1.4、流程设计工具 IDEA 版本小于等于 2019，可使用 Activiti 插件 actiBPM，大于该版本的 IDEA 可使用 Activiti BPMN visualizer 插件绘制流程设计。 今天我们主角是：Activiti Modeler Activiti Modeler 是 Activiti 官方提供的一款在线流程设计的前端插件，开发人员可以方便在线进行流程设计，保存流程模型，部署至流程定义等等，后续我们的项目也是集成 Activiti Modeler 绘制流程定义。 # 1.4.1、下载 activiti-explorer 官网下载：https://www.activiti.org/get-started # 1.4.2、解压获取部署包 解压 activiti-5.22.0.zip，在 activiti-5.22.0\\wars 目录下获取 activiti-explorer.war # 1.4.3、部署 activiti-explorer.war 将 activiti-explorer.war 放到 tomcat 部署目录，启动 tomcat # 1.4.4、访问 activiti-explorer http://localhost:8080/activiti-explorer 默认登录账号：kermit kermit 上面有很多功能，我们关注流程设计即可，如下图： 点击上图：流程 --&gt; 新建模型 --&gt; 输入模型名称（请假）–&gt; 创建 # 2、Activiti 流程操作 # 2.1、流程定义 我们定义一个请假流程 # 2.1.1、新建模型 # 2.1.2、开始节点 # 2.1.3、任务节点 # 2.1.4、结束节点 # 2.1.5、设置节点属性 指定标签名称：张三审批，节点任务负责人：zhangsan 指定标签名称：李四审批，节点任务负责人：lisi # 2.1.5、设置流程定义 key # 2.1.6、保存流程定义模型 # 2.1.7、下载流程定义文件 下载文件为：qingjia.bpmn20.xml 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;definitions xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:activiti=&quot;http://activiti.org/bpmn&quot; xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot; xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot; expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot; targetNamespace=&quot;http://www.activiti.org/processdef&quot;&gt; &lt;process id=&quot;qingjia&quot; isExecutable=&quot;true&quot;&gt; &lt;startEvent id=&quot;sid-14A3E2A6-84E4-49E0-BF92-3DABD741430B&quot;&gt;&lt;/startEvent&gt; &lt;userTask id=&quot;sid-38632C81-C407-4F0D-944D-FC30F90637A3&quot; name=&quot;张三审批&quot; activiti:assignee=&quot;zhangsan&quot;&gt;&lt;/userTask&gt; &lt;sequenceFlow id=&quot;sid-081A176E-6756-4C4C-B36C-2649B12CFC5D&quot; sourceRef=&quot;sid-14A3E2A6-84E4-49E0-BF92-3DABD741430B&quot; targetRef=&quot;sid-38632C81-C407-4F0D-944D-FC30F90637A3&quot;&gt;&lt;/sequenceFlow&gt; &lt;userTask id=&quot;sid-655780D5-8492-494F-9E30-2CFD6691E98D&quot; name=&quot;李四审批&quot; activiti:assignee=&quot;lisi&quot;&gt;&lt;/userTask&gt; &lt;sequenceFlow id=&quot;sid-7DCE821D-4AE0-4F27-9811-80B575E7A758&quot; sourceRef=&quot;sid-38632C81-C407-4F0D-944D-FC30F90637A3&quot; targetRef=&quot;sid-655780D5-8492-494F-9E30-2CFD6691E98D&quot;&gt;&lt;/sequenceFlow&gt; &lt;endEvent id=&quot;sid-7EE28419-BC61-49AC-8990-C63C4D2F7C0D&quot;&gt;&lt;/endEvent&gt; &lt;sequenceFlow id=&quot;sid-2E583A5C-265A-4C05-B5E1-7F5DB98291F1&quot; sourceRef=&quot;sid-655780D5-8492-494F-9E30-2CFD6691E98D&quot; targetRef=&quot;sid-7EE28419-BC61-49AC-8990-C63C4D2F7C0D&quot;&gt;&lt;/sequenceFlow&gt; &lt;/process&gt; &lt;bpmndi:BPMNDiagram id=&quot;BPMNDiagram_qingjia&quot;&gt; &lt;bpmndi:BPMNPlane bpmnElement=&quot;qingjia&quot; id=&quot;BPMNPlane_qingjia&quot;&gt; &lt;bpmndi:BPMNShape bpmnElement=&quot;sid-14A3E2A6-84E4-49E0-BF92-3DABD741430B&quot; id=&quot;BPMNShape_sid-14A3E2A6-84E4-49E0-BF92-3DABD741430B&quot;&gt; &lt;omgdc:Bounds height=&quot;30.0&quot; width=&quot;30.0&quot; x=&quot;93.5&quot; y=&quot;75.0&quot;&gt;&lt;/omgdc:Bounds&gt; &lt;/bpmndi:BPMNShape&gt; &lt;bpmndi:BPMNShape bpmnElement=&quot;sid-38632C81-C407-4F0D-944D-FC30F90637A3&quot; id=&quot;BPMNShape_sid-38632C81-C407-4F0D-944D-FC30F90637A3&quot;&gt; &lt;omgdc:Bounds height=&quot;80.0&quot; width=&quot;100.0&quot; x=&quot;168.5&quot; y=&quot;50.0&quot;&gt;&lt;/omgdc:Bounds&gt; &lt;/bpmndi:BPMNShape&gt; &lt;bpmndi:BPMNShape bpmnElement=&quot;sid-655780D5-8492-494F-9E30-2CFD6691E98D&quot; id=&quot;BPMNShape_sid-655780D5-8492-494F-9E30-2CFD6691E98D&quot;&gt; &lt;omgdc:Bounds height=&quot;80.0&quot; width=&quot;100.0&quot; x=&quot;313.5&quot; y=&quot;50.0&quot;&gt;&lt;/omgdc:Bounds&gt; &lt;/bpmndi:BPMNShape&gt; &lt;bpmndi:BPMNShape bpmnElement=&quot;sid-7EE28419-BC61-49AC-8990-C63C4D2F7C0D&quot; id=&quot;BPMNShape_sid-7EE28419-BC61-49AC-8990-C63C4D2F7C0D&quot;&gt; &lt;omgdc:Bounds height=&quot;28.0&quot; width=&quot;28.0&quot; x=&quot;458.5&quot; y=&quot;76.0&quot;&gt;&lt;/omgdc:Bounds&gt; &lt;/bpmndi:BPMNShape&gt; &lt;bpmndi:BPMNEdge bpmnElement=&quot;sid-7DCE821D-4AE0-4F27-9811-80B575E7A758&quot; id=&quot;BPMNEdge_sid-7DCE821D-4AE0-4F27-9811-80B575E7A758&quot;&gt; &lt;omgdi:waypoint x=&quot;268.5&quot; y=&quot;90.0&quot;&gt;&lt;/omgdi:waypoint&gt; &lt;omgdi:waypoint x=&quot;313.5&quot; y=&quot;90.0&quot;&gt;&lt;/omgdi:waypoint&gt; &lt;/bpmndi:BPMNEdge&gt; &lt;bpmndi:BPMNEdge bpmnElement=&quot;sid-081A176E-6756-4C4C-B36C-2649B12CFC5D&quot; id=&quot;BPMNEdge_sid-081A176E-6756-4C4C-B36C-2649B12CFC5D&quot;&gt; &lt;omgdi:waypoint x=&quot;123.5&quot; y=&quot;90.0&quot;&gt;&lt;/omgdi:waypoint&gt; &lt;omgdi:waypoint x=&quot;168.5&quot; y=&quot;90.0&quot;&gt;&lt;/omgdi:waypoint&gt; &lt;/bpmndi:BPMNEdge&gt; &lt;bpmndi:BPMNEdge bpmnElement=&quot;sid-2E583A5C-265A-4C05-B5E1-7F5DB98291F1&quot; id=&quot;BPMNEdge_sid-2E583A5C-265A-4C05-B5E1-7F5DB98291F1&quot;&gt; &lt;omgdi:waypoint x=&quot;413.5&quot; y=&quot;90.0&quot;&gt;&lt;/omgdi:waypoint&gt; &lt;omgdi:waypoint x=&quot;458.5&quot; y=&quot;90.0&quot;&gt;&lt;/omgdi:waypoint&gt; &lt;/bpmndi:BPMNEdge&gt; &lt;/bpmndi:BPMNPlane&gt; &lt;/bpmndi:BPMNDiagram&gt;&lt;/definitions&gt; # 2.1.8、下载流程定义图片 单击右键上图图片，图片另存为：qingjia.png # 2.1.9、将资源文件放入项目 在 service-oa 模块 resources 下新建 process 资源文件夹 将 qingjia.bpmn20.xml 与 qingjia.png 放入 process 目录 # 2.2、流程定义部署 将上面在设计器中定义的流程部署到 activiti 数据库中，就是流程定义部署。通过调用 activiti 的 api 将流程定义的 bpmn 和 png 两个文件一个一个添加部署到 activiti 中，也可以将两个文件打成 zip 包进行部署。 # 2.2.1、单个文件部署方式 123456789101112131415161718192021222324252627282930package com.atguigu;import org.activiti.engine.RepositoryService;import org.activiti.engine.repository.Deployment;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class ProcessTest { @Autowired private RepositoryService repositoryService; @Test public void deployProcess() { // 流程部署 Deployment deploy = repositoryService.createDeployment() .addClasspathResource(&quot;process/qingjia.bpmn20.xml&quot;) .addClasspathResource(&quot;process/qingjia.png&quot;) .name(&quot;请假申请流程&quot;) .deploy(); System.out.println(deploy.getId()); System.out.println(deploy.getName()); }} # 2.2.2、压缩包部署方式 123456789101112131415161718@Testpublic void deployProcessByZip() { // 定义zip输入流 InputStream inputStream = this .getClass() .getClassLoader() .getResourceAsStream( &quot;process/qingjia.zip&quot;); ZipInputStream zipInputStream = new ZipInputStream(inputStream); // 流程部署 Deployment deployment = repositoryService.createDeployment() .addZipInputStream(zipInputStream) .name(&quot;请假申请流程&quot;) .deploy(); System.out.println(&quot;流程部署id：&quot; + deployment.getId()); System.out.println(&quot;流程部署名称：&quot; + deployment.getName());} # 2.2.3、操作数据库表 流程定义部署后操作 activiti 的 3 张表如下： act_re_deployment 流程定义部署表，每部署一次增加一条记录 act_re_procdef 流程定义表，部署每个新的流程定义都会在这张表中增加一条记录 act_ge_bytearray 流程资源表 # 2.3、启动流程实例 流程定义：将 bpmn 文件放到 activiti 的三张表中，好比是 java 中的一个类 流程实例：好比是 java 中的一个实例对象 (一个流程定义可以对应多个流程实例)，张三可以启动一个请假流程实例，李四也可以启动一个请假流程实例，他们互不影响 123456789101112@Autowiredprivate RuntimeService runtimeService;@Testpublic void startUpProcess() { //创建流程实例,我们需要知道流程定义的key ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;qingjia&quot;); //输出实例的相关信息 System.out.println(&quot;流程定义id：&quot; + processInstance.getProcessDefinitionId()); System.out.println(&quot;流程实例id：&quot; + processInstance.getId()); System.out.println(&quot;当前活动Id：&quot; + processInstance.getActivityId());} 操作数据表 act_hi_actinst 流程实例执行历史 act_hi_identitylink 流程的参与用户历史信息 act_hi_procinst 流程实例历史信息 act_hi_taskinst 流程任务历史信息 act_ru_execution 流程执行信息 act_ru_identitylink 流程的参与用户信息 act_ru_task 任务信息 # 2.4、查询任务 每个节点都配置了 Assignee，流程启动后，任务的负责人就可以查询自己当前需要处理的任务，查询出来的任务都是该用户的待办任务。 1234567891011121314151617181920@Autowiredprivate TaskService taskService;/** * 查询当前个人待执行的任务 */@Testpublic void findPendingTaskList() { //任务负责人 String assignee = &quot;zhangsan&quot;; List&lt;Task&gt; list = taskService.createTaskQuery() .taskAssignee(assignee)//只查询该任务负责人的任务 .list(); for (Task task : list) { System.out.println(&quot;流程实例id：&quot; + task.getProcessInstanceId()); System.out.println(&quot;任务id：&quot; + task.getId()); System.out.println(&quot;任务负责人：&quot; + task.getAssignee()); System.out.println(&quot;任务名称：&quot; + task.getName()); }} 说明： ​ 流程实例 id: 一个流程只有一个，标识这个流程 ​ 任务 id: 流程每进行到某个节点，就会给这个节点分配一个任务 id 输出结果如下： ​ 流程实例 id：d969f534-825e-11ed-95b4-7c57581a7819 ​ 任务 id：d96c3f28-825e-11ed-95b4-7c57581a7819 ​ 任务负责人：zhangsan ​ 任务名称：张三审批 # 2.5、处理当前任务 任务负责人查询待办任务，选择任务进行处理，完成任务。 123456789101112/** * 完成任务 */@Testpublic void completTask(){ Task task = taskService.createTaskQuery() .taskAssignee(&quot;zhangsan&quot;) //要查询的负责人 .singleResult();//返回一条 //完成任务,参数：任务id taskService.complete(task.getId());} 完成任务后，任务自动到下一个节点 # 2.6、查询已处理任务 1234567891011121314151617@Autowiredprivate HistoryService historyService;/** * 查询已处理历史任务 */@Testpublic void findProcessedTaskList() { //张三已处理过的历史任务 List&lt;HistoricTaskInstance&gt; list = historyService.createHistoricTaskInstanceQuery().taskAssignee(&quot;zhangsan&quot;).finished().list(); for (HistoricTaskInstance historicTaskInstance : list) { System.out.println(&quot;流程实例id：&quot; + historicTaskInstance.getProcessInstanceId()); System.out.println(&quot;任务id：&quot; + historicTaskInstance.getId()); System.out.println(&quot;任务负责人：&quot; + historicTaskInstance.getAssignee()); System.out.println(&quot;任务名称：&quot; + historicTaskInstance.getName()); }} # 2.7、其他接口（了解） 123456789101112131415161718192021222324252627282930/** * 查询流程定义 */@Testpublic void findProcessDefinitionList(){ List&lt;ProcessDefinition&gt; definitionList = repositoryService.createProcessDefinitionQuery() .orderByProcessDefinitionVersion() .desc() .list(); //输出流程定义信息 for (ProcessDefinition processDefinition : definitionList) { System.out.println(&quot;流程定义 id=&quot;+processDefinition.getId()); System.out.println(&quot;流程定义 name=&quot;+processDefinition.getName()); System.out.println(&quot;流程定义 key=&quot;+processDefinition.getKey()); System.out.println(&quot;流程定义 Version=&quot;+processDefinition.getVersion()); System.out.println(&quot;流程部署ID =&quot;+processDefinition.getDeploymentId()); }}/** * 删除流程定义 */public void deleteDeployment() { //部署id String deploymentId = &quot;82e3bc6b-81da-11ed-8e03-7c57581a7819&quot;; //删除流程定义，如果该流程定义已有流程实例启动则删除时出错 repositoryService.deleteDeployment(deploymentId); //设置true 级联删除流程定义，即使该流程有流程实例启动也可以删除，设置为false非级别删除方式 //repositoryService.deleteDeployment(deploymentId, true);} # 3、流程实例 # 3.1、什么是流程实例 流程定义 ProcessDefinition 和流程实例 ProcessInstance 是 Activiti 重要的概念，类似于 Java 类和 Java 实例的关系 启动一个流程实例表示开始一次业务流程的运行，比如员工请假流程部署完成，如果张三要请假就可以启动一个流程实例，如果李四要请假也启动一个流程实例，两个流程的执行互相不影响，就好比定义一个 java 类，实例化两个对象一样，部署的流程就好比 java 类，启动一个流程实例就好比 new 一个 java 对象 # 3.2、让实际业务与 activiti 表关联 (BusinessKey) 比如我们填写一个请假单，一定会有一个请假单的唯一标识，我们通常使用这个标识来关联 activiti，这个标识在 activiti 中称为 businesskey BusinessKey：业务标识，通常为业务的主键，业务标识和流程标识一一对应，业务标识来源于业务系统，存储业务标识就是根据业务标识来关联查询业务系统的数据 举例：请假流程启动一个流程实例，就可以将请假单的 id 作为业务标识存储到 activiti 中，将来查询 activiti 的流程实例信息就可以获取请假单的 id 从而关联查询业务系统数据库得到请假单信息 123456789101112/** * 启动流程实例，添加businessKey */@Testpublic void startUpProcessAddBusinessKey(){ String businessKey = &quot;1&quot;; // 启动流程实例，指定业务标识businessKey，也就是请假申请单id ProcessInstance processInstance = runtimeService. startProcessInstanceByKey(&quot;qingjia&quot;,businessKey); // 输出 System.out.println(&quot;业务id:&quot;+processInstance.getBusinessKey());} # 3.3、挂起，激活流程实例 某些情况可能由于流程变更需要将当前运行的流程暂停而不是直接删除，流程暂停后将不会执行； # 3.3.1、全部流程实例挂起 操作流程定义为挂起状态，该流程定义下面的所有流程实例全部暂停: 流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下所有的流程实例将全部挂起暂停执行 123456789101112131415@Testpublic void suspendProcessInstance() { ProcessDefinition qingjia = repositoryService.createProcessDefinitionQuery().processDefinitionKey(&quot;qingjia&quot;).singleResult(); // 获取到当前流程定义是否为暂停状态 suspended方法为true是暂停的，suspended方法为false是运行的 boolean suspended = qingjia.isSuspended(); if (suspended) { // 暂定,那就可以激活 // 参数1:流程定义的id 参数2:是否激活 参数3:时间点 repositoryService.activateProcessDefinitionById(qingjia.getId(), true, null); System.out.println(&quot;流程定义:&quot; + qingjia.getId() + &quot;激活&quot;); } else { repositoryService.suspendProcessDefinitionById(qingjia.getId(), true, null); System.out.println(&quot;流程定义:&quot; + qingjia.getId() + &quot;挂起&quot;); }} # 3.3.2、单个流程实例挂起 操作流程实例对象，针对单个流程执行挂起操作，某个流程实例挂起则此流程不在继续执行，完成该流程实例的当前任务将报异常； 1234567891011121314@Testpublic void SingleSuspendProcessInstance() { String processInstanceId = &quot;8bdff984-ab53-11ed-9b17-f8e43b734677&quot;; ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult(); //获取到当前流程定义是否为暂停状态 suspended方法为true代表为暂停 false就是运行的 boolean suspended = processInstance.isSuspended(); if (suspended) { runtimeService.activateProcessInstanceById(processInstanceId); System.out.println(&quot;流程实例:&quot; + processInstanceId + &quot;激活&quot;); } else { runtimeService.suspendProcessInstanceById(processInstanceId); System.out.println(&quot;流程实例:&quot; + processInstanceId + &quot;挂起&quot;); }} # 4、任务分配 任务分配有三种方式 固定分配 UEL 表达式分配 监听器分配 # 4.1、固定分配 在前面进行业务流程建模时指定固定的任务负责人，如：Assignee：zhangsan/lisi # 4.2、表达式分配 activiti 使用 UEL 表达式，UEL 是 java EE6 规范的一部分，UEL 即统一表达式语言，activiti 支持两个 UEL 表达式：UEL-value 和 UEL-method。 # 4.2.1、UEL-value 新建：一个加班流程 如图： assignee1 这个变量是 activiti 的一个流程变量 我们启动流程实例，这个启动实例的方法跟之前的方法基本一致，唯一的不同是在启动时，添加了一个参数 12345678910111213141516171819202122232425@Testpublic void deployProcess01() { // 流程部署 Deployment deploy = repositoryService.createDeployment() .addClasspathResource(&quot;process/jiaban01.bpmn20.xml&quot;) .name(&quot;加班申请流程&quot;) .deploy(); System.out.println(deploy.getId()); System.out.println(deploy.getName());}/** * 启动流程实例 */@Testpublic void startUpProcess01() { Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(); variables.put(&quot;assignee1&quot;,&quot;zhangsan&quot;); variables.put(&quot;assignee2&quot;,&quot;lisi&quot;); //创建流程实例,我们需要知道流程定义的key ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;qingjia01&quot;, variables); //输出实例的相关信息 System.out.println(&quot;流程定义id：&quot; + processInstance.getProcessDefinitionId()); System.out.println(&quot;流程实例id：&quot; + processInstance.getId());} # 4.2.2、UEL-method 方式 如图： userBean 是 spring 容器中的一个 bean，表示调用该 bean 的 getUsername (int id) 方法。 经理审批：$ 人事审批：$ 1234567891011121314151617package com.atguigu.process.bean;import org.springframework.stereotype.Component;@Componentpublic class UserBean { public String getUsername(int id) { if(id == 1) { return &quot;zhangsan&quot;; } if(id == 2) { return &quot;lisi&quot;; } return &quot;admin&quot;; }} 部署与启动 12345678910111213141516171819202122@Testpublic void deployProcess02() { // 流程部署 Deployment deploy = repositoryService.createDeployment() .addClasspathResource(&quot;process/jiaban02.bpmn20.xml&quot;) .name(&quot;加班申请流程&quot;) .deploy(); System.out.println(deploy.getId()); System.out.println(deploy.getName());}/** * 启动流程实例 */@Testpublic void startUpProcess02() { //创建流程实例,我们需要知道流程定义的key ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;qingjia02&quot;); //输出实例的相关信息 System.out.println(&quot;流程定义id：&quot; + processInstance.getProcessDefinitionId()); System.out.println(&quot;流程实例id：&quot; + processInstance.getId());} 启动流程实例，就会调用 bean 方法，参数为：1，经理审批后，接着调用 bean 方法，参数为：2 # 4.3、监听器分配 使用监听器的方式来指定负责人，那么在流程设计时就不需要指定 assignee。 任务监听器是发生对应的任务相关事件时执行自定义 java 逻辑 或表达式 Event 的选项包含： 1234Create：任务创建后触发Assignment：任务分配后触发Delete：任务完成后触发All：所有事件发生都触发 定义任务监听类，且类必须实现 org.activiti.engine.delegate.TaskListener 接口 123456789101112131415161718package com.atguigu.process.bean;import org.activiti.engine.delegate.DelegateTask;import org.activiti.engine.delegate.TaskListener;public class MyTaskListener implements TaskListener { @Override public void notify(DelegateTask delegateTask) { if(delegateTask.getName().equals(&quot;经理审批&quot;)){ //这里指定任务负责人 delegateTask.setAssignee(&quot;zhangsan&quot;); } else if(delegateTask.getName().equals(&quot;人事审批&quot;)){ //这里指定任务负责人 delegateTask.setAssignee(&quot;lisi&quot;); } }} 配置监听器 经理审批与人事审批，都设置一样的监听即可 部署与测试 12345678910111213141516171819202122@Testpublic void deployProcess03() { // 流程部署 Deployment deploy = repositoryService.createDeployment() .addClasspathResource(&quot;process/jiaban03.bpmn20.xml&quot;) .name(&quot;加班申请流程&quot;) .deploy(); System.out.println(deploy.getId()); System.out.println(deploy.getName());}/** * 启动流程实例 */@Testpublic void startUpProcess03() { //创建流程实例,我们需要知道流程定义的key ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;jiaban03&quot;); //输出实例的相关信息 System.out.println(&quot;流程定义id：&quot; + processInstance.getProcessDefinitionId()); System.out.println(&quot;流程实例id：&quot; + processInstance.getId());} 启动流程实例，就会调用 MyTaskListener 监听方法 # 5、流程变量 # 5.1、什么是流程变量 流程变量在 activiti 中是一个非常重要的角色，流程运转有时需要靠流程变量，业务系统和 activiti 结合时少不了流程变量，流程变量就是 activiti 在管理工作流时根据管理需要而设置的变量。 比如：在请假申请流程流转时如果请假天数大于 2 天则由总经理审核，否则由部门经理直接审核， 请假天 数就可以设置为流程变量，在流程流转时使用。 # 5.2、流程变量的作用域 流程变量的作用可以是一个流程实例，但也可以是一个任务 (task) 或是一个执行实例 # 5.2.1、globa 变量 流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量 global 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。 # 5.2.2、local 变量 任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。 Local 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 # 5.3、流程变量的使用方法 通过 UEL 表达式使用流程变量 1、之前我们也使用过 UEL 表达式来设置任务处理人，例如assignee1，activiti获取UEL表达式的值，即流程变量assignee1的值，将值作为任务的负责人进行任务分配2、我们也可以在任务和任务间的连线上使用UEL表达式，决定流程走向比如{assignee1}，activiti获取UEL表达式的值，即流程变量assignee1的值，将值作为任务的负责人进行任务分配 2、我们也可以在任务和任务间的连线上使用UEL表达式，决定流程走向 比如assignee1，activiti获取UEL表达式的值，即流程变量assignee1的值，将值作为任务的负责人进行任务分配2、我们也可以在任务和任务间的连线上使用UEL表达式，决定流程走向比如 {day&gt; 2 } 和 ${day &lt;= 2}，day 就是一个流程变量名称，UEL 表达式的执行结果是布尔类型 # 5.4、设置 globa 变量 # 5.4.1、启动流程时设置变量 在启动流程时设置流程变量，变量的作用域是整个流程实例。 通过 Map&lt;key,value&gt; 设置流程变量，map 中可以设置多个变量，这个 key 就是流程变量的名字 这是前面的实例代码 1234567891011@Testpublic void startUpProcess() { Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(); variables.put(&quot;assignee1&quot;, &quot;zhangsan&quot;); variables.put(&quot;assignee2&quot;, &quot;lisi&quot;); //创建流程实例,我们需要知道流程定义的key ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;qingjia&quot;, variables); //输出实例的相关信息 System.out.println(&quot;流程定义id：&quot; + processInstance.getProcessDefinitionId()); System.out.println(&quot;流程实例id：&quot; + processInstance.getId());} # 5.4.2、在任务办理时设置流程变量 它的作用域是整个流程实例 ，如果设置的流程变量的 key 在流程实例中已存在相同的名字则后设置的变量替换前边设置的变量。 模拟实例代码： 1234567891011@Testpublic void completTask() { Task task = taskService.createTaskQuery() .taskAssignee(&quot;zhangsan&quot;) //要查询的负责人 .singleResult();//返回一条 Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(); variables.put(&quot;assignee2&quot;, &quot;zhao&quot;); //完成任务,参数：任务id taskService.complete(task.getId(), variables);} # 5.4.3、通过当前流程实例设置 通过流程实例 id 设置全局变量， 它的作用域是整个流程实例 ，该流程实例必须未执行完成。 模拟实例代码： 123456@Testpublic void processInstanceIdSetVariables() { Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(); variables.put(&quot;assignee2&quot;, &quot;wang&quot;); runtimeService.setVariables(&quot;1c347a90-82c6-11ed-96ca-7c57581a7819&quot;, variables);} # 5.5、设置 Local 变量 local 流程变量的作用域只在当前任务节点下可用 任务办理时设置 local 流程变量，当前运行的流程实例只能在该任务结束前使用，任务结束该变量无法在当前流程实例使用 模拟实例代码： 12345678910111213@Testpublic void completLocalTask() { Task task = taskService.createTaskQuery() .taskAssignee(&quot;zhangsan&quot;) //要查询的负责人 .singleResult();//返回一条 // 设置local变量，作用域为该任务 taskService.setVariableLocal(task.getId(),&quot;assignee2&quot;,&quot;li&quot;); // 查看local变量 System.out.println(taskService.getVariableLocal(task.getId(), &quot;assignee2&quot;)); //完成任务,参数：任务id taskService.complete(task.getId());} # 6、任务组 # 6.1、Candidate-users 候选人 1、需求 在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果要临时变更任务负责人则需要修改流程定义，系统扩展性很差，针对这种情况，我们可以给任务设置多个候选人，从候选人中选择参与者来完成任务 2、设置任务候选人 # 6.2、组任务办理流程 第一步：查询组任务 指定候选人，查询该候选人当前的待办任务 候选人不能办理任务 第二步：拾取 (claim) 任务 该组任务的所有候选人都能拾取 将候选人的组任务，变成个人任务，原来的候选人就变成了该任务的负责人 如果拾取后不想办理该任务 需要将已经拾取 第三步：查询个人任务 查询方式同个人任务部分，根据 assignee 查询用户负责的个人任务 第四步：办理个人任务 # 6.3、关键代码 # 6.3.1、部署及启动 12345678910111213@Testpublic void deployProcess04() { // 流程部署 Deployment deploy = repositoryService.createDeployment() .addClasspathResource(&quot;process/jiaban04.bpmn20.xml&quot;) .name(&quot;请假申请流程&quot;) .deploy(); System.out.println(deploy.getId()); System.out.println(deploy.getName()); ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&quot;jiaban04&quot;); System.out.println(processInstance.getId());} # 6.3.2、查询组任务 1234567891011121314@Testpublic void findGroupTaskList() { //查询组任务 List&lt;Task&gt; list = taskService.createTaskQuery() .taskCandidateUser(&quot;zhangsan01&quot;)//根据候选人查询 .list(); for (Task task : list) { System.out.println(&quot;----------------------------&quot;); System.out.println(&quot;流程实例id：&quot; + task.getProcessInstanceId()); System.out.println(&quot;任务id：&quot; + task.getId()); System.out.println(&quot;任务负责人：&quot; + task.getAssignee()); System.out.println(&quot;任务名称：&quot; + task.getName()); }} # 6.3.2、拾取组任务 12345678910111213@Testpublic void claimTask(){ //拾取任务,即使该用户不是候选人也能拾取(建议拾取时校验是否有资格) //校验该用户有没有拾取任务的资格 Task task = taskService.createTaskQuery() .taskCandidateUser(&quot;zhangsan01&quot;)//根据候选人查询 .singleResult(); if(task!=null){ //拾取任务 taskService.claim(taskId, &quot;zhangsan01&quot;); System.out.println(&quot;任务拾取成功&quot;); }} 张三 01 拾取任务了，张三 02 就不能拾取了 # 6.3.3、 查询个人待办任务 查询方式同个人任务查询 1234567891011121314@Testpublic void findGroupPendingTaskList() { //任务负责人 String assignee = &quot;zhangsan01&quot;; List&lt;Task&gt; list = taskService.createTaskQuery() .taskAssignee(assignee)//只查询该任务负责人的任务 .list(); for (Task task : list) { System.out.println(&quot;流程实例id：&quot; + task.getProcessInstanceId()); System.out.println(&quot;任务id：&quot; + task.getId()); System.out.println(&quot;任务负责人：&quot; + task.getAssignee()); System.out.println(&quot;任务名称：&quot; + task.getName()); }} # 6.3.4、 办理个人任务 同个人任务办理 1234567@Testpublic void completGroupTask() { Task task = taskService.createTaskQuery() .taskAssignee(&quot;zhangsan01&quot;) //要查询的负责人 .singleResult();//返回一条 taskService.complete(task.getId());} # 6.3.5、归还组任务 如果个人不想办理该组任务，可以归还组任务，归还后该用户不再是该任务的负责人 12345678910111213141516@Testpublic void assigneeToGroupTask() { String taskId = &quot;d96c3f28-825e-11ed-95b4-7c57581a7819&quot;; // 任务负责人 String userId = &quot;zhangsan01&quot;; // 校验userId是否是taskId的负责人，如果是负责人才可以归还组任务 Task task = taskService .createTaskQuery() .taskId(taskId) .taskAssignee(userId) .singleResult(); if (task != null) { // 如果设置为null，归还组任务,该 任务没有负责人 taskService.setAssignee(taskId, null); }} # 6.3.6、 任务交接 任务交接，任务负责人将任务交给其它候选人办理该任务 123456789101112131415@Testpublic void assigneeToCandidateUser() { // 当前待办任务 String taskId = &quot;d96c3f28-825e-11ed-95b4-7c57581a7819&quot;; // 校验zhangsan01是否是taskId的负责人，如果是负责人才可以归还组任务 Task task = taskService .createTaskQuery() .taskId(taskId) .taskAssignee(&quot;zhangsan01&quot;) .singleResult(); if (task != null) { // 将此任务交给其它候选人zhangsan02办理该 任务 taskService.setAssignee(taskId, &quot;zhangsan02&quot;); }} # 7、网关 网关用来控制流程的流向，通常会和流程变量一起使用。 # 7.1、排他网关 排他网关：只有一条路径会被选择 当你的流程出现这样的场景：请假申请，两天以内，部门经理审批流程就结束了，两天以上需要总经理直接审批，这个时候就需要排他网关 # 7.2、并行网关 并（平）行网关：所有路径会被同时选择 当出现这样的场景：请假申请开始，需要部门经理和总经理都审批，两者没有前后需要两个人全部审批才能进入下个节点人事审批。这个时候就需要并行网关 与排他网关的主要区别是，并行网关不会解析条件。 即使顺序流中定义了条件，也会被忽略。 # 7.3、包含网关 包容网关：可以同时执行多条线路，也可以在网关上设置条件，可以看做是排他网关和并行网关的结合体。 当出现这样的场景：请假申请大于等于 2 天需要由部门总经理审批，小于 2 天由部门经理审批，请假申请必须经过人事经理审批。这个时候就需要包含网关","link":"/2023/07/06/activiti%E5%85%A5%E9%97%A8/"},{"title":"","text":"# 云尚办公系统：员工端审批 # 一、功能说明 后台管理已经把审批都设计好了，员工就可以通过移动端提交需要的审批申请了，接下来就是 Activiti 审批的核心流程部分。审批负责人审批包含：审批通过与审批拒绝，审批通过后自动到下一个审批节点，审批拒绝直接到结束节点，流程结束。 # 二、员工端审批 # 1、OA 审批 OA 审批在移动端，公司员工使用，如图所示： # 1.1、查询审批分类与模板接口 获取审批分类与对应的审批模板 # 1.1.1、定义 service 接口 操作类：ProcessTypeService 1List&lt;ProcessType&gt; findProcessType(); # 1.1.2、service 接口实现 1234567891011121314151617181920212223@Autowiredprivate ProcessTemplateService processTemplateService; @Overridepublic List&lt;ProcessType&gt; findProcessType() { //1 查询所有审批分类，返回list集合 List&lt;ProcessType&gt; processTypeList = baseMapper.selectList(null); //2 遍历返回所有审批分类list集合 for (ProcessType processType:processTypeList) { //3 得到每个审批分类，根据审批分类id查询对应审批模板 //审批分类id Long typeId = processType.getId(); //根据审批分类id查询对应审批模板 LambdaQueryWrapper&lt;ProcessTemplate&gt; wrapper = new LambdaQueryWrapper&lt;&gt;(); wrapper.eq(ProcessTemplate::getProcessTypeId,typeId); List&lt;ProcessTemplate&gt; processTemplateList = processTemplateService.list(wrapper); //4 根据审批分类id查询对应审批模板数据（List）封装到每个审批分类对象里面 processType.setProcessTemplateList(processTemplateList); } return processTypeList;} # 1.1.3、controller 接口 创建类 ProcessApiController 123456789101112131415@Api(tags = &quot;审批流管理&quot;)@RestController@RequestMapping(value=&quot;/admin/process&quot;)@CrossOrigin //跨域public class ProcessApiController { @Autowired private ProcessTypeService processTypeService; @ApiOperation(value = &quot;获取全部审批分类及模板&quot;) @GetMapping(&quot;findProcessType&quot;) public Result findProcessType() { return Result.ok(processTypeService.findProcessType()); }} # 1.2、前端开发 # 1.2.1、引用前端开发环境 从资源库引入前端项目框架：guigu-oa-web，该框架包含了静态资源页面，我们直接使用。 第一步：安装依赖 1npm install 第二步：启动 1npm run serve 第三步：更改配置 1、更改 src/utils/request.js 文件 api base 路径 2、更改 src/utils/request.js 文件 token 信息， 在 idea 使用 token 工具生成临时 token 使用，后续会完善微信授权登录 # 1.2.2、定义 api 接口 创建 src/api/process.js 12345678910111213import request from '@/utils/request'const api_name = '/admin/process'export default { findProcessType() { return request({ url: `${api_name}/findProcessType`, method: 'get' }) }} # 1.2.3、添加路由 在 src/router/index.js 添加路由 123456{ path: '/', name: 'OA审批', component: () =&gt; import('../views/index.vue'),} # 1.2.4、页面渲染 views/index.vue 页面 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;template&gt; &lt;div&gt; &lt;div class=&quot;container&quot;&gt; &lt;van-nav-bar title=&quot;OA审批&quot; /&gt; &lt;van-collapse v-model=&quot;activeNames&quot;&gt; &lt;van-collapse-item v-for=&quot;(item,key) in list&quot; :title=&quot;item.name&quot; :name=&quot;item.key&quot;&gt; &lt;van-row&gt; &lt;van-col v-for=&quot;template in item.processTemplateList&quot; :key=&quot;template.id&quot; span=&quot;6&quot;&gt; &lt;div class=&quot;item&quot; @click=&quot;apply(template.id)&quot;&gt; &lt;img :src=&quot;template.iconUrl&quot;/&gt; &lt;span&gt;{{template.name}}&lt;/span&gt; &lt;/div&gt; &lt;/van-col&gt; &lt;/van-row&gt; &lt;/van-collapse-item&gt; &lt;/van-collapse&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/process'export default { name: &quot;process&quot;, data() { return { list: [], activeNames: [0,1,2,3,4] }; }, created(){ this.fetchData(); }, methods: { fetchData() { api.findProcessType().then(response =&gt; { console.log(response.data); this.list = response.data; //全部展开 this.activeNames = [] this.list.forEach((item,index) =&gt; { this.activeNames.push(index) }) }); }, apply(id) { this.$router.push({ path: '/apply/'+id }) } }}&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.container { padding-bottom: 50px; .item { display: flex; flex-direction: column; align-items: center; justify-content: center; img { width: 40px; height: 40px; border-radius: 10px; } span { font-size: 12px; padding: 8px 4px; text-align: center; } }}&lt;/style&gt; # 2、审批申请 根据审批模板渲染动态表单，根据动态表单启动流程实例 # 2.1、获取审批模板数据 操作类：ProcessApiController 123456789@Autowiredprivate ProcessTemplateService processTemplateService;@ApiOperation(value = &quot;获取审批模板&quot;)@GetMapping(&quot;getProcessTemplate/{processTemplateId}&quot;)public Result get(@PathVariable Long processTemplateId) { ProcessTemplate processTemplate = processTemplateService.getById(processTemplateId); return Result.ok(processTemplate);} # 2.2、审批申请页面渲染 # 2.2.1、定义接口 在 src/api/process.js 文件添加接口 123456getProcessTemplate(processTemplateId) { return request({ url: `${api_name}/getProcessTemplate/`+processTemplateId, method: 'get' })} # 2.2.2、渲染动态表单 初始化环境已集成：form-create 组件，我们将表单设计器组件保存的数据直接渲染即可 创建 src/views/apply.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;template&gt; &lt;div&gt; &lt;van-nav-bar title=&quot;发起审批&quot; left-text=&quot;返回&quot; left-arrow @click-left=&quot;() =&gt; $router.back()&quot; /&gt; &lt;div style=&quot;margin: 10px 10px 0 0;border: 0px solid red;&quot;&gt; &lt;form-create :rule=&quot;rule&quot; :option=&quot;option&quot; @submit=&quot;onSubmit&quot; &gt;&lt;/form-create&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from &quot;@/api/process&quot;;export default { name: &quot;process&quot;, data() { return { processTemplateprocessTemplate: null, rule: [], option: {} }; }, created() { let processTemplateId = this.$route.params.processTemplateId; this.fetchData(processTemplateId); }, methods: { fetchData(processTemplateId) { api.getProcessTemplate(processTemplateId).then(response =&gt; { console.log(response.data); this.processTemplate = response.data; this.rule = JSON.parse(this.processTemplate.formProps); this.option = JSON.parse(this.processTemplate.formOptions); }); }, onSubmit(formData) { console.log(formData) } }};&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.el-form { .el-form-item { /deep/ .el-form-item__label { font-size: 18px; font-weight: 800; color: blue; } }}&lt;/style&gt; # 2.2.3、测试 我们以加班为例，其他都可以 提交打印数据： 打印数据为我们自定义表单属性与对于输入值。 后续这些数据有两方面用途： ​ 1、审批详细展示 ​ 2、作为流程实例参数，判断流程走向，如下图： # 2.2.4、封装提交数据 1234567891011121314151617181920212223onSubmit(formData) { console.log(formData) let formShowData = {}; this.rule.forEach(item =&gt; { for (let key in formData) { if (key === item.field) { console.log(item.title, formData[key]); formShowData[item.title] = formData[key]; } } }); let DATA = { formData: formData, formShowData: formShowData }; console.log(DATA); let processFormVo = { &quot;processTemplateId&quot;: this.processTemplate.id, &quot;processTypeId&quot;: this.processTemplate.processTypeId, &quot;formValues&quot;: JSON.stringify(DATA) }; console.log(processFormVo)} 打印数据 我们把表单数据转换 2 部分：formData 表单数据，formShowData 表单展示数据，构造成为一个 formValues 属性 json 对象，后续使用时可方便获取 # 2.3、启动流程实例 # 2.3.1、修改认证过滤器 spring-security 模块添加工具类，通过 ThreadLocal 记录当前登录人信息 1234567891011121314151617181920212223242526272829package com.atguigu.security.custom;/** * 获取当前用户信息帮助类 */public class LoginUserInfoHelper { private static ThreadLocal&lt;Long&gt; userId = new ThreadLocal&lt;Long&gt;(); private static ThreadLocal&lt;String&gt; username = new ThreadLocal&lt;String&gt;(); public static void setUserId(Long _userId) { userId.set(_userId); } public static Long getUserId() { return userId.get(); } public static void removeUserId() { userId.remove(); } public static void setUsername(String _username) { username.set(_username); } public static String getUsername() { return username.get(); } public static void removeUsername() { username.remove(); }} 修改过滤器 TokenAuthenticationFilter 添加以下内容 12345678910111213141516171819202122/** * &lt;p&gt; * 认证解析token过滤器 * &lt;/p&gt; */public class TokenAuthenticationFilter extends OncePerRequestFilter {................... private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) { .................... if (!StringUtils.isEmpty(username)) { //通过ThreadLocal记录当前登录人信息 LoginUserInfoHelper.setUserId(JwtHelper.getUserId(token)); LoginUserInfoHelper.setUsername(username); .................... }} # 2.3.2、封装启动流程对象 对于审批申请属性 1234567891011121314@Data@ApiModel(description = &quot;流程表单&quot;)public class ProcessFormVo { @ApiModelProperty(value = &quot;审批模板id&quot;) private Long processTemplateId; @ApiModelProperty(value = &quot;审批类型id&quot;) private Long processTypeId; @ApiModelProperty(value = &quot;表单值&quot;) private String formValues;} # 2.3.3、service 实现功能 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768@Autowiredprivate ProcessTemplateService processTemplateService;@Autowiredprivate SysUserService sysUserService;@Autowiredprivate RuntimeService runtimeService;@Autowiredprivate TaskService taskService;public void startUp(ProcessFormVo processFormVo) { SysUser sysUser = sysUserService.getById(LoginUserInfoHelper.getUserId()); ProcessTemplate processTemplate = processTemplateService.getById(processFormVo.getProcessTemplateId()); Process process = new Process(); BeanUtils.copyProperties(processFormVo, process); String workNo = System.currentTimeMillis() + &quot;&quot;; process.setProcessCode(workNo); process.setUserId(LoginUserInfoHelper.getUserId()); process.setFormValues(processFormVo.getFormValues()); process.setTitle(sysUser.getName() + &quot;发起&quot; + processTemplate.getName() + &quot;申请&quot;); process.setStatus(1); processMapper.insert(process); //绑定业务id String businessKey = String.valueOf(process.getId()); //流程参数 Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(); //将表单数据放入流程实例中 JSONObject jsonObject = JSON.parseObject(process.getFormValues()); JSONObject formData = jsonObject.getJSONObject(&quot;formData&quot;); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); //循环转换 for (Map.Entry&lt;String, Object&gt; entry : formData.entrySet()) { map.put(entry.getKey(), entry.getValue()); } variables.put(&quot;data&quot;, map); ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(processTemplate.getProcessDefinitionKey(), businessKey, variables); //业务表关联当前流程实例id String processInstanceId = processInstance.getId(); process.setProcessInstanceId(processInstanceId); //计算下一个审批人，可能有多个（并行审批） List&lt;Task&gt; taskList = this.getCurrentTaskList(processInstanceId); if (!CollectionUtils.isEmpty(taskList)) { List&lt;String&gt; assigneeList = new ArrayList&lt;&gt;(); for(Task task : taskList) { SysUser user = sysUserService.getByUsername(task.getAssignee()); assigneeList.add(user.getName()); //推送消息给下一个审批人，后续完善 } process.setDescription(&quot;等待&quot; + StringUtils.join(assigneeList.toArray(), &quot;,&quot;) + &quot;审批&quot;); } processMapper.updateById(process);}/** * 获取当前任务列表 * @param processInstanceId * @return */private List&lt;Task&gt; getCurrentTaskList(String processInstanceId) { List&lt;Task&gt; tasks = taskService.createTaskQuery().processInstanceId(processInstanceId).list(); return tasks;} # 2.3.4、controller 接口 123456789@Autowiredprivate ProcessService processService;@ApiOperation(value = &quot;启动流程&quot;)@PostMapping(&quot;/startUp&quot;)public Result start(@RequestBody ProcessFormVo processFormVo) { processService.startUp(processFormVo); return Result.ok();} # 2.4、更新前端提交接口 1、添加 api 接口 1234567startUp(processFormVo) { return request({ url: `${api_name}/startUp`, method: 'post', data: processFormVo })}, 2、更新提交接口 12345678onSubmit(formData) { ... console.log(processFormVo) api.startUp(processFormVo).then(response =&gt; { //调整到已发起列表 this.$router.push({ path: &quot;/list/2&quot; }); });} # 2.5、记录提交记录 类似下面数据 每个节点我们要记录操作行为 # 2.5.1、mapper 类 12345678910package com.atguigu.process.mapper;import com.atguigu.model.process.ProcessRecord;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface ProcessRecordMapper extends BaseMapper&lt;ProcessRecord&gt; {} # 2.5.2、service 接口 12345678910package com.atguigu.process.service;import com.atguigu.model.process.ProcessRecord;import com.baomidou.mybatisplus.extension.service.IService;public interface ProcessRecordService extends IService&lt;ProcessRecord&gt; { void record(Long processId, Integer status, String description);} # 2.5.3、service 接口 1234567891011121314151617181920212223242526272829303132333435package com.atguigu.process.service.impl;import com.atguigu.model.process.ProcessRecord;import com.atguigu.model.system.SysUser;import com.atguigu.process.mapper.ProcessRecordMapper;import com.atguigu.process.service.ProcessRecordService;import com.atguigu.security.custom.LoginUserInfoHelper;import com.atguigu.system.service.SysUserService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service@SuppressWarnings({&quot;unchecked&quot;, &quot;rawtypes&quot;})public class ProcessRecordServiceImpl extends ServiceImpl&lt;ProcessRecordMapper, ProcessRecord&gt; implements ProcessRecordService { @Autowired private ProcessRecordMapper processRecordMapper; @Autowired private SysUserService sysUserService; @Override public void record(Long processId, Integer status, String description) { SysUser sysUser = sysUserService.getById(LoginUserInfoHelper.getUserId()); ProcessRecord processRecord = new ProcessRecord(); processRecord.setProcessId(processId); processRecord.setStatus(status); processRecord.setDescription(description); processRecord.setOperateUserId(sysUser.getId()); processRecord.setOperateUser(sysUser.getName()); processRecordMapper.insert(processRecord); }} # 2.5.4、更改启动流程接口 123456789@Autowiredprivate ProcessRecordService processRecordService;public void startUp(ProcessFormVo processFormVo) { ... //记录操作行为 processRecordService.record(process.getId(), 1, &quot;发起申请&quot;);} # 3、待处理列表 启动流程后，审批人就可以在待处理列表中获取审批列表了 # 3.1、服务器端接口 # 3.1.1、定义接口 1IPage&lt;ProcessVo&gt; findPending(Page&lt;Process&gt; pageParam); # 3.1.2、接口实现 123456789101112131415161718192021222324252627282930@Overridepublic IPage&lt;ProcessVo&gt; findPending(Page&lt;Process&gt; pageParam) { // 根据当前人的ID查询 TaskQuery query = taskService.createTaskQuery().taskAssignee(LoginUserInfoHelper.getUsername()).orderByTaskCreateTime().desc(); List&lt;Task&gt; list = query.listPage((int) ((pageParam.getCurrent() - 1) * pageParam.getSize()), (int) pageParam.getSize()); long totalCount = query.count(); List&lt;ProcessVo&gt; processList = new ArrayList&lt;&gt;(); // 根据流程的业务ID查询实体并关联 for (Task item : list) { String processInstanceId = item.getProcessInstanceId(); ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult(); if (processInstance == null) { continue; } // 业务key String businessKey = processInstance.getBusinessKey(); if (businessKey == null) { continue; } Process process = this.getById(Long.parseLong(businessKey)); ProcessVo processVo = new ProcessVo(); BeanUtils.copyProperties(process, processVo); processVo.setTaskId(item.getId()); processList.add(processVo); } IPage&lt;ProcessVo&gt; page = new Page&lt;ProcessVo&gt;(pageParam.getCurrent(), pageParam.getSize(), totalCount); page.setRecords(processList); return page;} # 3.1.3、controller 接口 1234567891011@ApiOperation(value = &quot;待处理&quot;)@GetMapping(&quot;/findPending/{page}/{limit}&quot;)public Result findPending( @ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true) @PathVariable Long page, @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true) @PathVariable Long limit) { Page&lt;Process&gt; pageParam = new Page&lt;&gt;(page, limit); return Result.ok(processService.findPending(pageParam));} # 3.2、前端渲染 # 3.2.1、定义 api 接口 在 src/api/process.js 添加接口 123456findPending(page, limit) { return request({ url: `${api_name}/findPending/`+page+`/`+ limit, method: 'get' }) } # 3.2.2、添加路由 在 src/router/index.js 添加路由 列表有三个 tab 切换，activeIndex 代表切换的序号，0：待审批 1：已审批 2：已发起 123456{ path: '/list/:activeIndex', name: '审批列表', component: () =&gt; import('../views/list.vue'), }, # 3.2.3、页面渲染 创建 src/views/list.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;van-nav-bar title=&quot;审批列表&quot; /&gt; &lt;van-tabs v-model=&quot;activeIndex&quot; @click=&quot;tabSwitch&quot;&gt; &lt;van-tab v-for=&quot;(item,key) in tabList&quot; :key=&quot;key&quot; :title=&quot;item.title&quot; &gt; &lt;/van-tab&gt; &lt;/van-tabs&gt; &lt;div class=&quot;list-wrap&quot; &gt; &lt;van-pull-refresh v-model=&quot;refreshing&quot; @refresh=&quot;onRefresh&quot;&gt; &lt;van-list v-model=&quot;loading&quot; :finished=&quot;finished&quot; finished-text=&quot;没有更多了&quot; @load=&quot;onLoad&quot; :immediate-check=&quot;false&quot; &gt; &lt;van-cell v-for=&quot;item in list&quot; :key=&quot;item.id&quot; @click=&quot;info(item.id, item.taskId)&quot;&gt; &lt;template slot=&quot;default&quot;&gt; &lt;div class=&quot;item-wrap&quot;&gt; &lt;div class=&quot;item-header&quot;&gt; &lt;img src=&quot;https://static.dingtalk.com/media/lALOnahFD80CgM0CgA_640_640.png_450x10000q90.jpg&quot; alt=&quot;&quot;&gt; &lt;h3&gt;{{item.title}}&lt;/h3&gt; &lt;span&gt;{{item.createTime}}&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;item-block&quot;&gt; &lt;p v-for=&quot;(value,key) in item.formValues.formShowData&quot; v-if=&quot;key !== '图片'&quot;&gt;{{ key }}：&lt;span v-html=&quot;value&quot;&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item-status&quot;&gt; &lt;span :class=&quot;item.status === 1 ? '审批中' : item.status === 2 ? 'pass' : 'refused'&quot;&gt;{{ item.status === 1 ? '审批中' : item.status === 2 ? '审批通过' : '审批拒绝' }}&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;/van-cell&gt; &lt;/van-list&gt; &lt;/van-pull-refresh&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/process'export default { name: &quot;process&quot;, data() { return { list: [], loading: false, finished: false, refreshing: false, pageNo: 1, pageSize: 10, pages: 1, activeIndex: 0, tabList: [ { title:&quot;待处理&quot;, }, { title:&quot;已处理&quot;, }, { title:&quot;已发起&quot;, } ] }; }, created(){ this.activeIndex = parseInt(this.$route.params.activeIndex); this.onLoad() }, methods: { tabSwitch() { //tab切换，重新初始化数据 this.list = [] this.pageNo = 1 this.finished = false //tabs切换时，如果之前的tab已经滚动到底部（list加载到底部），直接点击其他的tab，将再触发一次onload事件。 //可能调用2次onLoad()方法，延迟执行，通过时间差解决问题 setTimeout(() =&gt; { if(!this.finished) { this.onLoad(); } }, 500); }, onLoad() { if(this.activeIndex === 0) { this.findPending() } if(this.activeIndex === 1) { this.findProcessed() } if(this.activeIndex === 2) { this.findStarted() } }, onRefresh() { // 清空列表数据 this.finished = false; this.pageNo = 1; // 重新加载数据 // 将 loading 设置为 true，表示处于加载状态 this.loading = true; this.onLoad(); }, findPending() { console.log(this.pageNo) api.findPending(this.pageNo, this.pageSize).then(response =&gt; { console.log(response.data); if (this.refreshing) { this.list = []; this.refreshing = false; } for (let i=0;i&lt;response.data.records.length;i++) { let item = response.data.records[i] item.formValues = JSON.parse(item.formValues) this.list.push(item); } this.pages = response.data.pages; this.loading = false; if(this.pageNo &gt;= this.pages) { this.finished = true; } this.pageNo++; }); }, findProcessed() { }, findStarted() { }, info(id, taskId) { this.$router.push({ path: '/show/'+id+'/'+taskId }) } }}&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;/deep/ .van-nav-bar { background: #1D1E20;}/deep/ .van-nav-bar__title { color: #fff;}.container { padding-bottom: 50px; .list-wrap { margin-top: 4px; border-top: 1px solid #ebedf0; } .item-wrap { font-size: 12px; color: #A7A8A9; .item-header { display: flex; align-items: center; img { width: 20px; height: 20px; border-radius: 4px; margin-right: 4px; } h3 { flex: 1; font-size: 15px; color: #000; padding: 0; margin: 0; } } .item-block { padding: 4px 0; font-size: 14px; p { padding: 0; margin: 0; line-height: 20px; } } .item-status { .pass { color: #4CB971; } .refused { color: #EB8473; } } }}&lt;/style&gt; # 3.2.4、测试 当前是部门经理审批，切换 token 为部门经理账号，查看待审批 为了方便测试，我们做一个账号切换页面 1、添加路由 123456{ path: '/test', name: '切换测试账号', component: () =&gt; import('../views/test.vue'),} 2、新建 vue 页面 新建 views/test.vue 说明：token 可能过期了，可通过 JwtHelper.java 类动态生成一次 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;template&gt; &lt;div&gt; &lt;div&gt;账号切换&lt;/div&gt; &lt;button @click=&quot;wjl()&quot; type=&quot;default&quot; size=&quot;mini&quot;&gt;王经理&lt;/button&gt; &lt;button @click=&quot;rsjl()&quot; type=&quot;default&quot; size=&quot;mini&quot;&gt;李人事经理&lt;/button&gt; &lt;button @click=&quot;zzjl()&quot; type=&quot;default&quot; size=&quot;mini&quot;&gt;张总经理&lt;/button&gt; &lt;button @click=&quot;lisi()&quot; type=&quot;default&quot; size=&quot;mini&quot;&gt;李四&lt;/button&gt; &lt;div&gt;当前token：{{ token }}&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { name: &quot;Test&quot;, data() { return { token: '' }; }, created(){ }, methods: { wjl() { window.localStorage.setItem('token', ''); let token = 'eyJhbGciOiJIUzUxMiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAAAKtWKi5NUrJScgwN8dANDXYNUtJRSq0oULIyNDM3tDA3NTQ311EqLU4t8kxRsjKCMPMSc1OBWrIy89JzMoHqofznfd3Pd_c_n9CmVAsAgwZGsFYAAAA.H9lJkVALwz35h4BN1TNCAh1FttynUkIcsSdDJr46sA8O7pHtDZLA2TCNlTiPFI5ifYJ3nEyPdQnlqq1KM_dR3A' window.localStorage.setItem('token', token); this.token = window.localStorage.getItem('token') }, rsjl() { window.localStorage.setItem('token', ''); let token = 'eyJhbGciOiJIUzUxMiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAAAKtWKi5NUrJScgwN8dANDXYNUtJRSq0oULIyNDM3tDA3NTIz11EqLU4t8kxRsjKGMPMSc1OBWoqKs3KAqqG8Z3P7nuza9WRX9_Pd_c8ntCnVAgAxtvYPWgAAAA.za6RgrrHFBfBFudpawIwHB4EfKloakef0CEmXwITPFpaS7LC2RJ7a2uFw4MwA9FlQS_YTm2xSPmDBI_zDUOQbQ' window.localStorage.setItem('token', token); this.token = window.localStorage.getItem('token') }, zzjl() { window.localStorage.setItem('token', ''); let token = 'eyJhbGciOiJIUzUxMiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAAAKtWKi5NUrJScgwN8dANDXYNUtJRSq0oULIyNDM3tDA3NTYy1VEqLU4t8kxRsoIy8xJzU4FaqrJygIqhnKd7Fjxr2P18d__zCW1KtQAR8Ch1VgAAAA.szrvYa3nJprMhVjLGcGZ1mptv0Q5nQDOu81l4CtvtMXtEzsSuEUrf3sHL8v9jJF30Iq2qUXUMQYBgD5kYapd_A' window.localStorage.setItem('token', token); this.token = window.localStorage.getItem('token') }, lisi() { window.localStorage.setItem('token', ''); let token = 'eyJhbGciOiJIUzUxMiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAAAKtWKi5NUrJScgwN8dANDXYNUtJRSq0oULIyNDM3NjA1M7M001EqLU4t8kxRsjKBMPMSc1OBWnIyizOVagG7ronSQQAAAA.Tw_w8JwifsxxQQVPQWTfTiJb3AL8xA2v9DcfZrqxm8R0Lgy3qAA9Sf5NPcVpFsdwip7gWdX31qwzUf10LAnM2w' window.localStorage.setItem('token', token); this.token = window.localStorage.getItem('token') } }}&lt;/script&gt; 3、访问测试 http://localhost:9090/#/test 后续需要谁审批，就在该页面切换一下即可 # 4、审批详情 审批分 2 部分： ​ 1、审批详情 ​ 2、执行审批：审批通过与审批不通过（直接结束流程） # 4.1、审批详情接口 # 4.1.1、service 接口 1Map&lt;String, Object&gt; show(Long id); # 4.1.2、service 接口实现 12345678910111213141516171819202122@Overridepublic Map&lt;String, Object&gt; show(Long id) { Process process = this.getById(id); List&lt;ProcessRecord&gt; processRecordList = processRecordService.list(new LambdaQueryWrapper&lt;ProcessRecord&gt;().eq(ProcessRecord::getProcessId, id)); ProcessTemplate processTemplate = processTemplateService.getById(process.getProcessTemplateId()); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;process&quot;, process); map.put(&quot;processRecordList&quot;, processRecordList); map.put(&quot;processTemplate&quot;, processTemplate); //计算当前用户是否可以审批，能够查看详情的用户不是都能审批，审批后也不能重复审批 boolean isApprove = false; List&lt;Task&gt; taskList = this.getCurrentTaskList(process.getProcessInstanceId()); if (!CollectionUtils.isEmpty(taskList)) { for(Task task : taskList) { if(task.getAssignee().equals(LoginUserInfoHelper.getUsername())) { isApprove = true; } } } map.put(&quot;isApprove&quot;, isApprove); return map;} # 4.1.3、controller 接口 12345@ApiOperation(value = &quot;获取审批详情&quot;)@GetMapping(&quot;show/{id}&quot;)public Result show(@PathVariable Long id) { return Result.ok(processService.show(id));} # 4.2、前端渲染 # 4.2.1、定义 api 接口 在 src/api/process.js 添加接口 123456show(id) { return request({ url: `${api_name}/show/`+id, method: 'get' }) }, # 4.2.2、添加路由 在 src/router/index.js 添加路由 执行任务会用到当前任务 id：taskId 123456{ path: '/show/:id/:taskId', name: '审批详情', component: () =&gt; import('../views/show.vue'), }, # 4.2.3、页面渲染 创建 src/views/show.vuelt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;van-nav-bar title=&quot;审批详情&quot; left-text=&quot;返回&quot; left-arrow @click-left=&quot;() =&gt; $router.back()&quot; /&gt; &lt;van-list&gt; &lt;van-cell&gt; &lt;template slot=&quot;default&quot;&gt; &lt;div class=&quot;header-warp&quot;&gt; &lt;h4&gt;{{ process.title }}&lt;/h4&gt; &lt;p&gt;{{ process.createTime }}&lt;/p&gt; &lt;span class=&quot;pass&quot; v-if=&quot;process.status === 1&quot;&gt;审批中&lt;/span&gt; &lt;div class=&quot;seal-wrap&quot; v-if=&quot;process.status === 2&quot;&gt; &lt;seal-avatar&gt;&lt;/seal-avatar&gt; &lt;/div&gt; &lt;div class=&quot;seal-wrap&quot; v-if=&quot;process.status === -1&quot;&gt; &lt;seal-avatar title=&quot;已拒绝&quot; color=&quot;#EB8473&quot;&gt;&lt;/seal-avatar&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;/van-cell&gt; &lt;van-cell&gt; &lt;template slot=&quot;default&quot;&gt; &lt;div class=&quot;detail-wrap&quot;&gt; &lt;div class=&quot;item&quot; v-for=&quot;(value,key) in formValues.formShowData&quot;&gt; &lt;h5&gt;{{ key }}&lt;/h5&gt; &lt;p v-html=&quot;value&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;/van-cell&gt; &lt;van-cell&gt; &lt;template slot=&quot;default&quot;&gt; &lt;div class=&quot;result&quot;&gt; &lt;h3&gt;流程&lt;/h3&gt; &lt;van-steps direction=&quot;vertical&quot; :active=&quot;processRecordList.length - 1&quot;&gt; &lt;van-step v-for=&quot;item in processRecordList&quot;&gt; &lt;h4&gt;{{ item.operateUser }} {{ item.description }}&lt;/h4&gt; &lt;p&gt;{{ item.createTime }}&lt;/p&gt; &lt;/van-step&gt; &lt;/van-steps&gt; &lt;/div&gt; &lt;/template&gt; &lt;/van-cell&gt; &lt;/van-list&gt; &lt;div class=&quot;notice&quot; v-if=&quot;isApprove&quot;&gt; &lt;van-icon name=&quot;bullhorn-o&quot; /&gt; &lt;p&gt;{{ process.title }}&lt;/p&gt; &lt;span class=&quot;pass&quot;&gt;{{ process.status === 1 ? '审批中' : process.status === 2 ? '审批通过' : '审批拒绝' }}&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;footer&quot; v-if=&quot;taskId != 0&quot;&gt; &lt;div class=&quot;left-action&quot;&gt; &lt;div class=&quot;action back&quot; @click=&quot;() =&gt; $router.back()&quot;&gt; &lt;van-icon name=&quot;revoke&quot; /&gt; &lt;span&gt;返回&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;right-button&quot;&gt; &lt;van-button @click=&quot;approve(-1)&quot; type=&quot;default&quot; size=&quot;small&quot;&gt;审批拒绝&lt;/van-button&gt; &lt;span style=&quot;margin: 0 4px&quot;&gt;&lt;/span&gt; &lt;van-button @click=&quot;approve(1)&quot; type=&quot;info&quot; size=&quot;small&quot;&gt;审批通过&lt;/van-button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import SealAvatar from '../components/Seal.vue';import api from '@/api/process'export default { name: &quot;process&quot;, components: { SealAvatar, }, props: { msg: String }, data() { return { taskId: 0, process: { }, formValues: {}, processRecordList: [], isApprove: false }; }, created(){ this.taskId = this.$route.params.taskId; let id = this.$route.params.id; this.fetchData(id); }, methods: { fetchData(id) { api.show(id).then(response =&gt; { this.process = response.data.process this.formValues = JSON.parse(this.process.formValues) this.processRecordList = response.data.processRecordList this.isApprove = response.data.isApprove }) }, approve(status) { } }}&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.container { padding-bottom: 86px; .header-warp { position: relative; h4 { font-size: 16px; margin: 5px; } p { font-size: 16px; margin: 5px; } .pass { color: #4CB971; margin: 5px; } .refused { color: #EB8473; margin: 5px; } } .detail-wrap { .item { h5 { color: #838485; margin: 5px; } p { color: #1B1F22; font-size: 16px; margin: 5px; } } } .result { font-size: 14px; h4, p { margin: 5px; font-size: 14px; } } .seal-wrap { position: absolute; top: 20px; right: 30px; } .notice { display: flex; align-items: center; width: 100%; font-size: 12px; padding: 8px 10px; background: #FEFBE8; position: fixed; bottom: 53px; z-index: 10; p { flex: 1; margin: 4px; } .pass { color: #07c160; margin-right: 20px; } } .footer { // height: 50px; padding: 10px; background: #F8F8F8; display: flex; align-items: center; position: fixed; width: 100%; bottom: 0; z-index: 10; .left-action { flex: 1; .action { display: flex; flex-direction: column; justify-content: center; align-items: center; span { font-size: 12px; color: #838485; } } } .right-button { margin-right: 20px; } }}/deep/ .van-cell { position: inherit; overflow: visible;}/deep/ .van-cell__value{ position: inherit; overflow: visible;}&lt;/style&gt; # 5、审批 # 5.1、审批接口 # 5.1.1、service 接口 1void approve(ApprovalVo approvalVo); # 5.1.2、service 接口实现 如果审批不通过，直接结束流程（说明：并行审批流程不能满足，我们的业务当前不需要并行处理） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475public void approve(ApprovalVo approvalVo) { Map&lt;String, Object&gt; variables1 = taskService.getVariables(approvalVo.getTaskId()); for (Map.Entry&lt;String, Object&gt; entry : variables1.entrySet()) { System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue()); } String taskId = approvalVo.getTaskId(); if (approvalVo.getStatus() == 1) { //已通过 Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;(); taskService.complete(taskId, variables); } else { //驳回 this.endTask(taskId); } String description = approvalVo.getStatus().intValue() == 1 ? &quot;已通过&quot; : &quot;驳回&quot;; processRecordService.record(approvalVo.getProcessId(), approvalVo.getStatus(), description); //计算下一个审批人 Process process = this.getById(approvalVo.getProcessId()); List&lt;Task&gt; taskList = this.getCurrentTaskList(process.getProcessInstanceId()); if (!CollectionUtils.isEmpty(taskList)) { List&lt;String&gt; assigneeList = new ArrayList&lt;&gt;(); for(Task task : taskList) { SysUser sysUser = sysUserService.getByUsername(task.getAssignee()); assigneeList.add(sysUser.getName()); //推送消息给下一个审批人 } process.setDescription(&quot;等待&quot; + StringUtils.join(assigneeList.toArray(), &quot;,&quot;) + &quot;审批&quot;); process.setStatus(1); } else { if(approvalVo.getStatus().intValue() == 1) { process.setDescription(&quot;审批完成（同意）&quot;); process.setStatus(2); } else { process.setDescription(&quot;审批完成（拒绝）&quot;); process.setStatus(-1); } } //推送消息给申请人 this.updateById(process);}private void endTask(String taskId) { // 当前任务 Task task = taskService.createTaskQuery().taskId(taskId).singleResult(); BpmnModel bpmnModel = repositoryService.getBpmnModel(task.getProcessDefinitionId()); List endEventList = bpmnModel.getMainProcess().findFlowElementsOfType(EndEvent.class); // 并行任务可能为null if(CollectionUtils.isEmpty(endEventList)) { return; } FlowNode endFlowNode = (FlowNode) endEventList.get(0); FlowNode currentFlowNode = (FlowNode) bpmnModel.getMainProcess().getFlowElement(task.getTaskDefinitionKey()); // 临时保存当前活动的原始方向 List originalSequenceFlowList = new ArrayList&lt;&gt;(); originalSequenceFlowList.addAll(currentFlowNode.getOutgoingFlows()); // 清理活动方向 currentFlowNode.getOutgoingFlows().clear(); // 建立新方向 SequenceFlow newSequenceFlow = new SequenceFlow(); newSequenceFlow.setId(&quot;newSequenceFlowId&quot;); newSequenceFlow.setSourceFlowElement(currentFlowNode); newSequenceFlow.setTargetFlowElement(endFlowNode); List newSequenceFlowList = new ArrayList&lt;&gt;(); newSequenceFlowList.add(newSequenceFlow); // 当前节点指向新的方向 currentFlowNode.setOutgoingFlows(newSequenceFlowList); // 完成当前任务 taskService.complete(task.getId());} # 5.1.3、controller 接口 123456@ApiOperation(value = &quot;审批&quot;)@PostMapping(&quot;approve&quot;)public Result approve(@RequestBody ApprovalVo approvalVo) { processService.approve(approvalVo); return Result.ok();} # 5.2、前端实现 # 5.2.1、定义 api 接口 在 src/api/process.js 添加接口 1234567approve(approvalVo) { return request({ url: `${api_name}/approve`, method: 'post', data: approvalVo }) }, # 5.2.2、页面处理 补充 src/views/show.vue 页面审批功能 12345678910approve(status) { let approvalVo = { processId: this.process.id, taskId: this.taskId, status: status } api.approve(approvalVo).then(response =&gt; { this.$router.push({ path: '/list/1' }) })} # 6、已处理 # 6.1、已处理接口 # 6.1.1、service 接口 1IPage&lt;ProcessVo&gt; findProcessed(Page&lt;Process&gt; pageParam); # 6.1.2、service 接口实现 1234567891011121314151617181920212223@Autowiredprivate HistoryService historyService;@Overridepublic IPage&lt;ProcessVo&gt; findProcessed(Page&lt;Process&gt; pageParam) { // 根据当前人的ID查询 HistoricTaskInstanceQuery query = historyService.createHistoricTaskInstanceQuery().taskAssignee(LoginUserInfoHelper.getUsername()).finished().orderByTaskCreateTime().desc(); List&lt;HistoricTaskInstance&gt; list = query.listPage((int) ((pageParam.getCurrent() - 1) * pageParam.getSize()), (int) pageParam.getSize()); long totalCount = query.count(); List&lt;ProcessVo&gt; processList = new ArrayList&lt;&gt;(); for (HistoricTaskInstance item : list) { String processInstanceId = item.getProcessInstanceId(); Process process = this.getOne(new LambdaQueryWrapper&lt;Process&gt;().eq(Process::getProcessInstanceId, processInstanceId)); ProcessVo processVo = new ProcessVo(); BeanUtils.copyProperties(process, processVo); processVo.setTaskId(&quot;0&quot;); processList.add(processVo); } IPage&lt;ProcessVo&gt; page = new Page&lt;ProcessVo&gt;(pageParam.getCurrent(), pageParam.getSize(), totalCount); page.setRecords(processList); return page;} # 6.1.3、controller 接口 12345678910@ApiOperation(value = &quot;已处理&quot;)@GetMapping(&quot;/findProcessed/{page}/{limit}&quot;)public Result findProcessed( @ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true) @PathVariable Long page, @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true) @PathVariable Long limit) { Page&lt;Process&gt; pageParam = new Page&lt;&gt;(page, limit); return Result.ok(processService.findProcessed(pageParam));} # 6.2、前端实现 # 6.2.1、定义 api 接口 在 src/api/process.js 添加接口 123456findProcessed(page, limit) { return request({ url: `${api_name}/findProcessed/`+page+`/`+ limit, method: 'get' }) }, # 6.2.2、页面处理 补充 src/views/list.vue 页面方法 1234567891011121314151617181920212223findProcessed() { console.log(this.pageNo) api.findProcessed(this.pageNo, this.pageSize).then(response =&gt; { console.log(response.data); if (this.refreshing) { this.list = []; this.refreshing = false; } for (let i=0;i&lt;response.data.records.length;i++) { let item = response.data.records[i] item.formValues = JSON.parse(item.formValues) this.list.push(item); } this.pages = response.data.pages; this.loading = false; if(this.pageNo &gt;= this.pages) { this.finished = true; } this.pageNo++; });}, # 7、已发起 # 7.1、已发起接口 # 7.1.1、service 接口 1IPage&lt;ProcessVo&gt; findStarted(Page&lt;ProcessVo&gt; pageParam); # 7.1.2、service 接口实现 12345678910@Override public IPage&lt;ProcessVo&gt; findStarted(Page&lt;ProcessVo&gt; pageParam) { ProcessQueryVo processQueryVo = new ProcessQueryVo(); processQueryVo.setUserId(LoginUserInfoHelper.getUserId()); IPage&lt;ProcessVo&gt; page = processMapper.selectPage(pageParam, processQueryVo); for (ProcessVo item : page.getRecords()) { item.setTaskId(&quot;0&quot;); } return page; } # 7.1.3、controller 接口 1234567891011@ApiOperation(value = &quot;已发起&quot;)@GetMapping(&quot;/findStarted/{page}/{limit}&quot;)public Result findStarted( @ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true) @PathVariable Long page, @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true) @PathVariable Long limit) { Page&lt;ProcessVo&gt; pageParam = new Page&lt;&gt;(page, limit); return Result.ok(processService.findStarted(pageParam));} # 7.2、前端实现 # 7.2.1、定义 api 接口 在 src/api/process.js 添加接口 123456findStarted(page, limit) { return request({ url: `${api_name}/findStarted/`+page+`/`+ limit, method: 'get' }) }, # 7.2.2、页面处理 补充 src/views/list.vue 页面方法 1234567891011121314151617181920212223findStarted() { console.log(this.pageNo) api.findStarted(this.pageNo, this.pageSize).then(response =&gt; { console.log(response.data); if (this.refreshing) { this.list = []; this.refreshing = false; } for (let i=0;i&lt;response.data.records.length;i++) { let item = response.data.records[i] item.formValues = JSON.parse(item.formValues) this.list.push(item); } this.pages = response.data.pages; this.loading = false; if(this.pageNo &gt;= this.pages) { this.finished = true; } this.pageNo++; });}, # 三、我的 # 1、基本信息 # 1.1、基本信息接口 # 1.1.1、service 接口 操作类：SysUserService 1Map&lt;String, Object&gt; getCurrentUser(); # 1.1.2、service 接口实现 操作类：SysUserServiceImpl 123456789101112131415161718@Autowiredprivate SysDeptService sysDeptService;@Autowiredprivate SysPostService sysPostService;@Override public Map&lt;String, Object&gt; getCurrentUser() { SysUser sysUser = sysUserMapper.selectById(LoginUserInfoHelper.getUserId()); //SysDept sysDept = sysDeptService.getById(sysUser.getDeptId()); //SysPost sysPost = sysPostService.getById(sysUser.getPostId()); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;name&quot;, sysUser.getName()); map.put(&quot;phone&quot;, sysUser.getPhone()); //map.put(&quot;deptName&quot;, sysDept.getName()); //map.put(&quot;postName&quot;, sysPost.getName()); return map; } # 1.1.3、controller 接口 操作类：SysUserController 12345@ApiOperation(value = &quot;获取当前用户基本信息&quot;)@GetMapping(&quot;getCurrentUser&quot;)public Result getCurrentUser() { return Result.ok(sysUserService.getCurrentUser());} # 1.2、前端实现 # 1.2.1、定义 api 接口 创建 src/api/userInfo.js 1234567891011import request from '@/utils/request'export default { getCurrentUser() { return request({ url: `/admin/system/sysUser/getCurrentUser/`, method: 'get' }) },} # 2.2.2、添加路由 在 src/router/index.js 添加路由 123456{ path: '/user', name: '基本信息', component: () =&gt; import('../views/user.vue'),}, # 2.2.4、页面实现 创建 src/views/user.vue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;van-nav-bar title=&quot;基本信息&quot; /&gt; &lt;div class=&quot;detail-wrap&quot;&gt; &lt;div class=&quot;item&quot;&gt; &lt;h5&gt;用户姓名：{{ user.name }}&lt;/h5&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;h5&gt;手机号：{{ user.phone }}&lt;/h5&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;h5&gt;所在部门：{{ user.deptName }}&lt;/h5&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;h5&gt;岗位：{{ user.postName }}&lt;/h5&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import api from '@/api/userInfo'export default { name: &quot;process&quot;, data() { return { user: { } }; }, created(){ this.fetchData(); }, methods: { fetchData() { // debugger api.getCurrentUser().then(response =&gt; { this.user = response.data }) } }}&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.container { padding: 20px; .detail-wrap { .item { h5 { color: #838485; margin: 10px; } p { color: #1B1F22; margin: 0; } } }}&lt;/style&gt; # 2、关于我们 # 2.1、添加路由 在 src/router/index.js 添加路由 123456{ path: '/about', name: '关于我们', component: () =&gt; import('../views/about.vue'),}, # 2.2、添加页面 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;van-nav-bar title=&quot;关于我们&quot; /&gt; &lt;div class=&quot;detail-wrap&quot;&gt; &lt;div class=&quot;item&quot;&gt; 尚硅谷IT教育（以下简称尚硅谷），隶属于北京晟程华科教育科技有限公司，是一家专业的IT教育培训机构，现拥有北京、深圳、上海、武汉、西安、成都六处教学基地。自2013年成立以来，凭借优秀的教育理念、前瞻的课程体系、专业的教学团队、科学的考评制度、严格的教务管理，已经为行业输送了大量IT技术人才。 尚硅谷开设有Java、大数据、HTML5前端等多门课程，在互联网上发布的Java、大数据、HTML5前端、Python、区块链、Linux、C语言等视频教程广受赞誉。通过面授课程、视频分享、在线学习、直播课堂、图书出版等多种方式，满足了全国编程爱好者对多样化学习场景的需求。 截止2022年10月，尚硅谷已累计发布视频教程20167集，总计时长265879分钟，B站粉丝百万播放量破亿。尚硅谷将始终秉承“让天下没有难学的技术，帮助到更多需要帮助的人”的教育理念，坚持开源精神，不断打磨产品，为众多技术爱好者提供免费的教学资源，帮助更多的人走上了软件开发之路，为中国的软件人才培养尽一点绵薄之力。 尚硅谷一直坚持“技术为王，课比天大”的发展理念，专注技术，死磕课程，团队中技术型人才占比60%以上，来自清华、北航、北邮、哈工大、中科院电子所等多所名校。尚硅谷设有独立的研究院，与多家互联网大厂的研发团队保持技术交流，保障教学内容始终基于实战项目，聘用名校名企的技术专家，源码级别的授课讲解，培养高素质软件开发人才。 尚硅谷一方面为多所高等院校大学生提供专业技术培训，一方面为阿里巴巴、百度、腾讯、华为、京东、小米、360等多家企业输送高素质软件开发人才，打通了企业招聘和人才就业的双向渠道，为整个IT产业的健康快速发展，做出了强有力的贡献！ 2014年，尚硅谷荣获新浪“最具综合实力职业培训机构”大奖； 2018年，在腾讯年度盛典中脱颖而出，被评为“2018年度综合实力教育集团”； 2020年，被凤凰网华人教育家大会评选为“2019-2020年度华人影响力职业教育品牌”； 2021年，喜获央广网“年度公信力教育品牌”。 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { name: &quot;process&quot;, data() { return { }; }, created(){ }, methods: { }}&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.container { padding: 20px; .detail-wrap { .item { color: #838485; } }}&lt;/style&gt;","link":"/2023/07/06/%E5%89%8D%E7%AB%AF%E5%AE%A1%E6%89%B9/"},{"title":"","text":"# 云尚办公系统：搭建环境 # 一、项目介绍 # 1、介绍 云尚办公系统是一套自动办公系统，系统主要包含：管理端和员工端 管理端包含：权限管理、审批管理、公众号菜单管理 员工端采用微信公众号操作，包含：办公审批、微信授权登录、消息推送等功能 项目服务器端架构：SpringBoot + MyBatisPlus + SpringSecurity + Redis + Activiti+ MySQL 前端架构：vue-admin-template + Node.js + Npm + Vue + ElementUI + Axios # 2、核心技术 基础框架：SpringBoot 数据缓存：Redis 数据库：MySQL 权限控制：SpringSecurity 工作流引擎：Activiti 前端技术：vue-admin-template + Node.js + Npm + Vue + ElementUI + Axios 微信公众号：公众号菜单 + 微信授权登录 + 消息推送 # 3、项目模块 最终服务器端架构模块 guigu-oa-parent：根目录，管理子模块： ​ common：公共类父模块 ​ common-util：核心工具类 ​ service-util：service 模块工具类 ​ spring-security：spring-security 业务模块 ​ model：实体类模块 ​ service-oa：系统服务模块 # 4、数据库 数据库从资料文件中获取，导入数据库，Activiti 表后续自动导入，数据库表如下： # 6、其他资源 如：实体类、前端项目模板等都在资料文件夹中，实体类直接复制到 model 模块，后续不做说明。 # 二、搭建环境 目前先搭建 “云尚办公系统 “项目模块。 # 1、搭建项目结构 # 1.1、搭建父工程 guigu-oa-parent 管理子模块及依赖 GroupId：com.atguigu ArtifactId：guigu-oa-parent 新建项目 直接下一步到完成 删除 src 目录 # 1.2、搭建工具类父模块 common 工具类父模块 GroupId：com.atguigu ArtifactId：common 第一步：右键点击 “guigu-oa-parent” 新建 &quot;module&quot; 第二步： 同上，忽略 # 1.3、搭建工具类模块 common-util 核心工具类 GroupId：com.atguigu ArtifactId：common-util 第一步：右键点击 “common” 新建 &quot;module&quot; 第二步： 同上，忽略 # 1.4、搭建工具类模块 service-util service 模块工具类 搭建方式如：common-util # 1.5、搭建实体类模块 model 实体类 搭建方式如：common 引入 “资料 / 实体类” 相关代码 # 1.6、搭建项目模块 service-oa service 服务模块 搭建方式如：common 项目结构如下： # 2、配置依赖关系 # 2.1、guigu-oa-parent 父模块管理依赖版本 修改 guigu-oa-parent 模块 pom.xml 文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.6.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;guigu-oa-parent&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;modules&gt; &lt;module&gt;common&lt;/module&gt; &lt;module&gt;model&lt;/module&gt; &lt;module&gt;service-oa&lt;/module&gt; &lt;/modules&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;mybatis-plus.version&gt;3.4.1&lt;/mybatis-plus.version&gt; &lt;mysql.version&gt;8.0.30&lt;/mysql.version&gt; &lt;knife4j.version&gt;3.0.3&lt;/knife4j.version&gt; &lt;jwt.version&gt;0.9.1&lt;/jwt.version&gt; &lt;fastjson.version&gt;2.0.21&lt;/fastjson.version&gt; &lt;/properties&gt; &lt;!--配置dependencyManagement锁定依赖的版本--&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--mybatis-plus 持久层--&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;${mybatis-plus.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;${mysql.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--knife4j--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;${knife4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--jjwt--&gt; &lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;${jwt.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--fastjson--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;${fastjson.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; # 2.2、common 模块 common 公共父模块 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;guigu-oa-parent&lt;/artifactId&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;service-util&lt;/module&gt; &lt;module&gt;common-util&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt; # 2.3、common-util 模块 12345678910111213141516171819202122232425262728293031323334&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;common-util&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;scope&gt;provided &lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; # 2.4、service-util 模块 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;service-util&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;common-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--mysql--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; # 2.5、model 模块 1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;guigu-oa-parent&lt;/artifactId&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;model&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--lombok用来简化实体类--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt; &lt;scope&gt;provided &lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;scope&gt;provided &lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 从资源文件夹中导入实体类 idea 中安装 lombok 插件，因为目前采用 idea2022 版本，Lombok 在 2020.2 开始不再更新，导致高版本 IDEA (2021 及之后版本) 无法在 Plugins 中搜索到 Lombok 插件，需要手动安装，或者也可以不安装插件，在实体类里面手动生成 get、set 和构造方法 第一步 到官网下载 Lombok 插件，https://plugins.jetbrains.com/plugin/6317-lombok/versions 选择最新版本 第二步 修改参数 修改 jar 包里面文件内容，可以使用压缩工具打开 jar 包 修改当前 idea 版本 第三步 在 idea 的 File -&gt; Settings -&gt; Plugins 下选中修改参数后的安装包进行安装，安装后重启 idea # 2.6、service-oa 模块 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;guigu-oa-parent&lt;/artifactId&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;service-oa&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;model&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;service-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; # 三、MyBatis-Plus 官网：https://baomidou.com/ # 1、简介 MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 # 2、主要特点 无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错 支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题 内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用 内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 # 3、依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt; # 四、MyBatis-Plus 入门 前面介绍了 MyBatis-Plus，当前就以角色管理为例讲解 MyBatis-Plus 的使用 # 1、配置文件 配置 MySQL 数据库的相关配置及 Mybatis-Plus 日志 application.yml 12345spring: application: name: service-oa profiles: active: dev application-dev.yml 123456789101112server: port: 8800mybatis-plus: configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 查看日志spring: datasource: type: com.zaxxer.hikari.HikariDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/guigu-oa?serverTimezone=GMT%2B8&amp;useSSL=false&amp;characterEncoding=utf-8 username: root password: root # 2、启动类 在 Spring Boot 启动类中添加 @MapperScan 注解，扫描 Mapper 文件夹： 12345678910111213141516package com.atguigu;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplication@ComponentScan(&quot;com.atguigu&quot;)@MapperScan(&quot;com.atguigu.*.mapper&quot;)public class ServiceAuthApplication { public static void main(String[] args) { SpringApplication.run(ServiceAuthApplication.class, args); }} # 3、实体类 已引入，实体类说明： 实体类注解详细文档：https://baomidou.com/pages/223848/ @TableName：表名注解，标识实体类对应的表 @TableId：主键注解，type = IdType.AUTO（数据库 ID 自增） @TableField：字段注解（非主键） @TableLogic：逻辑删除 1234567891011121314151617181920212223242526package com.atguigu.model.system;import com.baomidou.mybatisplus.annotation.TableField;import com.baomidou.mybatisplus.annotation.TableName;import com.atguigu.model.base.BaseEntity;import lombok.Data;@Data@TableName(&quot;sys_role&quot;)public class SysRole extends BaseEntity { private static final long serialVersionUID = 1L; //角色名称 @TableField(&quot;role_name&quot;) private String roleName; //角色编码 @TableField(&quot;role_code&quot;) private String roleCode; //描述 @TableField(&quot;description&quot;) private String description;} # 4、添加 Mapper 类 12345678910package com.atguigu.auth.mapper;import com.atguigu.model.auth.SysRole;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface SysRoleMapper extends BaseMapper&lt;SysRole&gt; {} com.baomidou.mybatisplus.core.mapper.BaseMapper 这是 Mybatis-Plus 提供的默认 Mapper 接口。 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.baomidou.mybatisplus.core.mapper;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import java.io.Serializable;import java.util.Collection;import java.util.List;import java.util.Map;import org.apache.ibatis.annotations.Param;public interface BaseMapper&lt;T&gt; extends Mapper&lt;T&gt; { int insert(T entity); int deleteById(Serializable id); int deleteByMap(@Param(&quot;cm&quot;) Map&lt;String, Object&gt; columnMap); int delete(@Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); int deleteBatchIds(@Param(&quot;coll&quot;) Collection&lt;? extends Serializable&gt; idList); int updateById(@Param(&quot;et&quot;) T entity); int update(@Param(&quot;et&quot;) T entity, @Param(&quot;ew&quot;) Wrapper&lt;T&gt; updateWrapper); T selectById(Serializable id); List&lt;T&gt; selectBatchIds(@Param(&quot;coll&quot;) Collection&lt;? extends Serializable&gt; idList); List&lt;T&gt; selectByMap(@Param(&quot;cm&quot;) Map&lt;String, Object&gt; columnMap); T selectOne(@Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); Integer selectCount(@Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); List&lt;T&gt; selectList(@Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); List&lt;Object&gt; selectObjs(@Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); &lt;E extends IPage&lt;T&gt;&gt; E selectPage(E page, @Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper); &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E selectMapsPage(E page, @Param(&quot;ew&quot;) Wrapper&lt;T&gt; queryWrapper);} # 5、测试 Mapper 接口 12345678910111213141516171819202122232425262728package com.atguigu;import com.atguigu.model.system.SysRole;import com.atguigu.system.mapper.SysRoleMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class SysRoleMapperTest { @Autowired private SysRoleMapper sysRoleMapper; @Test public void testSelectList() { System.out.println((&quot;----- selectAll method test ------&quot;)); //UserMapper 中的 selectList() 方法的参数为 MP 内置的条件封装器 Wrapper //所以不填写就是无任何条件 List&lt;SysRole&gt; users = sysRoleMapper.selectList(null); users.forEach(System.out::println); }} 注意： IDEA 在 sysRoleMapper 处报错，因为找不到注入的对象，因为类是动态创建的，但是程序可以正确的执行。 为了避免报错，可以在 mapper 层 的接口上添加 @Repository 或直接使用 @Resource 代替 @Autowired。 控制台输出： 通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！ # 6、CRUD 测试 # 6.1、insert 添加 # 6.1.1、示例 1234567891011@Testpublic void testInsert(){ SysRole sysRole = new SysRole(); sysRole.setRoleName(&quot;角色管理员&quot;); sysRole.setRoleCode(&quot;role&quot;); sysRole.setDescription(&quot;角色管理员&quot;); int result = sysRoleMapper.insert(sysRole); System.out.println(result); //影响的行数 System.out.println(sysRole); //id自动回填} # 6.1.2、主键策略 1、ID_WORKER MyBatis-Plus 默认的主键策略是：ID_WORKER 全局唯一 ID 2、自增策略 要想主键自增需要配置如下主键策略 需要在创建数据表的时候设置主键自增 实体字段中配置 @TableId (type = IdType.AUTO) 12@TableId(type = IdType.AUTO)private Long id; 其它主键策略：分析 IdType 源码可知 1234567891011121314151617181920212223242526272829303132333435363738394041424344public enum IdType { /** * 数据库ID自增 */ AUTO(0), /** * 该类型为未设置主键类型 */ NONE(1), /** * 用户输入ID * 该类型可以通过自己注册自动填充插件进行填充 */ INPUT(2), /** * 全局唯一ID */ ASSIGN_ID(3), /** * 全局唯一ID (UUID) */ ASSIGN_UUID(4), /** @deprecated */ @Deprecated ID_WORKER(3), /** @deprecated */ @Deprecated ID_WORKER_STR(3), /** @deprecated */ @Deprecated UUID(4); private final int key; private IdType(int key) { this.key = key; } public int getKey() { return this.key; }} # 6.2、更新 12345678910@Testpublic void testUpdateById(){ SysRole sysRole = new SysRole(); sysRole.setId(1L); sysRole.setRoleName(&quot;角色管理员1&quot;); int result = sysRoleMapper.updateById(sysRole); System.out.println(result);} # 6.3、删除 # 6.3.1、根据 id 删除 1234567891011121314/** * application-dev.yml 加入配置 * 此为默认值，如果你的默认值和mp默认的一样，则不需要该配置 * mybatis-plus: * global-config: * db-config: * logic-delete-value: 1 * logic-not-delete-value: 0 */@Testpublic void testDeleteById(){ int result = sysRoleMapper.deleteById(2L); System.out.println(result);} # 6.3.2、批量删除 12345@Testpublic void testDeleteBatchIds() { int result = sysRoleMapper.deleteBatchIds(Arrays.asList(1, 1)); System.out.println(result);} # 6.4、MyBatis-Plus 条件构造器 Wrapper ： 条件构造抽象类，最顶端父类 AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件 ​ QueryWrapper ： Entity 对象封装操作类，不是用 lambda 语法 ​ UpdateWrapper ： Update 条件封装，用于 Entity 对象更新操作 AbstractLambdaWrapper ： Lambda 语法使用 Wrapper 统一处理解析 lambda 获取 column。 ​ LambdaQueryWrapper ：看名称也能明白就是用于 Lambda 语法使用的查询 Wrapper ​ LambdaUpdateWrapper ： Lambda 更新封装 Wrapper 注意：以下条件构造器的方法入参中的 column 均表示数据库字段 123456789101112131415@Testpublic void testSelect1() { QueryWrapper&lt;SysRole&gt; queryWrapper = new QueryWrapper&lt;&gt;(); queryWrapper.eq(&quot;role_code&quot;, &quot;role&quot;); List&lt;SysRole&gt; users = sysRoleMapper.selectList(queryWrapper); System.out.println(users);}@Testpublic void testSelect2() { LambdaQueryWrapper&lt;SysRole&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;(); queryWrapper.eq(SysRole::getRoleCode, &quot;role&quot;); List&lt;SysRole&gt; users = sysRoleMapper.selectList(queryWrapper); System.out.println(users);} 其他条件构造可自行测试 # 6、MyBatis-Plus 封装 service 层 # 6.1、添加 service 接口 1234567891011package com.atguigu.auth.service;import com.atguigu.model.auth.SysRole;import com.baomidou.mybatisplus.extension.service.IService;import java.util.List;public interface SysRoleService extends IService&lt;SysRole&gt; {} com.baomidou.mybatisplus.extension.service.IService 这是 Mybatis-Plus 提供的默认 Service 接口。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200package com.baomidou.mybatisplus.extension.service;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.Assert;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;import com.baomidou.mybatisplus.extension.conditions.query.QueryChainWrapper;import com.baomidou.mybatisplus.extension.conditions.update.LambdaUpdateChainWrapper;import com.baomidou.mybatisplus.extension.conditions.update.UpdateChainWrapper;import com.baomidou.mybatisplus.extension.kotlin.KtQueryChainWrapper;import com.baomidou.mybatisplus.extension.kotlin.KtUpdateChainWrapper;import com.baomidou.mybatisplus.extension.toolkit.ChainWrappers;import com.baomidou.mybatisplus.extension.toolkit.SqlHelper;import java.io.Serializable;import java.util.Collection;import java.util.List;import java.util.Map;import java.util.Objects;import java.util.function.Function;import java.util.stream.Collectors;import org.springframework.transaction.annotation.Transactional;public interface IService&lt;T&gt; { int DEFAULT_BATCH_SIZE = 1000; default boolean save(T entity) { return SqlHelper.retBool(this.getBaseMapper().insert(entity)); } @Transactional( rollbackFor = {Exception.class} ) default boolean saveBatch(Collection&lt;T&gt; entityList) { return this.saveBatch(entityList, 1000); } boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize); @Transactional( rollbackFor = {Exception.class} ) default boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList) { return this.saveOrUpdateBatch(entityList, 1000); } boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize); default boolean removeById(Serializable id) { return SqlHelper.retBool(this.getBaseMapper().deleteById(id)); } default boolean removeByMap(Map&lt;String, Object&gt; columnMap) { Assert.notEmpty(columnMap, &quot;error: columnMap must not be empty&quot;, new Object[0]); return SqlHelper.retBool(this.getBaseMapper().deleteByMap(columnMap)); } default boolean remove(Wrapper&lt;T&gt; queryWrapper) { return SqlHelper.retBool(this.getBaseMapper().delete(queryWrapper)); } default boolean removeByIds(Collection&lt;? extends Serializable&gt; idList) { return CollectionUtils.isEmpty(idList) ? false : SqlHelper.retBool(this.getBaseMapper().deleteBatchIds(idList)); } default boolean updateById(T entity) { return SqlHelper.retBool(this.getBaseMapper().updateById(entity)); } default boolean update(Wrapper&lt;T&gt; updateWrapper) { return this.update((Object)null, updateWrapper); } default boolean update(T entity, Wrapper&lt;T&gt; updateWrapper) { return SqlHelper.retBool(this.getBaseMapper().update(entity, updateWrapper)); } @Transactional( rollbackFor = {Exception.class} ) default boolean updateBatchById(Collection&lt;T&gt; entityList) { return this.updateBatchById(entityList, 1000); } boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize); boolean saveOrUpdate(T entity); default T getById(Serializable id) { return this.getBaseMapper().selectById(id); } default List&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList) { return this.getBaseMapper().selectBatchIds(idList); } default List&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap) { return this.getBaseMapper().selectByMap(columnMap); } default T getOne(Wrapper&lt;T&gt; queryWrapper) { return this.getOne(queryWrapper, true); } T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx); Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper); &lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper); default int count() { return this.count(Wrappers.emptyWrapper()); } default int count(Wrapper&lt;T&gt; queryWrapper) { return SqlHelper.retCount(this.getBaseMapper().selectCount(queryWrapper)); } default List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper) { return this.getBaseMapper().selectList(queryWrapper); } default List&lt;T&gt; list() { return this.list(Wrappers.emptyWrapper()); } default &lt;E extends IPage&lt;T&gt;&gt; E page(E page, Wrapper&lt;T&gt; queryWrapper) { return this.getBaseMapper().selectPage(page, queryWrapper); } default &lt;E extends IPage&lt;T&gt;&gt; E page(E page) { return this.page(page, Wrappers.emptyWrapper()); } default List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper) { return this.getBaseMapper().selectMaps(queryWrapper); } default List&lt;Map&lt;String, Object&gt;&gt; listMaps() { return this.listMaps(Wrappers.emptyWrapper()); } default List&lt;Object&gt; listObjs() { return this.listObjs(Function.identity()); } default &lt;V&gt; List&lt;V&gt; listObjs(Function&lt;? super Object, V&gt; mapper) { return this.listObjs(Wrappers.emptyWrapper(), mapper); } default List&lt;Object&gt; listObjs(Wrapper&lt;T&gt; queryWrapper) { return this.listObjs(queryWrapper, Function.identity()); } default &lt;V&gt; List&lt;V&gt; listObjs(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper) { return (List)this.getBaseMapper().selectObjs(queryWrapper).stream().filter(Objects::nonNull).map(mapper).collect(Collectors.toList()); } default &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E pageMaps(E page, Wrapper&lt;T&gt; queryWrapper) { return this.getBaseMapper().selectMapsPage(page, queryWrapper); } default &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E pageMaps(E page) { return this.pageMaps(page, Wrappers.emptyWrapper()); } BaseMapper&lt;T&gt; getBaseMapper(); Class&lt;T&gt; getEntityClass(); default QueryChainWrapper&lt;T&gt; query() { return ChainWrappers.queryChain(this.getBaseMapper()); } default LambdaQueryChainWrapper&lt;T&gt; lambdaQuery() { return ChainWrappers.lambdaQueryChain(this.getBaseMapper()); } default KtQueryChainWrapper&lt;T&gt; ktQuery() { return ChainWrappers.ktQueryChain(this.getBaseMapper(), this.getEntityClass()); } default KtUpdateChainWrapper&lt;T&gt; ktUpdate() { return ChainWrappers.ktUpdateChain(this.getBaseMapper(), this.getEntityClass()); } default UpdateChainWrapper&lt;T&gt; update() { return ChainWrappers.updateChain(this.getBaseMapper()); } default LambdaUpdateChainWrapper&lt;T&gt; lambdaUpdate() { return ChainWrappers.lambdaUpdateChain(this.getBaseMapper()); } default boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper) { return this.update(entity, updateWrapper) || this.saveOrUpdate(entity); }} # 6.2、添加 service 接口实现 12345678910111213141516package com.atguigu.auth.service.impl;import com.atguigu.auth.mapper.SysRoleMapper;import com.atguigu.auth.service.SysRoleService;import com.atguigu.model.auth.SysRole;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;public class SysRoleServiceImpl extends ServiceImpl&lt;SysRoleMapper, SysRole&gt; implements SysRoleService { @Autowired private SysRoleMapper sysRoleMapper;} com.baomidou.mybatisplus.extension.service.impl.ServiceImpl 这是 Mybatis-Plus 提供的默认 Service 接口实现。 # 6.3、测试 Service 接口 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package com.atguigu;import com.atguigu.model.system.SysRole;import com.atguigu.system.mapper.SysRoleMapper;import com.atguigu.system.service.SysRoleService;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class SysRoleServiceTest { @Autowired private SysRoleService sysRoleService; @Test public void testSelectList() { System.out.println((&quot;----- selectAll method test ------&quot;)); //UserMapper 中的 selectList() 方法的参数为 MP 内置的条件封装器 Wrapper //所以不填写就是无任何条件 List&lt;SysRole&gt; users = sysRoleService.list(); users.forEach(System.out::println); } @Test public void testInsert(){ SysRole sysRole = new SysRole(); sysRole.setRoleName(&quot;角色管理员&quot;); sysRole.setRoleCode(&quot;role&quot;); sysRole.setDescription(&quot;角色管理员&quot;); boolean result = sysRoleService.save(sysRole); System.out.println(result); //影响的行数 System.out.println(sysRole); //id自动回填 } @Test public void testUpdateById(){ SysRole sysRole = new SysRole(); sysRole.setId(1L); sysRole.setRoleName(&quot;角色管理员1&quot;); boolean result = sysRoleService.updateById(sysRole); System.out.println(result); } @Test public void testDeleteById(){ boolean result = sysRoleService.removeById(2L); System.out.println(result); } @Test public void testSelect1() { QueryWrapper&lt;SysRole&gt; queryWrapper = new QueryWrapper&lt;&gt;(); queryWrapper.ge(&quot;role_code&quot;, &quot;role&quot;); List&lt;SysRole&gt; users = sysRoleService.list(queryWrapper); System.out.println(users); } @Test public void testSelect2() { LambdaQueryWrapper&lt;SysRole&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;(); queryWrapper.ge(SysRole::getRoleCode, &quot;role&quot;); List&lt;SysRole&gt; users = sysRoleService.list(queryWrapper); System.out.println(users); }} # 五、角色管理 # 1、测试 controller 层 # 1.1、添加 Controller 123456789101112131415161718192021222324package com.atguigu.auth.controller;import com.atguigu.auth.service.SysRoleService;import com.atguigu.model.auth.SysRole;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestController@RequestMapping(&quot;/admin/system/sysRole&quot;)public class SysRoleController { @Autowired private SysRoleService sysRoleService; @GetMapping(&quot;findAll&quot;) public List&lt;SysRole&gt; findAll() { List&lt;SysRole&gt; roleList = sysRoleService.list(); return roleList; }} # 1.2、测试 Controller 接口 http://localhost:8800/admin/system/sysRole/findAll # 2、定义统一返回结果对象 项目中我们会将响应封装成 json 返回，一般我们会将所有接口的数据格式统一， 使前端 (iOS Android, Web) 对数据的操作更一致、轻松。 一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容 例如，我们的系统要求返回的基本数据格式如下： 列表： 1234567891011{ &quot;code&quot;: 200, &quot;message&quot;: &quot;成功&quot;, &quot;data&quot;: [ { &quot;id&quot;: 2, &quot;roleName&quot;: &quot;系统管理员&quot; } ], &quot;ok&quot;: true} 分页： 123456789101112131415161718192021222324{ &quot;code&quot;: 200, &quot;message&quot;: &quot;成功&quot;, &quot;data&quot;: { &quot;records&quot;: [ { &quot;id&quot;: 2, &quot;roleName&quot;: &quot;系统管理员&quot; }, { &quot;id&quot;: 3, &quot;name&quot;: &quot;普通管理员&quot; } ], &quot;total&quot;: 10, &quot;size&quot;: 3, &quot;current&quot;: 1, &quot;orders&quot;: [], &quot;hitCount&quot;: false, &quot;searchCount&quot;: true, &quot;pages&quot;: 2 }, &quot;ok&quot;: true} 没有返回数据： 123456{ &quot;code&quot;: 200, &quot;message&quot;: &quot;成功&quot;, &quot;data&quot;: null, &quot;ok&quot;: true} 失败： 123456{ &quot;code&quot;: 201, &quot;message&quot;: &quot;失败&quot;, &quot;data&quot;: null, &quot;ok&quot;: false} # 2.1、定义统一返回结果对象 操作模块：common-util 后续其他模块也会用到，故抽取到 common-util 模块 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.atguigu.common.result;import lombok.Data;/** * 全局统一返回结果类 * */@Datapublic class Result&lt;T&gt; { //返回码 private Integer code; //返回消息 private String message; //返回数据 private T data; public Result(){} // 返回数据 protected static &lt;T&gt; Result&lt;T&gt; build(T data) { Result&lt;T&gt; result = new Result&lt;T&gt;(); if (data != null) result.setData(data); return result; } public static &lt;T&gt; Result&lt;T&gt; build(T body, Integer code, String message) { Result&lt;T&gt; result = build(body); result.setCode(code); result.setMessage(message); return result; } public static &lt;T&gt; Result&lt;T&gt; build(T body, ResultCodeEnum resultCodeEnum) { Result&lt;T&gt; result = build(body); result.setCode(resultCodeEnum.getCode()); result.setMessage(resultCodeEnum.getMessage()); return result; } public static&lt;T&gt; Result&lt;T&gt; ok(){ return Result.ok(null); } /** * 操作成功 * @param data baseCategory1List * @param &lt;T&gt; * @return */ public static&lt;T&gt; Result&lt;T&gt; ok(T data){ Result&lt;T&gt; result = build(data); return build(data, ResultCodeEnum.SUCCESS); } public static&lt;T&gt; Result&lt;T&gt; fail(){ return Result.fail(null); } /** * 操作失败 * @param data * @param &lt;T&gt; * @return */ public static&lt;T&gt; Result&lt;T&gt; fail(T data){ Result&lt;T&gt; result = build(data); return build(data, ResultCodeEnum.FAIL); } public Result&lt;T&gt; message(String msg){ this.setMessage(msg); return this; } public Result&lt;T&gt; code(Integer code){ this.setCode(code); return this; }} 统一返回结果状态信息类 下面的状态后续都会用到，所以直接引入了 1234567891011121314151617181920212223242526272829package com.atguigu.common.result;import lombok.Getter;/** * 统一返回结果状态信息类 * */@Getterpublic enum ResultCodeEnum { SUCCESS(200,&quot;成功&quot;), FAIL(201, &quot;失败&quot;), SERVICE_ERROR(2012, &quot;服务异常&quot;), DATA_ERROR(204, &quot;数据异常&quot;), LOGIN_AUTH(208, &quot;未登陆&quot;), PERMISSION(209, &quot;没有权限&quot;) ; private Integer code; private String message; private ResultCodeEnum(Integer code, String message) { this.code = code; this.message = message; }} # 2.2、改造 controller 方法 12345@GetMapping(&quot;findAll&quot;)public Result&lt;List&lt;SysRole&gt;&gt; findAll() { List&lt;SysRole&gt; roleList = sysRoleService.list(); return Result.ok(roleList);} # 2.3、测试接口 http://localhost:8800/admin/system/sysRole/findAll # 3、knife4j 文档地址：https://doc.xiaominfo.com/ knife4j 是为 Java MVC 框架集成 Swagger 生成 Api 文档的增强解决方案。 # 3.1、Swagger 介绍 前后端分离开发模式中，api 文档是最好的沟通方式。 Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。 1、及时性 (接口变更后，能够及时准确地通知相关前后端开发人员) 2、规范性 (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息) 3、一致性 (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧) 4、可测性 (直接在接口文档上进行测试，以方便理解业务) # 3.2、集成 knife4j knife4j 属于 service 模块公共资源，因此我们集成到 service-uitl 模块 # 3.2.1 添加依赖 操作模块：service-uitl 1234&lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt; 说明：guigu-auth-parent 已加入版本管理 # 3.2.2 添加 knife4j 配置类 操作模块：service-uitl 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.atguigu.common.config.knife4j;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.ParameterBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.schema.ModelRef;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.service.Parameter;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;import java.util.ArrayList;import java.util.List;/** * knife4j配置信息 */@Configuration@EnableSwagger2WebMvcpublic class Knife4jConfig { @Bean public Docket adminApiConfig(){ List&lt;Parameter&gt; pars = new ArrayList&lt;&gt;(); ParameterBuilder tokenPar = new ParameterBuilder(); tokenPar.name(&quot;token&quot;) .description(&quot;用户token&quot;) .defaultValue(&quot;&quot;) .modelRef(new ModelRef(&quot;string&quot;)) .parameterType(&quot;header&quot;) .required(false) .build(); pars.add(tokenPar.build()); //添加head参数end Docket adminApi = new Docket(DocumentationType.SWAGGER_2) .groupName(&quot;adminApi&quot;) .apiInfo(adminApiInfo()) .select() //只显示admin路径下的页面 .apis(RequestHandlerSelectors.basePackage(&quot;com.atguigu&quot;)) .paths(PathSelectors.regex(&quot;/admin/.*&quot;)) .build() .globalOperationParameters(pars); return adminApi; } private ApiInfo adminApiInfo(){ return new ApiInfoBuilder() .title(&quot;后台管理系统-API文档&quot;) .description(&quot;本文档描述了后台管理系统微服务接口定义&quot;) .version(&quot;1.0&quot;) .contact(new Contact(&quot;atguigu&quot;, &quot;http://atguigu.com&quot;, &quot;atguigu@qq.com&quot;)) .build(); }} # 3.2.3 Controller 层添加注解 1234567891011121314151617181920212223242526272829package com.atguigu.system.controller;import com.atguigu.system.service.SysRoleService;import com.atguigu.common.result.Result;import com.atguigu.model.system.SysRole;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@Api(tags = &quot;角色管理&quot;)@RestController@RequestMapping(&quot;/admin/system/sysRole&quot;)public class SysRoleController { @Autowired private SysRoleService sysRoleService; @ApiOperation(value = &quot;获取全部角色列表&quot;) @GetMapping(&quot;findAll&quot;) public Result&lt;List&lt;SysRole&gt;&gt; findAll() { List&lt;SysRole&gt; roleList = sysRoleService.list(); return Result.ok(roleList); }} # 3.2.4、测试 http://localhost:8800/doc.html # 4、分页查询 # 4.1、配置分页插件 操作模块：service-uitl，service 公共资源 说明：我们将 @MapperScan (“com.atguigu.auth.mapper”) 提取到该配置类上面，统一管理，启动类就不需要了。 1234567891011121314151617181920212223242526272829package com.atguigu.common.config.mp;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.autoconfigure.ConfigurationCustomizer;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@MapperScan(&quot;com.atguigu.auth.mapper&quot;)public class MybatisPlusConfig { /** * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除) */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } @Bean public ConfigurationCustomizer configurationCustomizer() { return configuration -&gt; configuration.setUseDeprecatedExecutor(false); }} # 4.2、分页 controller 12345678910111213141516171819202122232425//条件分页查询//page 当前页 limit 每页显示记录数//SysRoleQueryVo 条件对象@ApiOperation(&quot;条件分页查询&quot;)@GetMapping(&quot;{page}/{limit}&quot;)public Result pageQueryRole(@PathVariable Long page, @PathVariable Long limit, SysRoleQueryVo sysRoleQueryVo) { //调用service的方法实现 //1 创建Page对象，传递分页相关参数 //page 当前页 limit 每页显示记录数 Page&lt;SysRole&gt; pageParam = new Page&lt;&gt;(page,limit); //2 封装条件，判断条件是否为空，不为空进行封装 LambdaQueryWrapper&lt;SysRole&gt; wrapper = new LambdaQueryWrapper&lt;&gt;(); String roleName = sysRoleQueryVo.getRoleName(); if(!StringUtils.isEmpty(roleName)) { //封装 like模糊查询 wrapper.like(SysRole::getRoleName,roleName); } //3 调用方法实现 IPage&lt;SysRole&gt; pageModel = sysRoleService.page(pageParam, wrapper); return Result.ok(pageModel);} # 5、其他 controller 方法 说明：通过 knife4j 测试接口 12345678910111213141516171819202122232425262728293031323334@ApiOperation(value = &quot;获取&quot;)@GetMapping(&quot;get/{id}&quot;)public Result get(@PathVariable Long id) { SysRole role = sysRoleService.getById(id); return Result.ok(role);}@ApiOperation(value = &quot;新增角色&quot;)@PostMapping(&quot;save&quot;)public Result save(@RequestBody @Validated SysRole role) { sysRoleService.save(role); return Result.ok();}@ApiOperation(value = &quot;修改角色&quot;)@PutMapping(&quot;update&quot;)public Result updateById(@RequestBody SysRole role) { sysRoleService.updateById(role); return Result.ok();}@ApiOperation(value = &quot;删除角色&quot;)@DeleteMapping(&quot;remove/{id}&quot;)public Result remove(@PathVariable Long id) { sysRoleService.removeById(id); return Result.ok();}@ApiOperation(value = &quot;根据id列表删除&quot;)@DeleteMapping(&quot;batchRemove&quot;)public Result batchRemove(@RequestBody List&lt;Long&gt; idList) { sysRoleService.removeByIds(idList); return Result.ok();} 配置日期时间格式 application-dev.yml 添加以下内容 123jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 # 6、统一异常处理 # 6.1、制造异常 除以 0 1int a = 10/0; 我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要统一异常处理。 # 6.2、全局异常处理 # 6.2.1、创建统一异常处理器 操作模块：service-util 12345678910111213141516171819202122package com.atguigu.common.handler;import com.atguigu.common.result.Result;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;/** * 全局异常处理类 * */@ControllerAdvicepublic class GlobalExceptionHandler { @ExceptionHandler(Exception.class) @ResponseBody public Result error(Exception e){ e.printStackTrace(); return Result.fail(); }} # 6.2.1、测试 # 6.3、处理特定异常 # 6.3.1、添加异常处理方法 GlobalExceptionHandler.java 中添加 123456@ExceptionHandler(ArithmeticException.class)@ResponseBodypublic Result error(ArithmeticException e){ e.printStackTrace(); return Result.fail().message(&quot;执行了特定异常处理&quot;);} # 6.3.2、测试 # 6.4、处理自定义异常 # 6.4.1、创建自定义异常类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.atguigu.common.execption;import com.atguigu.common.result.ResultCodeEnum;import lombok.Data;/** * 自定义全局异常类 * */@Datapublic class GuiguException extends RuntimeException { private Integer code; private String message; /** * 通过状态码和错误消息创建异常对象 * @param code * @param message */ public GuiguException(Integer code, String message) { super(message); this.code = code; this.message = message; } /** * 接收枚举类型对象 * @param resultCodeEnum */ public GuiguException(ResultCodeEnum resultCodeEnum) { super(resultCodeEnum.getMessage()); this.code = resultCodeEnum.getCode(); this.message = resultCodeEnum.getMessage(); } @Override public String toString() { return &quot;GuliException{&quot; + &quot;code=&quot; + code + &quot;, message=&quot; + this.getMessage() + '}'; }} # 6.4.2、业务中需要位置抛出 12345try { int a = 10/0;}catch(Exception e) { throw new GuiguException(20001,&quot;出现自定义异常&quot;);} # 6.4.3、添加异常处理方法 GlobalExceptionHandler.java 中添加 123456@ExceptionHandler(GuiguException.class)@ResponseBodypublic Result error(GuiguException e){ e.printStackTrace(); return Result.fail().message(e.getMsg()).code(e.getCode());} # 6.4.4、测试","link":"/2023/07/06/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"},{"title":"","text":"# 云尚办公系统：权限管理 # 一、权限管理 # 1、权限管理介绍 每个系统的权限功能都不尽相同，各有其自身的业务特点，对权限管理的设计也都各有特色。不过不管是怎样的权限设计，大致可归为三种：页面权限 (菜单级)、操作权限（按钮级）、数据权限。当前系统只是讲解：菜单权限与按钮权限的控制。 # 1.1、菜单权限 菜单权限就是对页面的控制，就是有这个权限的用户才能访问这个页面，没这个权限的用户就无法访问，它是以整个页面为维度，对权限的控制并没有那么细，所以是一种粗颗粒权限。 # 1.2、按钮权限 按钮权限就是将页面的操作视为资源，比如删除操作，有些人可以操作有些人不能操作。对于后端来说，操作就是一个接口。于前端来说，操作往往是一个按钮，是一种细颗粒权限。 # 1.3、权限管理设计思路 前面我们讲解了用户管理、角色管理及菜单管理，我们把菜单权限分配给角色，把角色分配给用户，那么用户就拥有了角色的所有权限（权限包含：菜单权限与按钮权限）。 接下来需要实现这两个接口： 1、用户登录 2、登录成功根据 token 获取用户相关信息（菜单权限及按钮权限数据等） 用户登录我们需要用到 JWT，接下来讲解 JWT。 # 2、JWT # 2.1、JWT 介绍 JWT 是 JSON Web Token 的缩写，即 JSON Web 令牌，是一种自包含令牌。 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准。 JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。 JWT 最重要的作用就是对 token 信息的防伪作用。 # 2.2、JWT 令牌的组成 一个 JWT 由三个部分组成：JWT 头、有效载荷、签名哈希 最后由这三者组合进行 base64url 编码得到 JWT 典型的，一个 JWT 看起来如下图：该对象为一个很长的字符串，字符之间通过 &quot;.&quot; 分隔符分为三个子串。 https://jwt.io/ JWT 头 JWT 头部分是一个描述 JWT 元数据的 JSON 对象，通常如下所示。 1234{ &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;} 在上面的代码中，alg 属性表示签名使用的算法，默认为 HMAC SHA256（写为 HS256）； typ 属性表示令牌的类型，JWT 令牌统一写为 JWT。 最后，使用 Base64 URL 算法将上述 JSON 对象转换为字符串保存。 有效载荷 有效载荷部分，是 JWT 的主体内容部分，也是一个 JSON 对象，包含需要传递的数据。 JWT 指定七个默认字段供选择。 1234567iss: jwt签发者sub: 主题aud: 接收jwt的一方exp: jwt的过期时间，这个过期时间必须要大于签发时间nbf: 定义在什么时间之前，该jwt都是不可用的.iat: jwt的签发时间jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。 12345{ &quot;name&quot;: &quot;Helen&quot;, &quot;role&quot;: &quot;editor&quot;, &quot;avatar&quot;: &quot;helen.jpg&quot;} 请注意，默认情况下 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。 JSON 对象也使用 Base64 URL 算法转换为字符串保存。 签名哈希 签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。 首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为 HMAC SHA256）根据以下公式生成签名。 1HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(claims), secret) ==&gt; 签名hash 在计算出签名哈希后，JWT 头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用 &quot;.&quot; 分隔，就构成整个 JWT 对象。 Base64URL 算法 如前所述，JWT 头和有效载荷序列化的算法都用到了 Base64URL。该算法和常见 Base64 算法类似，稍有差别。 作为令牌的 JWT 可以放在 URL 中（例如 api.example/?token=xxx）。 Base64 中用的三个字符是 &quot;+“，”/“和”=“，由于在 URL 中有特殊含义，因此 Base64URL 中对他们做了替换：”=“去掉，”+“用”-“替换，”/“用”_&quot; 替换，这就是 Base64URL 算法。 # 2.3、项目集成 JWT 操作模块：common-util # 2.3.1、 引入依赖 1234&lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt;&lt;/dependency&gt; # 2.3.2、 添加 JWT 帮助类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.atguigu.common.jwt;import io.jsonwebtoken.*;import org.springframework.util.StringUtils;import java.util.Date;public class JwtHelper { private static long tokenExpiration = 365 * 24 * 60 * 60 * 1000; private static String tokenSignKey = &quot;123456&quot;; public static String createToken(Long userId, String username) { String token = Jwts.builder() .setSubject(&quot;AUTH-USER&quot;) .setExpiration(new Date(System.currentTimeMillis() + tokenExpiration)) .claim(&quot;userId&quot;, userId) .claim(&quot;username&quot;, username) .signWith(SignatureAlgorithm.HS512, tokenSignKey) .compressWith(CompressionCodecs.GZIP) .compact(); return token; } public static Long getUserId(String token) { try { if (StringUtils.isEmpty(token)) return null; Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token); Claims claims = claimsJws.getBody(); Integer userId = (Integer) claims.get(&quot;userId&quot;); return userId.longValue(); } catch (Exception e) { e.printStackTrace(); return null; } } public static String getUsername(String token) { try { if (StringUtils.isEmpty(token)) return &quot;&quot;; Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token); Claims claims = claimsJws.getBody(); return (String) claims.get(&quot;username&quot;); } catch (Exception e) { e.printStackTrace(); return null; } } public static void main(String[] args) { String token = JwtHelper.createToken(1L, &quot;admin&quot;); System.out.println(token); System.out.println(JwtHelper.getUserId(token)); System.out.println(JwtHelper.getUsername(token)); }} # 3、用户登录 # 3.1、修改登录方法 修改 IndexController 类登录方法 123456789101112131415161718192021@Autowiredprivate SysUserService sysUserService; @ApiOperation(value = &quot;登录&quot;)@PostMapping(&quot;login&quot;)public Result login(@RequestBody LoginVo loginVo) { SysUser sysUser = sysUserService.getByUsername(loginVo.getUsername()); if(null == sysUser) { throw new GuiguException(201,&quot;用户不存在&quot;); } if(!MD5.encrypt(loginVo.getPassword()).equals(loginVo.getPassword())) { throw new GuiguException(201,&quot;密码错误&quot;); } if(sysUser.getStatus().intValue() == 0) { throw new GuiguException(201,&quot;用户被禁用&quot;); } Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;token&quot;, JwtHelper.createToken(sysUser.getId(), sysUser.getUsername())); return Result.ok(map);} # 3.2、添加 service 接口及实现 1SysUser getByUsername(String username); 接口实现： 1234@Overridepublic SysUser getByUsername(String username) { return this.getOne(new LambdaQueryWrapper&lt;SysUser&gt;().eq(SysUser::getUsername, username));} # 4、获取用户信息 接口数据： 123456Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();map.put(&quot;roles&quot;,&quot;[admin]&quot;);map.put(&quot;name&quot;,&quot;admin&quot;);map.put(&quot;avatar&quot;,&quot;https://oss.aliyuncs.com/aliyun_id_photo_bucket/default_handsome.jpg&quot;);map.put(&quot;buttons&quot;, new ArrayList&lt;&gt;());map.put(&quot;routers&quot;, new ArrayList&lt;&gt;()); 说明：主要是获取当前登录用户的菜单权限及按钮权限数据 # 4.1、获取用户菜单权限 说明：获取菜单权限数据，我们要将菜单数据构建成路由数据结构 # 4.1.1、定义接口 SysMenuService 类 123456/** * 获取用户菜单 * @param userId * @return */List&lt;RouterVo&gt; findUserMenuList(Long userId); # 4.1.2、接口实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869@Overridepublic List&lt;RouterVo&gt; findUserMenuList(Long userId) { //超级管理员admin账号id为：1 List&lt;SysMenu&gt; sysMenuList = null; if (userId.longValue() == 1) { sysMenuList = this.list(new LambdaQueryWrapper&lt;SysMenu&gt;().eq(SysMenu::getStatus, 1).orderByAsc(SysMenu::getSortValue)); } else { sysMenuList = sysMenuMapper.findListByUserId(userId); } //构建树形数据 List&lt;SysMenu&gt; sysMenuTreeList = MenuHelper.buildTree(sysMenuList); List&lt;RouterVo&gt; routerVoList = this.buildMenus(sysMenuTreeList); return routerVoList;}/** * 根据菜单构建路由 * @param menus * @return */private List&lt;RouterVo&gt; buildMenus(List&lt;SysMenu&gt; menus) { List&lt;RouterVo&gt; routers = new LinkedList&lt;RouterVo&gt;(); for (SysMenu menu : menus) { RouterVo router = new RouterVo(); router.setHidden(false); router.setAlwaysShow(false); router.setPath(getRouterPath(menu)); router.setComponent(menu.getComponent()); router.setMeta(new MetaVo(menu.getName(), menu.getIcon())); List&lt;SysMenu&gt; children = menu.getChildren(); //如果当前是菜单，需将按钮对应的路由加载出来，如：“角色授权”按钮对应的路由在“系统管理”下面 if(menu.getType().intValue() == 1) { List&lt;SysMenu&gt; hiddenMenuList = children.stream().filter(item -&gt; !StringUtils.isEmpty(item.getComponent())).collect(Collectors.toList()); for (SysMenu hiddenMenu : hiddenMenuList) { RouterVo hiddenRouter = new RouterVo(); hiddenRouter.setHidden(true); hiddenRouter.setAlwaysShow(false); hiddenRouter.setPath(getRouterPath(hiddenMenu)); hiddenRouter.setComponent(hiddenMenu.getComponent()); hiddenRouter.setMeta(new MetaVo(hiddenMenu.getName(), hiddenMenu.getIcon())); routers.add(hiddenRouter); } } else { if (!CollectionUtils.isEmpty(children)) { if(children.size() &gt; 0) { router.setAlwaysShow(true); } router.setChildren(buildMenus(children)); } } routers.add(router); } return routers;}/** * 获取路由地址 * * @param menu 菜单信息 * @return 路由地址 */public String getRouterPath(SysMenu menu) { String routerPath = &quot;/&quot; + menu.getPath(); if(menu.getParentId().intValue() != 0) { routerPath = menu.getPath(); } return routerPath;} # 4.1.3、添加 mapper 接口 SysMenuMapper 类 1List&lt;SysMenu&gt; findListByUserId(@Param(&quot;userId&quot;) Long userId); # 4.1.4、添加 xml 方法 新建 SysMenuMapper.xml 文件 1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.atguigu.system.mapper.SysMenuMapper&quot;&gt; &lt;resultMap id=&quot;sysMenuMap&quot; type=&quot;com.atguigu.model.system.SysMenu&quot; autoMapping=&quot;true&quot;&gt; &lt;/resultMap&gt; &lt;!-- 用于select查询公用抽取的列 --&gt; &lt;sql id=&quot;columns&quot;&gt; m.id,m.parent_id,m.name,m.type,m.path,m.component,m.perms,m.icon,m.sort_value,m.status,m.create_time,m.update_time,m.is_deleted &lt;/sql&gt; &lt;select id=&quot;findListByUserId&quot; resultMap=&quot;sysMenuMap&quot;&gt; select distinct &lt;include refid=&quot;columns&quot; /&gt; from sys_menu m inner join sys_role_menu rm on rm.menu_id = m.id inner join sys_user_role ur on ur.role_id = rm.role_id where ur.user_id = #{userId} and m.status = 1 and rm.is_deleted = 0 and ur.is_deleted = 0 and m.is_deleted = 0 &lt;/select&gt;&lt;/mapper&gt; # 4.2、获取用户按钮权限 说明：只需要获取按钮标识即可 # 4.1.1、定义接口 SysMenuService 类 123456/** * 获取用户按钮权限 * @param userId * @return */List&lt;String&gt; findUserPermsList(Long userId); # 4.1.2、接口实现 123456789101112@Overridepublic List&lt;String&gt; findUserPermsList(Long userId) { //超级管理员admin账号id为：1 List&lt;SysMenu&gt; sysMenuList = null; if (userId.longValue() == 1) { sysMenuList = this.list(new LambdaQueryWrapper&lt;SysMenu&gt;().eq(SysMenu::getStatus, 1)); } else { sysMenuList = sysMenuMapper.findListByUserId(userId); } List&lt;String&gt; permsList = sysMenuList.stream().filter(item -&gt; item.getType() == 2).map(item -&gt; item.getPerms()).collect(Collectors.toList()); return permsList;} # 4.3、修改 Controller 方法 IndexController 类 1234567@ApiOperation(value = &quot;获取用户信息&quot;)@GetMapping(&quot;info&quot;)public Result info(HttpServletRequest request) { String username = JwtHelper.getUsername(request.getHeader(&quot;token&quot;)); Map&lt;String, Object&gt; map = sysUserService.getUserInfo(username); return Result.ok(map);} # 4.3、定义 service 接口 SysUserService 类 123456/** * 根据用户名获取用户登录信息 * @param username * @return */Map&lt;String, Object&gt; getUserInfo(String username); # 4.4、service 接口实现 12@Autowiredprivate SysMenuService sysMenuService; 123456789101112131415161718@Overridepublic Map&lt;String, Object&gt; getUserInfo(String username) { Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); SysUser sysUser = this.getByUsername(username); //根据用户id获取菜单权限值 List&lt;RouterVo&gt; routerVoList = sysMenuService.findUserMenuList(sysUser.getId()); //根据用户id获取用户按钮权限 List&lt;String&gt; permsList = sysMenuService.findUserPermsList(sysUser.getId()); result.put(&quot;name&quot;, sysUser.getName()); result.put(&quot;avatar&quot;, &quot;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&quot;); //当前权限控制使用不到，我们暂时忽略 result.put(&quot;roles&quot;, new HashSet&lt;&gt;()); result.put(&quot;buttons&quot;, permsList); result.put(&quot;routers&quot;, routerVoList); return result;} # 5、前端对接 参考前端对接文档：《前端权限对接文档》 可直接引入前端项目完整代码 # 6、总结 当前我们已经实现前端菜单及按钮的权限控制，服务器端还没加任何控制，那么服务器端怎么控制呢？其实很简单，就是要在页面按钮对应的 controller 方法上面加对应的权限控制，即在进入 controller 方法前判断当前用户是否有访问权限。 怎么实现呢？如果我们自己实现，那么肯定想到的就是 Fillter 加 Aop 就可以实现，有现成的开源技术框架吗？答案是肯定的，如：Spring Security、Shiro 等一系列开源框架可供选择。 # 二、Spring Security 介绍 # 1、Spring Security 简介 Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。 正如你可能知道的关于安全方面的两个核心功能是 “认证” 和 “授权”，一般来说，Web 应用的安全性包括 ** 用户认证（Authentication）和用户授权（Authorization）** 两个部分，这两点也是 SpringSecurity 重要核心功能。 （1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码，系统通过校验用户名和密码来完成认证过程。 通俗点说就是系统认为用户是否能登录 （2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。 通俗点讲就是系统判断用户是否有权限去做某些事情。 # 2、同款产品对比 # 3.1、Spring Security Spring 技术栈的组成部分。 https://spring.io/projects/spring-security 通过提供完整可扩展的认证和授权支持保护你的应用程序。 SpringSecurity 特点： ⚫ 和 Spring 无缝整合。 ⚫ 全面的权限控制。 ⚫ 专门为 Web 开发而设计。 ​ ◼旧版本不能脱离 Web 环境使用。 ​ ◼新版本对整个框架进行了分层抽取，分成核心模块和 Web 模块。单独引入核心模块就可以脱离 Web 环境。 ⚫ 重量级。 # 3.2、 Shiro Apache 旗下的轻量级权限控制框架。 特点： ⚫ 轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。 ⚫ 通用性。 ​ ◼好处：不局限于 Web 环境，可以脱离 Web 环境使用。 ​ ◼缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。 Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。 相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有 Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方案，可以使用更少的配置来使用 Spring Security。 # 三、Spring Security 实现权限 要对 Web 资源进行保护，最好的办法莫过于 Filter 要想对方法调用进行保护，最好的办法莫过于 AOP。 Spring Security 进行认证和鉴权的时候，就是利用的一系列的 Filter 来进行拦截的。 如图所示，一个请求想要访问到 API 就会从左到右经过蓝线框里的过滤器，其中绿色部分是负责认证的过滤器，蓝色部分是负责异常处理，橙色部分则是负责授权。进过一系列拦截最终访问到我们的 API。 这里面我们只需要重点关注两个过滤器即可： UsernamePasswordAuthenticationFilter 负责登录认证， FilterSecurityInterceptor 负责权限授权。 说明：Spring Security 的核心逻辑全在这一套过滤器中，过滤器里会调用各种组件完成功能，掌握了这些过滤器和组件你就掌握了 Spring Security！这个框架的使用方式就是对这些过滤器和组件进行扩展。 # 1、Spring Security 入门 我们在现有的项目基础上做集成，Spring Security 权限控制部分也是公共模块，后续哪个 service 服务模块需要，直接引入即可。 后续我们的 Spring Cloud 微服务项目可能就基于该权限系统开发，因此我们要做好技术扩展。 # 1.1、创建 spring-security 模块 在 common 模块下创建 spring-security 公共模块，创建方式如：service-util 模块 # 1.2、添加依赖 修改 pom.xml 1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;spring-security&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;common-util&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Spring Security依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;scope&gt;provided &lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 说明：依赖包（spring-boot-starter-security）导入后，Spring Security 就默认提供了许多功能将整个应用给保护了起来： ​ 1、要求经过身份验证的用户才能与应用程序进行交互 ​ 2、创建好了默认登录表单 ​ 3、生成用户名为 user 的随机密码并打印在控制台上 ​ 等等… # 1.3、添加配置类 1234567891011package com.atguigu.security.config;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;@Configuration@EnableWebSecurity //@EnableWebSecurity是开启SpringSecurity的默认行为public class WebSecurityConfig extends WebSecurityConfigurerAdapter {} # 1.4、service-oa 模块引入 在 service-oa 引入权限模块，将依赖添加到 pom.mxl 文件 12345&lt;dependency&gt; &lt;groupId&gt;com.atguigu&lt;/groupId&gt; &lt;artifactId&gt;spring-security&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt; # 1.5、启动项目测试 在浏览器访问：http://localhost:8800/admin/system/sysRole/findAll 自动跳转到了登录页面 默认的用户名：user 密码在项目启动的时候在控制台会打印，注意每次启动的时候密码都回发生变化！ 输入用户名，密码，成功访问到 controller 方法并返回数据，说明 Spring Security 默认安全保护生效。 在实际开发中，这些默认的配置是不能满足我们需要的，我们需要扩展 Spring Security 组件，完成自定义配置，实现我们的项目需求。 # 2、用户认证 用户认证流程： # 2.1、用户认证核心组件 我们系统中会有许多用户，确认当前是哪个用户正在使用我们系统就是登录认证的最终目的。这里我们就提取出了一个核心概念：当前登录用户 / 当前认证用户。整个系统安全都是围绕当前登录用户展开的，这个不难理解，要是当前登录用户都不能确认了，那 A 下了一个订单，下到了 B 的账户上这不就乱套了。这一概念在 Spring Security 中的体现就是 Authentication ，它存储了认证信息，代表当前登录用户。 我们在程序中如何获取并使用它呢？我们需要通过 SecurityContext 来获取 Authentication ， SecurityContext 就是我们的上下文对象！这个上下文对象则是交由 SecurityContextHolder 进行管理，你可以在程序任何地方使用它： 1Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); SecurityContextHolder 原理非常简单，就是使用 ThreadLocal 来保证一个线程中传递同一个对象！ 现在我们已经知道了 Spring Security 中三个核心组件： ​ 1、 Authentication ：存储了认证信息，代表当前登录用户 ​ 2、 SeucirtyContext ：上下文对象，用来获取 Authentication ​ 3、 SecurityContextHolder ：上下文管理对象，用来在程序任何地方获取 SecurityContext Authentication 中是什么信息呢： ​ 1、 Principal ：用户信息，没有认证时一般是用户名，认证后一般是用户对象 ​ 2、 Credentials ：用户凭证，一般是密码 ​ 3、 Authorities ：用户权限 # 2.2、用户认证 Spring Security 是怎么进行用户认证的呢？ AuthenticationManager 就是 Spring Security 用于执行身份验证的组件，只需要调用它的 authenticate 方法即可完成认证。Spring Security 默认的认证方式就是在 UsernamePasswordAuthenticationFilter 这个过滤器中进行认证的，该过滤器负责认证逻辑。 Spring Security 用户认证关键代码如下： 123456// 生成一个包含账号密码的认证信息Authentication authenticationToken = new UsernamePasswordAuthenticationToken(username, passwrod);// AuthenticationManager校验这个认证信息，返回一个已认证的AuthenticationAuthentication authentication = authenticationManager.authenticate(authenticationToken);// 将返回的Authentication存到上下文中SecurityContextHolder.getContext().setAuthentication(authentication); 下面我们来分析一下。 # 2.2.1、认证接口分析 AuthenticationManager 的校验逻辑非常简单： 根据用户名先查询出用户对象 (没有查到则抛出异常) 将用户对象的密码和传递过来的密码进行校验，密码不匹配则抛出异常。 这个逻辑没啥好说的，再简单不过了。重点是这里每一个步骤 Spring Security 都提供了组件： ​ 1、是谁执行 根据用户名查询出用户对象 逻辑的呢？用户对象数据可以存在内存中、文件中、数据库中，你得确定好怎么查才行。这一部分就是交由 ** UserDetialsService ** 处理，该接口只有一个方法 loadUserByUsername(String username) ，通过用户名查询用户对象，默认实现是在内存中查询。 ​ 2、那查询出来的 用户对象 又是什么呢？每个系统中的用户对象数据都不尽相同，咱们需要确认我们的用户数据是啥样的才行。Spring Security 中的用户数据则是由 ** UserDetails ** 来体现，该接口中提供了账号、密码等通用属性。 ​ 3、对密码进行校验大家可能会觉得比较简单， if、else 搞定，就没必要用什么组件了吧？但框架毕竟是框架考虑的比较周全，除了 if、else 外还解决了密码加密的问题，这个组件就是 ** PasswordEncoder **，负责密码加密与校验。 我们可以看下 AuthenticationManager 校验逻辑的大概源码： 123456789101112131415161718192021222324public Authentication authenticate(Authentication authentication) throws AuthenticationException {...省略其他代码 // 传递过来的用户名 String username = authentication.getName(); // 调用UserDetailService的方法，通过用户名查询出用户对象UserDetail（查询不出来UserDetailService则会抛出异常） UserDetails userDetails = this.getUserDetailsService().loadUserByUsername(username); String presentedPassword = authentication.getCredentials().toString(); // 传递过来的密码 String password = authentication.getCredentials().toString(); // 使用密码解析器PasswordEncoder传递过来的密码是否和真实的用户密码匹配 if (!passwordEncoder.matches(password, userDetails.getPassword())) { // 密码错误则抛出异常 throw new BadCredentialsException(&quot;错误信息...&quot;); } // 注意哦，这里返回的已认证Authentication，是将整个UserDetails放进去充当Principal UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(userDetails, authentication.getCredentials(), userDetails.getAuthorities()); return result;...省略其他代码} UserDetialsService 、 UserDetails 、 PasswordEncoder ，这三个组件 Spring Security 都有默认实现，这一般是满足不了我们的实际需求的，所以这里我们自己来实现这些组件！ 下面我们就在项目里面来实现用户认证。 # 2.2.3、加密器 PasswordEncoder 加密我们项目采取 MD5 加密 操作模块：spring-security 模块 自定义加密处理组件：CustomMd5PasswordEncoder 1234567891011121314151617181920212223package com.atguigu.security.custom;import com.atguigu.common.util.MD5;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Component;/** * &lt;p&gt; * 密码处理 * &lt;/p&gt; * */@Componentpublic class CustomMd5PasswordEncoder implements PasswordEncoder { public String encode(CharSequence rawPassword) { return MD5.encrypt(rawPassword.toString()); } public boolean matches(CharSequence rawPassword, String encodedPassword) { return encodedPassword.equals(MD5.encrypt(rawPassword.toString())); }} # 2.2.4、用户对象 UserDetails 该接口就是我们所说的用户对象，它提供了用户的一些通用属性，源码如下： 123456789101112131415161718192021222324252627282930public interface UserDetails extends Serializable { /** * 用户权限集合（这个权限对象现在不管它，到权限时我会讲解） */ Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); /** * 用户密码 */ String getPassword(); /** * 用户名 */ String getUsername(); /** * 用户没过期返回true，反之则false */ boolean isAccountNonExpired(); /** * 用户没锁定返回true，反之则false */ boolean isAccountNonLocked(); /** * 用户凭据(通常为密码)没过期返回true，反之则false */ boolean isCredentialsNonExpired(); /** * 用户是启用状态返回true，反之则false */ boolean isEnabled();} 实际开发中我们的用户属性各种各样，这些默认属性可能是满足不了，所以我们一般会自己实现该接口，然后设置好我们实际的用户实体对象。实现此接口要重写很多方法比较麻烦，我们可以继承 Spring Security 提供的 org.springframework.security.core.userdetails.User 类，该类实现了 UserDetails 接口帮我们省去了重写方法的工作： 操作模块：spring-security 模块 添加 CustomUser 对象 123456789101112131415161718192021222324252627282930package com.atguigu.security.custom;import com.atguigu.model.system.SysUser;import lombok.Data;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.User;import java.util.Collection;public class CustomUser extends User { /** * 我们自己的用户实体对象，要调取用户信息时直接获取这个实体对象。（这里我就不写get/set方法了） */ private SysUser sysUser; public CustomUser(SysUser sysUser, Collection&lt;? extends GrantedAuthority&gt; authorities) { super(sysUser.getUsername(), sysUser.getPassword(), authorities); this.sysUser = sysUser; } public SysUser getSysUser() { return sysUser; } public void setSysUser(SysUser sysUser) { this.sysUser = sysUser; } } # 2.2.5 业务对象 UserDetailsService 该接口很简单只有一个方法： 123456public interface UserDetailsService { /** * 根据用户名获取用户对象（获取不到直接抛异常） */ UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;} 我们实现该接口，就完成了自己的业务 操作模块：service-oa 添加 UserDetailsServiceImpl 类，实现 UserDetailsService 接口 1234567891011121314151617181920212223242526272829303132333435package com.atguigu.system.service.impl;import com.atguigu.common.execption.GuiguException;import com.atguigu.common.result.ResultCodeEnum;import com.atguigu.model.system.SysUser;import com.atguigu.security.custom.CustomUser;import com.atguigu.system.service.SysUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;import java.util.Collections;@Componentpublic class UserDetailsServiceImpl implements UserDetailsService { @Autowired private SysUserService sysUserService; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { SysUser sysUser = sysUserService.getByUsername(username); if(null == sysUser) { throw new UsernameNotFoundException(&quot;用户名不存在！&quot;); } if(sysUser.getStatus().intValue() == 0) { throw new RuntimeException(&quot;账号已停用&quot;); } return new CustomUser(sysUser, Collections.emptyList()); }} AuthenticationManager 校验所调用的三个组件我们就已经做好实现了！ # 2.2.6、自定义用户认证接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package com.atguigu.security.fillter;import com.atguigu.common.jwt.JwtHelper;import com.atguigu.common.result.Result;import com.atguigu.common.result.ResultCodeEnum;import com.atguigu.common.util.ResponseUtil;import com.atguigu.security.custom.CustomUser;import com.atguigu.vo.system.LoginVo;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.HashMap;import java.util.Map;/** * &lt;p&gt; * 登录过滤器，继承UsernamePasswordAuthenticationFilter，对用户名密码进行登录校验 * &lt;/p&gt; */public class TokenLoginFilter extends UsernamePasswordAuthenticationFilter { public TokenLoginFilter(AuthenticationManager authenticationManager) { this.setAuthenticationManager(authenticationManager); this.setPostOnly(false); //指定登录接口及提交方式，可以指定任意路径 this.setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(&quot;/admin/system/index/login&quot;,&quot;POST&quot;)); } /** * 登录认证 * @param req * @param res * @return * @throws AuthenticationException */ @Override public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res) throws AuthenticationException { try { LoginVo loginVo = new ObjectMapper().readValue(req.getInputStream(), LoginVo.class); Authentication authenticationToken = new UsernamePasswordAuthenticationToken(loginVo.getUsername(), loginVo.getPassword()); return this.getAuthenticationManager().authenticate(authenticationToken); } catch (IOException e) { throw new RuntimeException(e); } } /** * 登录成功 * @param request * @param response * @param chain * @param auth * @throws IOException * @throws ServletException */ @Override protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication auth) throws IOException, ServletException { CustomUser customUser = (CustomUser) auth.getPrincipal(); String token = JwtHelper.createToken(customUser.getSysUser().getId(), customUser.getSysUser().getUsername()); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;token&quot;, token); ResponseUtil.out(response, Result.ok(map)); } /** * 登录失败 * @param request * @param response * @param e * @throws IOException * @throws ServletException */ @Override protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException e) throws IOException, ServletException { if(e.getCause() instanceof RuntimeException) { ResponseUtil.out(response, Result.build(null, 204, e.getMessage())); } else { ResponseUtil.out(response, Result.build(null, ResultCodeEnum.LOGIN_MOBLE_ERROR)); } }} 添加工具类：ResponseUtil 添加模块：common-util 1234567891011121314151617181920212223package com.atguigu.common.util;import com.atguigu.common.result.Result;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class ResponseUtil { public static void out(HttpServletResponse response, Result r) { ObjectMapper mapper = new ObjectMapper(); response.setStatus(HttpStatus.OK.value()); response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE); try { mapper.writeValue(response.getWriter(), r); } catch (IOException e) { e.printStackTrace(); } }} # 2.2.7、认证解析 token 因为用户登录状态在 token 中存储在客户端，所以每次请求接口请求头携带 token， 后台通过自定义 token 过滤器拦截解析 token 完成认证并填充用户信息实体。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.atguigu.security.fillter;import com.atguigu.common.jwt.JwtHelper;import com.atguigu.common.result.Result;import com.atguigu.common.result.ResultCodeEnum;import com.atguigu.common.util.ResponseUtil;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.util.StringUtils;import org.springframework.web.filter.OncePerRequestFilter;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.Collections;/** * &lt;p&gt; * 认证解析token过滤器 * &lt;/p&gt; */public class TokenAuthenticationFilter extends OncePerRequestFilter { public TokenAuthenticationFilter() { } @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { logger.info(&quot;uri:&quot;+request.getRequestURI()); //如果是登录接口，直接放行 if(&quot;/admin/system/index/login&quot;.equals(request.getRequestURI())) { chain.doFilter(request, response); return; } UsernamePasswordAuthenticationToken authentication = getAuthentication(request); if(null != authentication) { SecurityContextHolder.getContext().setAuthentication(authentication); chain.doFilter(request, response); } else { ResponseUtil.out(response, Result.build(null, ResultCodeEnum.PERMISSION)); } } private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) { // token置于header里 String token = request.getHeader(&quot;token&quot;); logger.info(&quot;token:&quot;+token); if (!StringUtils.isEmpty(token)) { String useruame = JwtHelper.getUsername(token); logger.info(&quot;useruame:&quot;+useruame); if (!StringUtils.isEmpty(useruame)) { return new UsernamePasswordAuthenticationToken(useruame, null, Collections.emptyList()); } } return null; }} # 2.2.8、配置用户认证 修改 WebSecurityConfig 配置类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.atguigu.security.config;import com.atguigu.security.custom.CustomMd5PasswordEncoder;import com.atguigu.security.filter.TokenAuthenticationFilter;import com.atguigu.security.filter.TokenLoginFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.web.cors.CorsUtils;@Configuration@EnableWebSecurity //@EnableWebSecurity是开启SpringSecurity的默认行为public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; @Autowired private CustomMd5PasswordEncoder customMd5PasswordEncoder; @Bean @Override protected AuthenticationManager authenticationManager() throws Exception { return super.authenticationManager(); } @Override protected void configure(HttpSecurity http) throws Exception { // 这是配置的关键，决定哪些接口开启防护，哪些接口绕过防护 http //关闭csrf跨站请求伪造 .csrf().disable() // 开启跨域以便前端调用接口 .cors().and() .authorizeRequests() // 指定某些接口不需要通过验证即可访问。登陆接口肯定是不需要认证的 .antMatchers(&quot;/admin/system/index/login&quot;).permitAll() // 这里意思是其它所有接口需要认证才能访问 .anyRequest().authenticated() .and() //TokenAuthenticationFilter放到UsernamePasswordAuthenticationFilter的前面，这样做就是为了除了登录的时候去查询数据库外，其他时候都用token进行认证。 .addFilterBefore(new TokenAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class) .addFilter(new TokenLoginFilter(authenticationManager())); //禁用session http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 指定UserDetailService和加密器 auth.userDetailsService(userDetailsService) .passwordEncoder(customMd5PasswordEncoder); } /** * 配置哪些请求不拦截 * 排除swagger相关请求 * @param web * @throws Exception */ @Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(&quot;/favicon.ico&quot;,&quot;/swagger-resources/**&quot;, &quot;/webjars/**&quot;, &quot;/v2/**&quot;, &quot;/swagger-ui.html/**&quot;, &quot;/doc.html&quot;); }} 说明： 1、我们是前后端分离项目，使用 jwt 生成 token ，即用户状态保存在客户端中，前后端交互通过 api 接口 无session 生成，所以我们不需要配置 formLogin ，session 禁用 2、在浏览器访问：http://localhost:8800/admin/system/sysRole/findAll 12345{ &quot;code&quot;: 209, &quot;message&quot;: &quot;没有权限&quot;, &quot;data&quot;: null} # 2.2.9、通过 swagger 测试登录 在相应的自定义组件设置断点，查看是否按照预期执行。 1、先输入正确的用户名与密码 2、输入错误的用户名与密码 结论：跟预期一致 # 3、用户授权 在 SpringSecurity 中，会使用默认的 FilterSecurityInterceptor 来进行权限校验。在 FilterSecurityInterceptor 中会从 SecurityContextHolder 获取其中的 Authentication，然后获取其中的权限信息。判断当前用户是否拥有访问当前资源所需的权限。 SpringSecurity 中的 Authentication 类： 1234567891011121314public interface Authentication extends Principal, Serializable { //权限数据列表 Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); Object getCredentials(); Object getDetails(); Object getPrincipal(); boolean isAuthenticated(); void setAuthenticated(boolean var1) throws IllegalArgumentException;} 前面登录时执行 loadUserByUsername 方法时，return new CustomUser (sysUser, Collections.emptyList ()); 后面的空数据对接就是返回给 Spring Security 的权限数据。 在 TokenAuthenticationFilter 中怎么获取权限数据呢？登录时我们把权限数据保存到 redis 中（用户名为 key，权限数据为 value 即可），这样通过 token 获取用户名即可拿到权限数据，这样就可构成出完整的 Authentication 对象。 # 3.1、修改 loadUserByUsername 接口方法 1234567891011121314151617@Overridepublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { SysUser sysUser = sysUserService.getByUsername(username); if(null == sysUser) { throw new UsernameNotFoundException(&quot;用户名不存在！&quot;); } if(sysUser.getStatus().intValue() == 0) { throw new GuiguException(ResultCodeEnum.ACCOUNT_STOP); } List&lt;String&gt; userPermsList = sysMenuService.findUserPermsList(sysUser.getId()); List&lt;SimpleGrantedAuthority&gt; authorities = new ArrayList&lt;&gt;(); for (String perm : userPermsList) { authorities.add(new SimpleGrantedAuthority(perm.trim())); } return new CustomUser(sysUser, authorities);} # 3.2、spring-security 模块配置 redis 添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; # 3.3、修改 TokenLoginFilter 登录成功方法 登录成功我们将权限数据保单到 reids 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374public class TokenLoginFilter extends UsernamePasswordAuthenticationFilter { private RedisTemplate redisTemplate; public TokenLoginFilter(AuthenticationManager authenticationManager, RedisTemplate redisTemplate) { this.setAuthenticationManager(authenticationManager); this.setPostOnly(false); //指定登录接口及提交方式，可以指定任意路径 this.setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(&quot;/admin/system/index/login&quot;,&quot;POST&quot;)); this.redisTemplate = redisTemplate; } /** * 登录认证 * @param req * @param res * @return * @throws AuthenticationException */ @Override public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res) throws AuthenticationException { try { LoginVo loginVo = new ObjectMapper().readValue(req.getInputStream(), LoginVo.class); Authentication authenticationToken = new UsernamePasswordAuthenticationToken(loginVo.getUsername(), loginVo.getPassword()); return this.getAuthenticationManager().authenticate(authenticationToken); } catch (IOException e) { throw new RuntimeException(e); } } /** * 登录成功 * @param request * @param response * @param chain * @param auth * @throws IOException * @throws ServletException */ @Override protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication auth) throws IOException, ServletException { CustomUser customUser = (CustomUser) auth.getPrincipal(); String token = JwtHelper.createToken(customUser.getSysUser().getId(), customUser.getSysUser().getUsername()); //保存权限数据 redisTemplate.opsForValue().set(customUser.getUsername(), JSON.toJSONString(customUser.getAuthorities())); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;token&quot;, token); ResponseUtil.out(response, Result.ok(map)); } /** * 登录失败 * @param request * @param response * @param e * @throws IOException * @throws ServletException */ @Override protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException e) throws IOException, ServletException { if(e.getCause() instanceof RuntimeException) { ResponseUtil.out(response, Result.build(null, 204, e.getMessage())); } else { ResponseUtil.out(response, Result.build(null, ResultCodeEnum.LOGIN_MOBLE_ERROR)); } }} # 3.4、修改 TokenAuthenticationFilter 认证是从 redis 里面获取权限数据 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package com.atguigu.security.fillter;import com.alibaba.fastjson.JSON;import com.atguigu.common.jwt.JwtHelper;import com.atguigu.common.result.Result;import com.atguigu.common.result.ResultCodeEnum;import com.atguigu.common.util.ResponseUtil;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.util.StringUtils;import org.springframework.web.filter.OncePerRequestFilter;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import java.util.Map;import java.util.stream.Collectors;/** * &lt;p&gt; * 认证解析token过滤器 * &lt;/p&gt; */public class TokenAuthenticationFilter extends OncePerRequestFilter { private RedisTemplate redisTemplate; public TokenAuthenticationFilter(RedisTemplate redisTemplate) { this.redisTemplate = redisTemplate; } @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { logger.info(&quot;uri:&quot;+request.getRequestURI()); //如果是登录接口，直接放行 if(&quot;/admin/system/index/login&quot;.equals(request.getRequestURI())) { chain.doFilter(request, response); return; } UsernamePasswordAuthenticationToken authentication = getAuthentication(request); if(null != authentication) { SecurityContextHolder.getContext().setAuthentication(authentication); chain.doFilter(request, response); } else { ResponseUtil.out(response, Result.build(null, ResultCodeEnum.PERMISSION)); } } private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) { // token置于header里 String token = request.getHeader(&quot;token&quot;); logger.info(&quot;token:&quot;+token); if (!StringUtils.isEmpty(token)) { String username = JwtHelper.getUsername(token); logger.info(&quot;useruame:&quot;+username); if (!StringUtils.isEmpty(username)) { String authoritiesString = (String) redisTemplate.opsForValue().get(useruame); List&lt;Map&gt; mapList = JSON.parseArray(authoritiesString, Map.class); List&lt;SimpleGrantedAuthority&gt; authorities = new ArrayList&lt;&gt;(); for (Map map : mapList) { authorities.add(new SimpleGrantedAuthority((String)map.get(&quot;authority&quot;))); } return new UsernamePasswordAuthenticationToken(useruame, null, authorities); } else { return new UsernamePasswordAuthenticationToken(username, null, new ArrayList&lt;&gt;()); } } } return null; }} # 3.5、修改配置类 修改 WebSecurityConfig 类 配置类添加注解： 开启基于方法的安全认证机制，也就是说在 web 层的 controller 启用注解机制的安全确认 1@EnableGlobalMethodSecurity(prePostEnabled = true) 添加注入 bean： 12@Autowiredprivate RedisTemplate redisTemplate; 添加参数： 连个 fillter 添加 redisTemplate 参数 完整代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package com.atguigu.security.config;import com.atguigu.security.custom.CustomMd5PasswordEncoder;import com.atguigu.security.fillter.TokenAuthenticationFilter;import com.atguigu.security.fillter.TokenLoginFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecurity //@EnableWebSecurity是开启SpringSecurity的默认行为@EnableGlobalMethodSecurity(prePostEnabled = true)//开启注解功能，默认禁用注解public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; @Autowired private CustomMd5PasswordEncoder customMd5PasswordEncoder; @Autowired private RedisTemplate redisTemplate; @Bean @Override protected AuthenticationManager authenticationManager() throws Exception { return super.authenticationManager(); } @Override protected void configure(HttpSecurity http) throws Exception { // 这是配置的关键，决定哪些接口开启防护，哪些接口绕过防护 http //关闭csrf .csrf().disable() // 开启跨域以便前端调用接口 .cors().and() .authorizeRequests() // 指定某些接口不需要通过验证即可访问。登陆接口肯定是不需要认证的 //.antMatchers(&quot;/admin/system/index/login&quot;).permitAll() // 这里意思是其它所有接口需要认证才能访问 .anyRequest().authenticated() .and() //TokenAuthenticationFilter放到UsernamePasswordAuthenticationFilter的前面，这样做就是为了除了登录的时候去查询数据库外，其他时候都用token进行认证。 .addFilterBefore(new TokenAuthenticationFilter(redisTemplate), UsernamePasswordAuthenticationFilter.class) .addFilter(new TokenLoginFilter(authenticationManager(), redisTemplate)); //禁用session http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 指定UserDetailService和加密器 auth.userDetailsService(userDetailsService).passwordEncoder(customMd5PasswordEncoder); } /** * 配置哪些请求不拦截 * 排除swagger相关请求 * @param web * @throws Exception */ @Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(&quot;/favicon.ico&quot;,&quot;/swagger-resources/**&quot;, &quot;/webjars/**&quot;, &quot;/v2/**&quot;, &quot;/swagger-ui.html/**&quot;, &quot;/doc.html&quot;); }} # 3.6、service-oa 模块添加 redis 配置 application-dev.yml 配文件 12345678910111213spring: redis: host: localhost port: 6379 database: 0 timeout: 1800000 password: jedis: pool: max-active: 20 #最大连接数 max-wait: -1 #最大阻塞等待时间(负数表示没限制) max-idle: 5 #最大空闲 min-idle: 0 #最小空闲 # 3.7、控制 controller 层接口权限 Spring Security 默认是禁用注解的，要想开启注解，需要在继承 WebSecurityConfigurerAdapter 的类上加 @EnableGlobalMethodSecurity 注解，来判断用户对某个控制层的方法是否具有访问权限 通过 @PreAuthorize 标签控制 controller 层接口权限 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public class SysRoleController { @Autowired private SysRoleService sysRoleService; @PreAuthorize(&quot;hasAuthority('bnt.sysRole.list')&quot;) @ApiOperation(value = &quot;获取分页列表&quot;) @GetMapping(&quot;{page}/{limit}&quot;) public Result index( @ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true) @PathVariable Long page, @ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true) @PathVariable Long limit, @ApiParam(name = &quot;roleQueryVo&quot;, value = &quot;查询对象&quot;, required = false) SysRoleQueryVo roleQueryVo) { Page&lt;SysRole&gt; pageParam = new Page&lt;&gt;(page, limit); IPage&lt;SysRole&gt; pageModel = sysRoleService.selectPage(pageParam, roleQueryVo); return Result.ok(pageModel); } @PreAuthorize(&quot;hasAuthority('bnt.sysRole.list')&quot;) @ApiOperation(value = &quot;获取&quot;) @GetMapping(&quot;get/{id}&quot;) public Result get(@PathVariable Long id) { SysRole role = sysRoleService.getById(id); return Result.ok(role); } @PreAuthorize(&quot;hasAuthority('bnt.sysRole.add')&quot;) @ApiOperation(value = &quot;新增角色&quot;) @PostMapping(&quot;save&quot;) public Result save(@RequestBody @Validated SysRole role) { sysRoleService.save(role); return Result.ok(); } @PreAuthorize(&quot;hasAuthority('bnt.sysRole.update')&quot;) @ApiOperation(value = &quot;修改角色&quot;) @PutMapping(&quot;update&quot;) public Result updateById(@RequestBody SysRole role) { sysRoleService.updateById(role); return Result.ok(); } @PreAuthorize(&quot;hasAuthority('bnt.sysRole.remove')&quot;) @ApiOperation(value = &quot;删除角色&quot;) @DeleteMapping(&quot;remove/{id}&quot;) public Result remove(@PathVariable Long id) { sysRoleService.removeById(id); return Result.ok(); } @PreAuthorize(&quot;hasAuthority('bnt.sysRole.remove')&quot;) @ApiOperation(value = &quot;根据id列表删除&quot;) @DeleteMapping(&quot;batchRemove&quot;) public Result batchRemove(@RequestBody List&lt;Long&gt; idList) { sysRoleService.removeByIds(idList); return Result.ok(); } ...} # 3.8、测试服务器端权限 登录后台，分配权限进行测试，页面如果添加了按钮权限控制，可临时去除方便测试 测试结论： ​ 1、分配了权限的能够成功返回接口数据 ​ 2、没有分配权限的会抛出异常：org.springframework.security.access.AccessDeniedException: 不允许访问 # 3.9、异常处理 异常处理有 2 种方式： ​ 1、扩展 Spring Security 异常处理类：AccessDeniedHandler、AuthenticationEntryPoint ​ 2、在 spring boot 全局异常统一处理 第一种方案说明：如果系统实现了全局异常处理，那么全局异常首先会获取 AccessDeniedException 异常，要想 Spring Security 扩展异常生效，必须在全局异常再次抛出该异常。 我们使用第二种方案。 全局异常添加处理 操作模块：service-util 12345678910/** * spring security异常 * @param e * @return */@ExceptionHandler(AccessDeniedException.class)@ResponseBodypublic Result error(AccessDeniedException e) throws AccessDeniedException { return Result.build(null, ResultCodeEnum.PERMISSION);} AccessDeniedException 需要引入依赖，Spring Security 对应的异常 在 service-util 模块引入依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;","link":"/2023/07/06/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"}],"tags":[],"categories":[],"pages":[{"title":"about","text":"","link":"/about/index.html"}]}